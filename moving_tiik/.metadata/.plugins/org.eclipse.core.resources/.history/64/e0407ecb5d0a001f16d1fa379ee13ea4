/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "math.h"
#include <stdio.h>
#include <stdint.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart2;

DMA_HandleTypeDef hdma_memtomem_dma2_stream0;
/* USER CODE BEGIN PV */
uint8_t dataTxBuffer[13] = {0};
uint8_t debugTxBuffer[2] = {0};
uint8_t dataRxBuffer[13] = {0};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

typedef struct Motor Motor;
struct Motor {
	TIM_HandleTypeDef timer;
	uint16_t dirPin;
	GPIO_TypeDef *dirGPIO;
	float currentSpeed;
};

Motor motorN;
Motor motorSE;
Motor motorSO;
Motor motorX;

float maxSpeed;

typedef struct Position Position;
struct Position{
	float x;
	float y;
	float angle;
	float speed;
};

Position TiikPosition;
Position TiikTemporaryPosition;

uint8_t robotState;
uint8_t stop;
uint8_t dataArrived;



// WARNING :
// motorN c'est moteur avec condo C3
// motorS0 c'est moteur avec condo C4
// motorSE c'est moteur avec condo C2

void initMotors(){

	motorN.timer = htim3;
	motorN.dirPin = GPIO_PIN_3;
	motorN.dirGPIO = GPIOB;
	motorN.currentSpeed = 0;

	motorSO.timer = htim1;
	motorSO.dirPin = GPIO_PIN_10;
	motorSO.dirGPIO = GPIOA;
	motorSO.currentSpeed = 0;

	motorSE.timer = htim4;
	motorSE.dirPin = GPIO_PIN_5;
	motorSE.dirGPIO = GPIOB;
	motorSE.currentSpeed = 0;

	motorX.timer = htim2;
	motorX.dirPin = GPIO_PIN_4;
	motorX.dirGPIO = GPIOB;
	motorX.currentSpeed = 0;

}


void transformData(uint32_t data, int start_index){
	dataTxBuffer[start_index*4 + 4] = (data & 0xff);
	dataTxBuffer[start_index*4 + 3] = ((data >> 8) & 0xff);
	dataTxBuffer[start_index*4 + 2] = ((data >> 16) & 0xff);
	dataTxBuffer[start_index*4 + 1] = ((data >> 24) & 0xff);
}

void debugTransmit(char data){
	debugTxBuffer[0] = 0x02;
	debugTxBuffer[1] = data;
	HAL_UART_Transmit(&huart2, debugTxBuffer, 2, HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, dataRxBuffer, 13);
}

void floatToBytes(float value, unsigned char *bytes) {
    unsigned char *ptr = (unsigned char *)&value;
    for (int i = 0; i < sizeof(float); ++i) {
        bytes[i] = ptr[i];
    }
}

void dataTransmit(float position_X,float position_Y,float position_angle){
	floatToBytes(position_X,&dataTxBuffer[1]);
	floatToBytes(position_Y,&dataTxBuffer[5]);
	floatToBytes(position_angle,&dataTxBuffer[9]);

	HAL_UART_Transmit(&huart2, dataTxBuffer, 13, HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, dataRxBuffer, 13);
}


void setPosition(){
	float position_X = TiikPosition.x;
	float position_Y = TiikPosition.y;
	float position_angle = TiikPosition.angle;

	transformData(floatToBytes(position_X),0);
	transformData(floatToBytes(position_Y),1);
	transformData(floatToBytes(position_angle),2);

}

void calculPosition(float distance, float cosTheta,float sinTheta){
	float position_X = distance*cosTheta - TiikPosition.x;
	float position_Y = distance*cosTheta - TiikPosition.y;
	float position_angle = TiikPosition.angle;

	TiikTemporaryPosition.x = position_X;
	TiikTemporaryPosition.y = position_Y;
	TiikTemporaryPosition.angle = position_angle;

}

void calculPosition2(float angle,float way){
	float position_X = TiikPosition.x;
	float position_Y = TiikPosition.y;
	float position_angle = TiikPosition.angle + angle*way;

	TiikTemporaryPosition.x = position_X;
	TiikTemporaryPosition.y = position_Y;
	TiikTemporaryPosition.angle = position_angle;
}

void updateTimerPeriod(Motor motor, float speed){
	float internalFrequency = 16000000;
	motor.currentSpeed = speed;
	if (speed > 0){
		HAL_GPIO_WritePin(motor.dirGPIO, motor.dirPin, GPIO_PIN_SET);
		motor.timer.Instance->ARR = (uint16_t) (internalFrequency/(speed*16));
	} else if (speed < 0) {
		HAL_GPIO_WritePin(motor.dirGPIO, motor.dirPin, GPIO_PIN_RESET);
		motor.timer.Instance->ARR = (uint16_t) -(internalFrequency/(speed*16));
	} else {
		motor.timer.Instance->ARR = 0;
	}
	motor.timer.Instance->CNT = 0;
}

void turn3Wheel(float speed,float angle){

	float stepByTurn = 3200;
	float stepToRadians = stepByTurn/(2*M_PI);
	float way;

	debugTransmit(0x04);
	TiikTemporaryPosition.x = TiikPosition.x;
	TiikTemporaryPosition.y = TiikPosition.y;
	TiikTemporaryPosition.angle = TiikPosition.angle;

	float angleTiik;

	if (angle < 0){
		way = -1;
		angleTiik = -angle;
	} else {
		way = 1;
		angleTiik = angle;
	}

	if (angleTiik > M_PI){
		angleTiik = 2*M_PI - angle;
		way = -way;
	} else {
		angleTiik = angle;
		way = 1;
	}

	float speedTiik = 10;
	float minSpeed = 10;

	float radianAchieve = 0.0;
	float radianToAchieve = angleTiik;

	int task = 1;

	float rampRadian = 0.5;

	if (radianToAchieve < 2*rampRadian){
		rampRadian = radianToAchieve/2;
	}

	float deltaT = 30;

	float deltaTn = 0.0;
	float tn = 0.0;
	float tn_1 = 0.0;
	float t0 = __HAL_TIM_GetCounter(&htim5)*pow(10,-6);

	stop = 0;

	float urgencyRamp = 0.25;
	float urgencyRadian  = 0;

	maxSpeed = speed;

	while(task){

		if (stop){
			speedTiik = maxSpeed  - ((maxSpeed - minSpeed)*urgencyRadian/urgencyRamp);
		} else if (radianAchieve < rampRadian) {
		    speedTiik = ((maxSpeed - minSpeed)*radianAchieve/rampRadian) + minSpeed;
		} else if (radianToAchieve - radianAchieve < rampRadian){
			speedTiik = maxSpeed - ((maxSpeed-minSpeed)*(radianAchieve-radianToAchieve + rampRadian)/rampRadian);
		} else {
			speedTiik = maxSpeed;
		}

		updateTimerPeriod(motorN,way*speedTiik*stepToRadians);
		updateTimerPeriod(motorSE,way*speedTiik*stepToRadians);
		updateTimerPeriod(motorSO,way*speedTiik*stepToRadians);

		tn = (__HAL_TIM_GetCounter(&htim5)*pow(10,-6) - t0);
		deltaTn = tn - tn_1;
		tn_1 = tn;
		radianAchieve += speedTiik * deltaTn;

		if (radianAchieve > radianToAchieve || urgencyRadian > urgencyRamp){
			task = 0;
		}

		calculPosition2(radianAchieve,way);

		if (stop){
			urgencyRadian += speedTiik * deltaTn;
		}

		HAL_Delay(deltaT);
	}

	TiikPosition.x = TiikTemporaryPosition.x;
	TiikPosition.y = TiikTemporaryPosition.y;
	TiikPosition.angle = TiikTemporaryPosition.angle;

	updateTimerPeriod(motorN,0);
	updateTimerPeriod(motorSE,0);
	updateTimerPeriod(motorSO,0);

	HAL_Delay(deltaT);

}

void moveForward3Wheel(float speed, float angle, float distance){

	debugTransmit(0x03);

	float speedTiik = 10;

	float distanceAchieve = 0.0;
	float distanceToAchieve = distance;

	int task = 1;

	float rampDistance = 100;

	if (distanceToAchieve < 2*rampDistance){
		rampDistance = distanceToAchieve/2;
	}

	float deltaT = 30;

	float deltaTn = 0.0;
	float tn = 0.0;
	float tn_1 = 0.0;
	float t0 = __HAL_TIM_GetCounter(&htim5)*pow(10,-6);

	stop = 0;

	float urgencyRamp = 50;
	float urgencyDistance  = 0;

	float maxSpeed = speed;

	float cosTheta = cos(angle);
	float sinTheta = sin(angle);

	while(task){

		if (stop){
			speedTiik = maxSpeed  - ((maxSpeed -10)*urgencyDistance/urgencyRamp);
		} else if (distanceAchieve < rampDistance) {
		    speedTiik = ((maxSpeed - 10)*distanceAchieve/rampDistance) + 10;
		} else if (distanceToAchieve - distanceAchieve < rampDistance){
			speedTiik = maxSpeed - ((speed-10)*(distanceAchieve-distanceToAchieve + rampDistance)/rampDistance);
		} else {
			speedTiik = maxSpeed;
		}
		float sqrt3 = sqrt(3);
		float speedN = speedTiik*cosTheta;
		float speedSE = ( speedTiik*((-cosTheta/2)-(sqrt3*sinTheta/2)));
		float speedSO = ( speedTiik*((-cosTheta/2)+(sqrt3*sinTheta/2)));

		updateTimerPeriod(motorN,speedN);
		updateTimerPeriod(motorSE,speedSE);
		updateTimerPeriod(motorSO,speedSO);

		tn = (__HAL_TIM_GetCounter(&htim5)*pow(10,-6) - t0);
		deltaTn = tn - tn_1;
		tn_1 = tn;
		distanceAchieve += speedTiik * deltaTn;

		if (distanceAchieve > distanceToAchieve || urgencyDistance > urgencyRamp){
			task = 0;
		}

		calculPosition(distanceAchieve,cos(angle + TiikPosition.angle),cos(angle + TiikPosition.angle));

		if (stop){
			urgencyDistance += speedTiik * deltaTn;
		}



		HAL_Delay(deltaT);
	}

	TiikPosition.x = TiikTemporaryPosition.x;
	TiikPosition.y = TiikTemporaryPosition.y;
	TiikPosition.angle = TiikTemporaryPosition.angle;

	updateTimerPeriod(motorN,0);
	updateTimerPeriod(motorSE,0);
	updateTimerPeriod(motorSO,0);

	HAL_Delay(deltaT);

}


void initPosition(){
  TiikPosition.x = 0.0;
  TiikPosition.y = 0.0;
  TiikPosition.angle = 0.0;
}

uint32_t regroupBytesToUint32(unsigned char *bytes) {
    uint32_t uint32Value = 0;

    for (int i = 0; i < sizeof(uint32_t); ++i) {
    	uint32Value |= (bytes[i] << (8 * (sizeof(uint32_t) - 1 - i)));
    }

    return uint32Value;
}

float regroupBytesToFloat(unsigned char *bytes) {
    float floatValue;
    unsigned char *value = (unsigned char *)&floatValue;
    for (int i = 0; i < sizeof(float); ++i) {
        *(value + i) = bytes[i];
    }

    return floatValue;
}

void treatData(){

    float position_X_uint32 = regroupBytesToUint32(&dataRxBuffer[1]);
    float position_Y_uint32 = regroupBytesToUint32(&dataRxBuffer[5]);
    float position_angle_uint32 = regroupBytesToUint32(&dataRxBuffer[9]);

    float position_X_float = regroupBytesToFloat(&dataRxBuffer[1]);
    float position_Y_float = regroupBytesToFloat(&dataRxBuffer[5]);
    float position_angle_float = regroupBytesToFloat(&dataRxBuffer[9]);

    debugTransmit(0x10);
    dataTransmit(position_X_uint32,position_Y_uint32,position_angle_uint32);
    dataTransmit(position_X_float,position_Y_float,position_angle_float);

	if ((position_angle_uint32 == 0xffffffff ) && (stop != 0)){
		turn3Wheel(100,position_angle_float - TiikPosition.angle);
	}

	if (((position_X_uint32 == 0xffffffff) || (position_Y_uint32 == 0xfffffff)) && (stop != 0)){
		float distance = sqrt(pow(position_X_float - TiikPosition.x ,2)+pow(position_Y_float - TiikPosition.y ,2));
		float angle = atan(position_Y_float - TiikPosition.y / position_X_float - TiikPosition.x);
		angle = angle - TiikPosition.angle;
		moveForward3Wheel(300,distance,angle);
	}

	debugTransmit(0x02);

	robotState = 0x00;
	dataTxBuffer[0] = robotState;
	dataArrived = 0;

	dataTransmit(TiikPosition.x,TiikPosition.y,TiikPosition.angle);
}


// TODO ça : float speedOdd = speed*cos(angle + angleSpeed*__HAL_TIM_GetCounter(&htim2)*(10^(-6)));
/*
void moveForward4Wheel(float speed, float angle, float angleSpeed){

	float factor = 0.0;
	float maxFactor = 1.0;
	float distanceAchieve = 0.0;
	float distanceToAchieve = 100000000.0;
	float acc = 0.02;
	float rampDistance = 0.1*speed*speed;
	float deccDistance = rampDistance;


	float t0 = __HAL_TIM_GetCounter(&htim5)*pow(10,-6);
	float t1 = 0.0;
	int task = 1;

	int value = 100;
	while(value){

		distanceAchieve += speed*factor*t1;
		distanceToAchieve -= speed*factor*t1;

		//if (factor <= maxFactor) factor += acc;
		if (value >= 60) factor += acc;
		if (value <= 40) factor -= acc;
		//if (distanceAchieve == distanceToAchieve) task = 0;

		t1 = __HAL_TIM_GetCounter(&htim5)*pow(10,-6) - t0 + t1;

		float speed1 = (angleSpeed + speed*cos(angle))*factor;
		float speed2 = (angleSpeed + speed*sin(angle))*factor;
		float speed3 = (angleSpeed - speed*cos(angle))*factor;
		float speed4 = (angleSpeed - speed*sin(angle))*factor;

		updateTimerPeriod(motor1,speed1);
		updateTimerPeriod(motor2,speed2);
		updateTimerPeriod(motor3,speed3);
		updateTimerPeriod(motor4,speed4);
		value--;
		HAL_Delay(30);
	}

}
*/


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&htim5);

  initMotors();

  robotState = 0x00;
  dataTxBuffer[0] = robotState;

  initPosition(0.0,0.0,0.0);
  setPosition();
  dataArrived = 0;

  HAL_UART_Receive_IT(&huart2, dataRxBuffer, 13);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dataArrived){
		  debugTransmit(0x05);
		  treatData();
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 16-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 3000;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 16-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 3000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 16-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 3000;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 16-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 3000;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 16-1;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 4294967295;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
  {
    Error_Handler( );
  }

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	//debugTransmit(0x01);

	if (dataRxBuffer[0] == 0x01){
		dataRxBuffer[0] = 0x00;
		stop = 1;
	} else if (dataRxBuffer[0] == 0x02){
		dataRxBuffer[0] = 0x00;
		if (dataTxBuffer[0] == 0x00){
			robotState = 0x01;
			dataTxBuffer[0] = robotState;
			dataArrived = 1;
		}
	}

	dataTransmit(TiikTemporaryPosition.x,TiikTemporaryPosition.y,TiikTemporaryPosition.angle);
	/*
	HAL_UART_Transmit(&huart2, txBuffer, 13, HAL_MAX_DELAY);
	if (rxBuffer[0] == 0x00){
		HAL_UART_Transmit(&huart2, txBuffer, 13, HAL_MAX_DELAY);
		treatData();
	} else if (rxBufferData[0] == 0x01) {
		rxBuffer[0] = 0x00;
		stop = 1;
	} else if (rxBufferData[0] == 0x02){
		HAL_UART_Transmit(&huart2, txBuffer, 13, HAL_MAX_DELAY);
		rxBuffer[0] = 0x00;
		HAL_UART_Receive_IT(&huart2, rxBufferData, 13);
	}

	HAL_UART_Receive_IT(&huart2, dataRxBuffer, 13);
	*/
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
