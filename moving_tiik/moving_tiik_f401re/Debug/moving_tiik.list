
moving_tiik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008880  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08008a18  08008a18  00009a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb0  08008cb0  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008cb0  08008cb0  00009cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb8  08008cb8  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb8  08008cb8  00009cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008cbc  08008cbc  00009cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008cc0  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000070  08008d30  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08008d30  0000a5b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e762  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f43  00000000  00000000  00018802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001a748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acc  00000000  00000000  0001b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017617  00000000  00000000  0001bfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa44  00000000  00000000  000335db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099aaa  00000000  00000000  0004301f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcac9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004388  00000000  00000000  000dcb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000e0e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008a00 	.word	0x08008a00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08008a00 	.word	0x08008a00

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96a 	b.w	8000e8c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14e      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bdc:	4694      	mov	ip, r2
 8000bde:	458c      	cmp	ip, r1
 8000be0:	4686      	mov	lr, r0
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	d962      	bls.n	8000cae <__udivmoddi4+0xde>
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0320 	rsb	r3, r2, #32
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f f68c 	uxth.w	r6, ip
 8000c06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb04 f106 	mul.w	r1, r4, r6
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c26:	f080 8112 	bcs.w	8000e4e <__udivmoddi4+0x27e>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 810f 	bls.w	8000e4e <__udivmoddi4+0x27e>
 8000c30:	3c02      	subs	r4, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	fa1f f38e 	uxth.w	r3, lr
 8000c3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f606 	mul.w	r6, r0, r6
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c56:	f080 80fc 	bcs.w	8000e52 <__udivmoddi4+0x282>
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	f240 80f9 	bls.w	8000e52 <__udivmoddi4+0x282>
 8000c60:	4463      	add	r3, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	1b9b      	subs	r3, r3, r6
 8000c66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11d      	cbz	r5, 8000c76 <__udivmoddi4+0xa6>
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	2200      	movs	r2, #0
 8000c72:	e9c5 3200 	strd	r3, r2, [r5]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d905      	bls.n	8000c8a <__udivmoddi4+0xba>
 8000c7e:	b10d      	cbz	r5, 8000c84 <__udivmoddi4+0xb4>
 8000c80:	e9c5 0100 	strd	r0, r1, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4608      	mov	r0, r1
 8000c88:	e7f5      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d146      	bne.n	8000d20 <__udivmoddi4+0x150>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xcc>
 8000c96:	4290      	cmp	r0, r2
 8000c98:	f0c0 80f0 	bcc.w	8000e7c <__udivmoddi4+0x2ac>
 8000c9c:	1a86      	subs	r6, r0, r2
 8000c9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d0e6      	beq.n	8000c76 <__udivmoddi4+0xa6>
 8000ca8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cac:	e7e3      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	f040 8090 	bne.w	8000dd4 <__udivmoddi4+0x204>
 8000cb4:	eba1 040c 	sub.w	r4, r1, ip
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb08 4416 	mls	r4, r8, r6, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb07 f006 	mul.w	r0, r7, r6
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x11c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x11a>
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cea:	4626      	mov	r6, r4
 8000cec:	1a1c      	subs	r4, r3, r0
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cf6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb00 f707 	mul.w	r7, r0, r7
 8000d02:	429f      	cmp	r7, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x148>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x146>
 8000d10:	429f      	cmp	r7, r3
 8000d12:	f200 80b0 	bhi.w	8000e76 <__udivmoddi4+0x2a6>
 8000d16:	4620      	mov	r0, r4
 8000d18:	1bdb      	subs	r3, r3, r7
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0x9c>
 8000d20:	f1c1 0620 	rsb	r6, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d30:	fa04 f301 	lsl.w	r3, r4, r1
 8000d34:	ea43 030c 	orr.w	r3, r3, ip
 8000d38:	40f4      	lsrs	r4, r6
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	0c38      	lsrs	r0, r7, #16
 8000d40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d44:	fbb4 fef0 	udiv	lr, r4, r0
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d54:	fb0e f90c 	mul.w	r9, lr, ip
 8000d58:	45a1      	cmp	r9, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x1a6>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d66:	f080 8084 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000d6a:	45a1      	cmp	r9, r4
 8000d6c:	f240 8081 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000d70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	eba4 0409 	sub.w	r4, r4, r9
 8000d7a:	fa1f f983 	uxth.w	r9, r3
 8000d7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d82:	fb00 4413 	mls	r4, r0, r3, r4
 8000d86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x1d2>
 8000d92:	193c      	adds	r4, r7, r4
 8000d94:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d98:	d267      	bcs.n	8000e6a <__udivmoddi4+0x29a>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d965      	bls.n	8000e6a <__udivmoddi4+0x29a>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000da6:	fba0 9302 	umull	r9, r3, r0, r2
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	429c      	cmp	r4, r3
 8000db0:	46ce      	mov	lr, r9
 8000db2:	469c      	mov	ip, r3
 8000db4:	d351      	bcc.n	8000e5a <__udivmoddi4+0x28a>
 8000db6:	d04e      	beq.n	8000e56 <__udivmoddi4+0x286>
 8000db8:	b155      	cbz	r5, 8000dd0 <__udivmoddi4+0x200>
 8000dba:	ebb8 030e 	subs.w	r3, r8, lr
 8000dbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e750      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000dd4:	f1c2 0320 	rsb	r3, r2, #32
 8000dd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa24 f303 	lsr.w	r3, r4, r3
 8000de4:	4094      	lsls	r4, r2
 8000de6:	430c      	orrs	r4, r1
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df0:	fa1f f78c 	uxth.w	r7, ip
 8000df4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dfc:	0c23      	lsrs	r3, r4, #16
 8000dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e02:	fb00 f107 	mul.w	r1, r0, r7
 8000e06:	4299      	cmp	r1, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x24c>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e12:	d22c      	bcs.n	8000e6e <__udivmoddi4+0x29e>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d92a      	bls.n	8000e6e <__udivmoddi4+0x29e>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e24:	fb08 3311 	mls	r3, r8, r1, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb01 f307 	mul.w	r3, r1, r7
 8000e30:	42a3      	cmp	r3, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x276>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e3c:	d213      	bcs.n	8000e66 <__udivmoddi4+0x296>
 8000e3e:	42a3      	cmp	r3, r4
 8000e40:	d911      	bls.n	8000e66 <__udivmoddi4+0x296>
 8000e42:	3902      	subs	r1, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	1ae4      	subs	r4, r4, r3
 8000e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e4c:	e739      	b.n	8000cc2 <__udivmoddi4+0xf2>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	e6f0      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e706      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e56:	45c8      	cmp	r8, r9
 8000e58:	d2ae      	bcs.n	8000db8 <__udivmoddi4+0x1e8>
 8000e5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e62:	3801      	subs	r0, #1
 8000e64:	e7a8      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e66:	4631      	mov	r1, r6
 8000e68:	e7ed      	b.n	8000e46 <__udivmoddi4+0x276>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	e799      	b.n	8000da2 <__udivmoddi4+0x1d2>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e7d4      	b.n	8000e1c <__udivmoddi4+0x24c>
 8000e72:	46d6      	mov	lr, sl
 8000e74:	e77f      	b.n	8000d76 <__udivmoddi4+0x1a6>
 8000e76:	4463      	add	r3, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e74d      	b.n	8000d18 <__udivmoddi4+0x148>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	4623      	mov	r3, r4
 8000e80:	4608      	mov	r0, r1
 8000e82:	e70f      	b.n	8000ca4 <__udivmoddi4+0xd4>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	e730      	b.n	8000cec <__udivmoddi4+0x11c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <initMotors>:
// WARNING :
// motorN c'est moteur avec condo C3
// motorS0 c'est moteur avec condo C4
// motorSE c'est moteur avec condo C2

void initMotors(){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

	motorN.timer = htim3;
 8000e94:	4a27      	ldr	r2, [pc, #156]	@ (8000f34 <initMotors+0xa4>)
 8000e96:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <initMotors+0xa8>)
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2348      	movs	r3, #72	@ 0x48
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f005 fbb4 	bl	800660c <memcpy>
	motorN.dirPin = GPIO_PIN_3;
 8000ea4:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <initMotors+0xa4>)
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motorN.dirGPIO = GPIOB;
 8000eac:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <initMotors+0xa4>)
 8000eae:	4a23      	ldr	r2, [pc, #140]	@ (8000f3c <initMotors+0xac>)
 8000eb0:	64da      	str	r2, [r3, #76]	@ 0x4c
	motorN.currentSpeed = 0;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <initMotors+0xa4>)
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	651a      	str	r2, [r3, #80]	@ 0x50

	motorSO.timer = htim1;
 8000eba:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <initMotors+0xb0>)
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <initMotors+0xb4>)
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2348      	movs	r3, #72	@ 0x48
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f005 fba1 	bl	800660c <memcpy>
	motorSO.dirPin = GPIO_PIN_10;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <initMotors+0xb0>)
 8000ecc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ed0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motorSO.dirGPIO = GPIOA;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <initMotors+0xb0>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <initMotors+0xb8>)
 8000ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
	motorSO.currentSpeed = 0;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <initMotors+0xb0>)
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	651a      	str	r2, [r3, #80]	@ 0x50

	motorSE.timer = htim4;
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f4c <initMotors+0xbc>)
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <initMotors+0xc0>)
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2348      	movs	r3, #72	@ 0x48
 8000eec:	461a      	mov	r2, r3
 8000eee:	f005 fb8d 	bl	800660c <memcpy>
	motorSE.dirPin = GPIO_PIN_5;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <initMotors+0xbc>)
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motorSE.dirGPIO = GPIOB;
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <initMotors+0xbc>)
 8000efc:	4a0f      	ldr	r2, [pc, #60]	@ (8000f3c <initMotors+0xac>)
 8000efe:	64da      	str	r2, [r3, #76]	@ 0x4c
	motorSE.currentSpeed = 0;
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <initMotors+0xbc>)
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	651a      	str	r2, [r3, #80]	@ 0x50

	motorX.timer = htim2;
 8000f08:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <initMotors+0xc4>)
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <initMotors+0xc8>)
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	2348      	movs	r3, #72	@ 0x48
 8000f12:	461a      	mov	r2, r3
 8000f14:	f005 fb7a 	bl	800660c <memcpy>
	motorX.dirPin = GPIO_PIN_4;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <initMotors+0xc4>)
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motorX.dirGPIO = GPIOB;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <initMotors+0xc4>)
 8000f22:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <initMotors+0xac>)
 8000f24:	64da      	str	r2, [r3, #76]	@ 0x4c
	motorX.currentSpeed = 0;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <initMotors+0xc4>)
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	651a      	str	r2, [r3, #80]	@ 0x50

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000304 	.word	0x20000304
 8000f38:	20000164 	.word	0x20000164
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	200003ac 	.word	0x200003ac
 8000f44:	200000d4 	.word	0x200000d4
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	20000358 	.word	0x20000358
 8000f50:	200001ac 	.word	0x200001ac
 8000f54:	20000400 	.word	0x20000400
 8000f58:	2000011c 	.word	0x2000011c

08000f5c <floatToBytes>:
	debugTxBuffer[1] = data;
	HAL_UART_Transmit(&huart2, debugTxBuffer, 2, HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, dataRxBuffer, 13);
}

void floatToBytes(float value, unsigned char *bytes) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f66:	6038      	str	r0, [r7, #0]
    unsigned char *ptr = (unsigned char *)&value;
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < sizeof(float); ++i) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	e00a      	b.n	8000f88 <floatToBytes+0x2c>
        bytes[i] = ptr[i];
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	441a      	add	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	440b      	add	r3, r1
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(float); ++i) {
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d9f1      	bls.n	8000f72 <floatToBytes+0x16>
    }
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <dataTransmit>:

void dataTransmit(float position_X,float position_Y,float position_angle){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fa6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000faa:	ed87 1a01 	vstr	s2, [r7, #4]
	floatToBytes(position_X,&dataTxBuffer[3]);
 8000fae:	480f      	ldr	r0, [pc, #60]	@ (8000fec <dataTransmit+0x50>)
 8000fb0:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fb4:	f7ff ffd2 	bl	8000f5c <floatToBytes>
	floatToBytes(position_Y,&dataTxBuffer[7]);
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <dataTransmit+0x54>)
 8000fba:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fbe:	f7ff ffcd 	bl	8000f5c <floatToBytes>
	floatToBytes(position_angle,&dataTxBuffer[11]);
 8000fc2:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <dataTransmit+0x58>)
 8000fc4:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fc8:	f7ff ffc8 	bl	8000f5c <floatToBytes>

	HAL_UART_Transmit(&huart2, dataTxBuffer, 15, HAL_MAX_DELAY);
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	4909      	ldr	r1, [pc, #36]	@ (8000ff8 <dataTransmit+0x5c>)
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <dataTransmit+0x60>)
 8000fd6:	f004 fae1 	bl	800559c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, dataRxBuffer, 13);
 8000fda:	220d      	movs	r2, #13
 8000fdc:	4908      	ldr	r1, [pc, #32]	@ (8001000 <dataTransmit+0x64>)
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <dataTransmit+0x60>)
 8000fe0:	f004 fb67 	bl	80056b2 <HAL_UART_Receive_IT>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200002e7 	.word	0x200002e7
 8000ff0:	200002eb 	.word	0x200002eb
 8000ff4:	200002ef 	.word	0x200002ef
 8000ff8:	200002e4 	.word	0x200002e4
 8000ffc:	2000023c 	.word	0x2000023c
 8001000:	200002f4 	.word	0x200002f4

08001004 <setPosition>:


void setPosition(){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
	float position_X = TiikPosition.x;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <setPosition+0x40>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]
	float position_Y = TiikPosition.y;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <setPosition+0x40>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	60bb      	str	r3, [r7, #8]
	float position_angle = TiikPosition.angle;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <setPosition+0x40>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	607b      	str	r3, [r7, #4]

	floatToBytes(position_X,&dataTxBuffer[3]);
 800101c:	480a      	ldr	r0, [pc, #40]	@ (8001048 <setPosition+0x44>)
 800101e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001022:	f7ff ff9b 	bl	8000f5c <floatToBytes>
	floatToBytes(position_Y,&dataTxBuffer[7]);
 8001026:	4809      	ldr	r0, [pc, #36]	@ (800104c <setPosition+0x48>)
 8001028:	ed97 0a02 	vldr	s0, [r7, #8]
 800102c:	f7ff ff96 	bl	8000f5c <floatToBytes>
	floatToBytes(position_angle,&dataTxBuffer[11]);
 8001030:	4807      	ldr	r0, [pc, #28]	@ (8001050 <setPosition+0x4c>)
 8001032:	ed97 0a01 	vldr	s0, [r7, #4]
 8001036:	f7ff ff91 	bl	8000f5c <floatToBytes>

}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000458 	.word	0x20000458
 8001048:	200002e7 	.word	0x200002e7
 800104c:	200002eb 	.word	0x200002eb
 8001050:	200002ef 	.word	0x200002ef

08001054 <calculPosition>:

void calculPosition(float distance, float cosTheta,float sinTheta){
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	ed87 0a03 	vstr	s0, [r7, #12]
 800105e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001062:	ed87 1a01 	vstr	s2, [r7, #4]
	float position_X = distance*cosTheta + TiikPosition.x;
 8001066:	ed97 7a03 	vldr	s14, [r7, #12]
 800106a:	edd7 7a02 	vldr	s15, [r7, #8]
 800106e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <calculPosition+0x6c>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107c:	edc7 7a07 	vstr	s15, [r7, #28]
	float position_Y = distance*sinTheta + TiikPosition.y;
 8001080:	ed97 7a03 	vldr	s14, [r7, #12]
 8001084:	edd7 7a01 	vldr	s15, [r7, #4]
 8001088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <calculPosition+0x6c>)
 800108e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001096:	edc7 7a06 	vstr	s15, [r7, #24]
	float position_angle = TiikPosition.angle;
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <calculPosition+0x6c>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	617b      	str	r3, [r7, #20]

	TiikTemporaryPosition.x = position_X;
 80010a0:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <calculPosition+0x70>)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	6013      	str	r3, [r2, #0]
	TiikTemporaryPosition.y = position_Y;
 80010a6:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <calculPosition+0x70>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6053      	str	r3, [r2, #4]
	TiikTemporaryPosition.angle = position_angle;
 80010ac:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <calculPosition+0x70>)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	6093      	str	r3, [r2, #8]

}
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000458 	.word	0x20000458
 80010c4:	20000468 	.word	0x20000468

080010c8 <calculPosition2>:

void calculPosition2(float angle,float way){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80010d2:	edc7 0a00 	vstr	s1, [r7]
	float robotRadius = 140;
 80010d6:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <calculPosition2+0xa0>)
 80010d8:	61bb      	str	r3, [r7, #24]
	float wheelRadius = 58/2;
 80010da:	4b24      	ldr	r3, [pc, #144]	@ (800116c <calculPosition2+0xa4>)
 80010dc:	617b      	str	r3, [r7, #20]
	float position_X = TiikPosition.x;
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <calculPosition2+0xa8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
	float position_Y = TiikPosition.y;
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <calculPosition2+0xa8>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	60fb      	str	r3, [r7, #12]
	float tiikAngle = TiikPosition.angle + angle*way*wheelRadius/robotRadius;
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <calculPosition2+0xa8>)
 80010ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80010f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001100:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001104:	edd7 6a06 	vldr	s13, [r7, #24]
 8001108:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	edc7 7a07 	vstr	s15, [r7, #28]
	if (tiikAngle < 0){
 8001114:	edd7 7a07 	vldr	s15, [r7, #28]
 8001118:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	d50f      	bpl.n	8001142 <calculPosition2+0x7a>
		tiikAngle += 2*M_PI;
 8001122:	69f8      	ldr	r0, [r7, #28]
 8001124:	f7ff f9bc 	bl	80004a0 <__aeabi_f2d>
 8001128:	a30d      	add	r3, pc, #52	@ (adr r3, 8001160 <calculPosition2+0x98>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff f859 	bl	80001e4 <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fce1 	bl	8000b00 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	61fb      	str	r3, [r7, #28]
	}
	float position_angle = tiikAngle;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	60bb      	str	r3, [r7, #8]

	TiikTemporaryPosition.x = position_X;
 8001146:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <calculPosition2+0xac>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	6013      	str	r3, [r2, #0]
	TiikTemporaryPosition.y = position_Y;
 800114c:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <calculPosition2+0xac>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6053      	str	r3, [r2, #4]
	TiikTemporaryPosition.angle = position_angle;
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <calculPosition2+0xac>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	6093      	str	r3, [r2, #8]
}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	54442d18 	.word	0x54442d18
 8001164:	401921fb 	.word	0x401921fb
 8001168:	430c0000 	.word	0x430c0000
 800116c:	41e80000 	.word	0x41e80000
 8001170:	20000458 	.word	0x20000458
 8001174:	20000468 	.word	0x20000468

08001178 <updateTimerPeriod>:

void updateTimerPeriod(Motor motor, float speed){
 8001178:	b084      	sub	sp, #16
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	f107 0c18 	add.w	ip, r7, #24
 8001184:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001188:	ed87 0a01 	vstr	s0, [r7, #4]
	float internalFrequency = 16000000;
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <updateTimerPeriod+0xbc>)
 800118e:	60fb      	str	r3, [r7, #12]
	motor.currentSpeed = speed;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	66bb      	str	r3, [r7, #104]	@ 0x68
	if (speed > 0){
 8001194:	edd7 7a01 	vldr	s15, [r7, #4]
 8001198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	dd18      	ble.n	80011d4 <updateTimerPeriod+0x5c>
		HAL_GPIO_WritePin(motor.dirGPIO, motor.dirPin, GPIO_PIN_SET);
 80011a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011a4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 80011a8:	2201      	movs	r2, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fd62 	bl	8003c74 <HAL_GPIO_WritePin>
		motor.timer.Instance->ARR = (uint16_t) (internalFrequency/(speed*16));
 80011b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b4:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80011b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011bc:	edd7 6a03 	vldr	s13, [r7, #12]
 80011c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c8:	ee17 3a90 	vmov	r3, s15
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011d2:	e024      	b.n	800121e <updateTimerPeriod+0xa6>
	} else if (speed < 0) {
 80011d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e0:	d51a      	bpl.n	8001218 <updateTimerPeriod+0xa0>
		HAL_GPIO_WritePin(motor.dirGPIO, motor.dirPin, GPIO_PIN_RESET);
 80011e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011e4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 80011e8:	2200      	movs	r2, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fd42 	bl	8003c74 <HAL_GPIO_WritePin>
		motor.timer.Instance->ARR = (uint16_t) -(internalFrequency/(speed*16));
 80011f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f4:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80011f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001204:	eef1 7a67 	vneg.f32	s15, s15
 8001208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800120c:	ee17 3a90 	vmov	r3, s15
 8001210:	b29a      	uxth	r2, r3
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001216:	e002      	b.n	800121e <updateTimerPeriod+0xa6>
	} else {
		motor.timer.Instance->ARR = 0;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2200      	movs	r2, #0
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	motor.timer.Instance->CNT = 0;
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800122e:	b004      	add	sp, #16
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	4b742400 	.word	0x4b742400

08001238 <turn3Wheel>:

void turn3Wheel(float speed,float angle){
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	ed2d 8b02 	vpush	{d8}
 800123e:	b0a8      	sub	sp, #160	@ 0xa0
 8001240:	af12      	add	r7, sp, #72	@ 0x48
 8001242:	ed87 0a01 	vstr	s0, [r7, #4]
 8001246:	edc7 0a00 	vstr	s1, [r7]

	float stepByTurn = 3200;
 800124a:	4b95      	ldr	r3, [pc, #596]	@ (80014a0 <turn3Wheel+0x268>)
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
	float robotRadius = 140;
 800124e:	4b95      	ldr	r3, [pc, #596]	@ (80014a4 <turn3Wheel+0x26c>)
 8001250:	633b      	str	r3, [r7, #48]	@ 0x30
	float wheelRadius = 58/2;
 8001252:	4b95      	ldr	r3, [pc, #596]	@ (80014a8 <turn3Wheel+0x270>)
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c

	float stepToRadians = stepByTurn/(2*M_PI);
 8001256:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001258:	f7ff f922 	bl	80004a0 <__aeabi_f2d>
 800125c:	a38a      	add	r3, pc, #552	@ (adr r3, 8001488 <turn3Wheel+0x250>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff fa9f 	bl	80007a4 <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fc47 	bl	8000b00 <__aeabi_d2f>
 8001272:	4603      	mov	r3, r0
 8001274:	62bb      	str	r3, [r7, #40]	@ 0x28
	float way;

	TiikTemporaryPosition.x = TiikPosition.x;
 8001276:	4b8d      	ldr	r3, [pc, #564]	@ (80014ac <turn3Wheel+0x274>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a8d      	ldr	r2, [pc, #564]	@ (80014b0 <turn3Wheel+0x278>)
 800127c:	6013      	str	r3, [r2, #0]
	TiikTemporaryPosition.y = TiikPosition.y;
 800127e:	4b8b      	ldr	r3, [pc, #556]	@ (80014ac <turn3Wheel+0x274>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a8b      	ldr	r2, [pc, #556]	@ (80014b0 <turn3Wheel+0x278>)
 8001284:	6053      	str	r3, [r2, #4]
	TiikTemporaryPosition.angle = TiikPosition.angle;
 8001286:	4b89      	ldr	r3, [pc, #548]	@ (80014ac <turn3Wheel+0x274>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4a89      	ldr	r2, [pc, #548]	@ (80014b0 <turn3Wheel+0x278>)
 800128c:	6093      	str	r3, [r2, #8]

	float angleTiik = angle;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	653b      	str	r3, [r7, #80]	@ 0x50

	if (angle < 0){
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	d510      	bpl.n	80012c2 <turn3Wheel+0x8a>
		angleTiik = angle + 2*M_PI;
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	f7ff f8fd 	bl	80004a0 <__aeabi_f2d>
 80012a6:	a378      	add	r3, pc, #480	@ (adr r3, 8001488 <turn3Wheel+0x250>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7fe ff9a 	bl	80001e4 <__adddf3>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc22 	bl	8000b00 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	653b      	str	r3, [r7, #80]	@ 0x50
 80012c0:	e001      	b.n	80012c6 <turn3Wheel+0x8e>
	} else {
		angleTiik = angle;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	653b      	str	r3, [r7, #80]	@ 0x50
	}

	if (angleTiik > M_PI){
 80012c6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80012c8:	f7ff f8ea 	bl	80004a0 <__aeabi_f2d>
 80012cc:	a370      	add	r3, pc, #448	@ (adr r3, 8001490 <turn3Wheel+0x258>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff fbcd 	bl	8000a70 <__aeabi_dcmpgt>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d014      	beq.n	8001306 <turn3Wheel+0xce>
		angleTiik = 2*M_PI - angleTiik;
 80012dc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80012de:	f7ff f8df 	bl	80004a0 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	a168      	add	r1, pc, #416	@ (adr r1, 8001488 <turn3Wheel+0x250>)
 80012e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ec:	f7fe ff78 	bl	80001e0 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc02 	bl	8000b00 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	653b      	str	r3, [r7, #80]	@ 0x50
		way = -1;
 8001300:	4b6c      	ldr	r3, [pc, #432]	@ (80014b4 <turn3Wheel+0x27c>)
 8001302:	657b      	str	r3, [r7, #84]	@ 0x54
 8001304:	e002      	b.n	800130c <turn3Wheel+0xd4>
	} else {
		angleTiik = angleTiik;
		way = 1;
 8001306:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800130a:	657b      	str	r3, [r7, #84]	@ 0x54
	}

	angleTiik = angleTiik*robotRadius/wheelRadius;
 800130c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001310:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001314:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001318:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800131c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001320:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	float speedTiik = 0.5;
 8001324:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001328:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float minSpeed = 0.5;
 800132a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24

	float radianAchieve = 0.0;
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	64bb      	str	r3, [r7, #72]	@ 0x48
	float radianToAchieve = angleTiik;
 8001336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001338:	623b      	str	r3, [r7, #32]

	int task = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	647b      	str	r3, [r7, #68]	@ 0x44

	float rampRadian = 0.5;
 800133e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001342:	643b      	str	r3, [r7, #64]	@ 0x40

	if (radianToAchieve < 2*rampRadian){
 8001344:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001348:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800134c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d507      	bpl.n	800136a <turn3Wheel+0x132>
		rampRadian = radianToAchieve/2;
 800135a:	ed97 7a08 	vldr	s14, [r7, #32]
 800135e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001366:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	}

	float deltaT = 30;
 800136a:	4b53      	ldr	r3, [pc, #332]	@ (80014b8 <turn3Wheel+0x280>)
 800136c:	61fb      	str	r3, [r7, #28]

	float deltaTn = 0.0;
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
	float tn = 0.0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
	float tn_1 = 0.0;
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float t0 = __HAL_TIM_GetCounter(&htim5)*pow(10,-6);
 8001380:	4b4e      	ldr	r3, [pc, #312]	@ (80014bc <turn3Wheel+0x284>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f868 	bl	800045c <__aeabi_ui2d>
 800138c:	a342      	add	r3, pc, #264	@ (adr r3, 8001498 <turn3Wheel+0x260>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff f8dd 	bl	8000550 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fbaf 	bl	8000b00 <__aeabi_d2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	613b      	str	r3, [r7, #16]

	float urgencyRamp = 0.25;
 80013a6:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 80013aa:	60fb      	str	r3, [r7, #12]
	float urgencyRadian  = 0;
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	maxSpeed = speed;
 80013b2:	4a43      	ldr	r2, [pc, #268]	@ (80014c0 <turn3Wheel+0x288>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6013      	str	r3, [r2, #0]

	while(task){
 80013b8:	e13c      	b.n	8001634 <turn3Wheel+0x3fc>

		if (stop){
 80013ba:	4b42      	ldr	r3, [pc, #264]	@ (80014c4 <turn3Wheel+0x28c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <turn3Wheel+0x1b8>
			speedTiik = maxSpeed  - ((maxSpeed - minSpeed)*urgencyRadian/urgencyRamp);
 80013c2:	4b3f      	ldr	r3, [pc, #252]	@ (80014c0 <turn3Wheel+0x288>)
 80013c4:	ed93 7a00 	vldr	s14, [r3]
 80013c8:	4b3d      	ldr	r3, [pc, #244]	@ (80014c0 <turn3Wheel+0x288>)
 80013ca:	edd3 6a00 	vldr	s13, [r3]
 80013ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013da:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80013de:	edd7 6a03 	vldr	s13, [r7, #12]
 80013e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ea:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 80013ee:	e06e      	b.n	80014ce <turn3Wheel+0x296>
		} else if (radianAchieve < rampRadian) {
 80013f0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80013f4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	d515      	bpl.n	800142e <turn3Wheel+0x1f6>
		    speedTiik = ((maxSpeed - minSpeed)*radianAchieve/rampRadian) + minSpeed;
 8001402:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <turn3Wheel+0x288>)
 8001404:	ed93 7a00 	vldr	s14, [r3]
 8001408:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800140c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001410:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001414:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001418:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800141c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001420:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001428:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 800142c:	e04f      	b.n	80014ce <turn3Wheel+0x296>
		} else if (radianToAchieve - radianAchieve < rampRadian){
 800142e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001432:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800143e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	dd3f      	ble.n	80014c8 <turn3Wheel+0x290>
			speedTiik = maxSpeed - ((maxSpeed-minSpeed)*(radianAchieve-radianToAchieve + rampRadian)/rampRadian);
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <turn3Wheel+0x288>)
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <turn3Wheel+0x288>)
 8001450:	edd3 6a00 	vldr	s13, [r3]
 8001454:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001458:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800145c:	ed97 6a12 	vldr	s12, [r7, #72]	@ 0x48
 8001460:	edd7 7a08 	vldr	s15, [r7, #32]
 8001464:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001468:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800146c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001470:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001474:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001478:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800147c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001480:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8001484:	e023      	b.n	80014ce <turn3Wheel+0x296>
 8001486:	bf00      	nop
 8001488:	54442d18 	.word	0x54442d18
 800148c:	401921fb 	.word	0x401921fb
 8001490:	54442d18 	.word	0x54442d18
 8001494:	400921fb 	.word	0x400921fb
 8001498:	a0b5ed8d 	.word	0xa0b5ed8d
 800149c:	3eb0c6f7 	.word	0x3eb0c6f7
 80014a0:	45480000 	.word	0x45480000
 80014a4:	430c0000 	.word	0x430c0000
 80014a8:	41e80000 	.word	0x41e80000
 80014ac:	20000458 	.word	0x20000458
 80014b0:	20000468 	.word	0x20000468
 80014b4:	bf800000 	.word	0xbf800000
 80014b8:	41f00000 	.word	0x41f00000
 80014bc:	200001f4 	.word	0x200001f4
 80014c0:	20000454 	.word	0x20000454
 80014c4:	20000479 	.word	0x20000479
		} else {
			speedTiik = maxSpeed;
 80014c8:	4b85      	ldr	r3, [pc, #532]	@ (80016e0 <turn3Wheel+0x4a8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}

		updateTimerPeriod(motorN,way*speedTiik*stepToRadians);
 80014ce:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80014d2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80014d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014da:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80014de:	ee27 8a27 	vmul.f32	s16, s14, s15
 80014e2:	4c80      	ldr	r4, [pc, #512]	@ (80016e4 <turn3Wheel+0x4ac>)
 80014e4:	4668      	mov	r0, sp
 80014e6:	f104 0310 	add.w	r3, r4, #16
 80014ea:	2244      	movs	r2, #68	@ 0x44
 80014ec:	4619      	mov	r1, r3
 80014ee:	f005 f88d 	bl	800660c <memcpy>
 80014f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014f6:	eeb0 0a48 	vmov.f32	s0, s16
 80014fa:	f7ff fe3d 	bl	8001178 <updateTimerPeriod>
		updateTimerPeriod(motorSE,way*speedTiik*stepToRadians);
 80014fe:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001502:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800150e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001512:	4c75      	ldr	r4, [pc, #468]	@ (80016e8 <turn3Wheel+0x4b0>)
 8001514:	4668      	mov	r0, sp
 8001516:	f104 0310 	add.w	r3, r4, #16
 800151a:	2244      	movs	r2, #68	@ 0x44
 800151c:	4619      	mov	r1, r3
 800151e:	f005 f875 	bl	800660c <memcpy>
 8001522:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001526:	eeb0 0a48 	vmov.f32	s0, s16
 800152a:	f7ff fe25 	bl	8001178 <updateTimerPeriod>
		updateTimerPeriod(motorSO,way*speedTiik*stepToRadians);
 800152e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001532:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800153a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800153e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001542:	4c6a      	ldr	r4, [pc, #424]	@ (80016ec <turn3Wheel+0x4b4>)
 8001544:	4668      	mov	r0, sp
 8001546:	f104 0310 	add.w	r3, r4, #16
 800154a:	2244      	movs	r2, #68	@ 0x44
 800154c:	4619      	mov	r1, r3
 800154e:	f005 f85d 	bl	800660c <memcpy>
 8001552:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001556:	eeb0 0a48 	vmov.f32	s0, s16
 800155a:	f7ff fe0d 	bl	8001178 <updateTimerPeriod>

		tn = (__HAL_TIM_GetCounter(&htim5)*pow(10,-6) - t0);
 800155e:	4b64      	ldr	r3, [pc, #400]	@ (80016f0 <turn3Wheel+0x4b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ff79 	bl	800045c <__aeabi_ui2d>
 800156a:	a35b      	add	r3, pc, #364	@ (adr r3, 80016d8 <turn3Wheel+0x4a0>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7fe ffee 	bl	8000550 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4614      	mov	r4, r2
 800157a:	461d      	mov	r5, r3
 800157c:	6938      	ldr	r0, [r7, #16]
 800157e:	f7fe ff8f 	bl	80004a0 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4620      	mov	r0, r4
 8001588:	4629      	mov	r1, r5
 800158a:	f7fe fe29 	bl	80001e0 <__aeabi_dsub>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fab3 	bl	8000b00 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	617b      	str	r3, [r7, #20]
		deltaTn = tn - tn_1;
 800159e:	ed97 7a05 	vldr	s14, [r7, #20]
 80015a2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	edc7 7a06 	vstr	s15, [r7, #24]
		tn_1 = tn;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		radianAchieve += speedTiik * deltaTn;
 80015b2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80015b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015be:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80015c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

		if (radianAchieve > radianToAchieve || urgencyRadian > urgencyRamp){
 80015ca:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80015ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80015d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	dc08      	bgt.n	80015ee <turn3Wheel+0x3b6>
 80015dc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80015e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd01      	ble.n	80015f2 <turn3Wheel+0x3ba>
			task = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		calculPosition2(radianAchieve,way);
 80015f2:	edd7 0a15 	vldr	s1, [r7, #84]	@ 0x54
 80015f6:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 80015fa:	f7ff fd65 	bl	80010c8 <calculPosition2>

		if (stop){
 80015fe:	4b3d      	ldr	r3, [pc, #244]	@ (80016f4 <turn3Wheel+0x4bc>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <turn3Wheel+0x3e6>
			urgencyRadian += speedTiik * deltaTn;
 8001606:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800160a:	edd7 7a06 	vldr	s15, [r7, #24]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		}


		if (task) HAL_Delay(deltaT);
 800161e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <turn3Wheel+0x3fc>
 8001624:	edd7 7a07 	vldr	s15, [r7, #28]
 8001628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800162c:	ee17 0a90 	vmov	r0, s15
 8001630:	f001 fc12 	bl	8002e58 <HAL_Delay>
	while(task){
 8001634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001636:	2b00      	cmp	r3, #0
 8001638:	f47f aebf 	bne.w	80013ba <turn3Wheel+0x182>
	}

	updateTimerPeriod(motorN,0);
 800163c:	4c29      	ldr	r4, [pc, #164]	@ (80016e4 <turn3Wheel+0x4ac>)
 800163e:	4668      	mov	r0, sp
 8001640:	f104 0310 	add.w	r3, r4, #16
 8001644:	2244      	movs	r2, #68	@ 0x44
 8001646:	4619      	mov	r1, r3
 8001648:	f004 ffe0 	bl	800660c <memcpy>
 800164c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001650:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80016f8 <turn3Wheel+0x4c0>
 8001654:	f7ff fd90 	bl	8001178 <updateTimerPeriod>
	updateTimerPeriod(motorSE,0);
 8001658:	4c23      	ldr	r4, [pc, #140]	@ (80016e8 <turn3Wheel+0x4b0>)
 800165a:	4668      	mov	r0, sp
 800165c:	f104 0310 	add.w	r3, r4, #16
 8001660:	2244      	movs	r2, #68	@ 0x44
 8001662:	4619      	mov	r1, r3
 8001664:	f004 ffd2 	bl	800660c <memcpy>
 8001668:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800166c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80016f8 <turn3Wheel+0x4c0>
 8001670:	f7ff fd82 	bl	8001178 <updateTimerPeriod>
	updateTimerPeriod(motorSO,0);
 8001674:	4c1d      	ldr	r4, [pc, #116]	@ (80016ec <turn3Wheel+0x4b4>)
 8001676:	4668      	mov	r0, sp
 8001678:	f104 0310 	add.w	r3, r4, #16
 800167c:	2244      	movs	r2, #68	@ 0x44
 800167e:	4619      	mov	r1, r3
 8001680:	f004 ffc4 	bl	800660c <memcpy>
 8001684:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001688:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 80016f8 <turn3Wheel+0x4c0>
 800168c:	f7ff fd74 	bl	8001178 <updateTimerPeriod>

	dataTransmit(radianAchieve,radianAchieve,radianAchieve);
 8001690:	ed97 1a12 	vldr	s2, [r7, #72]	@ 0x48
 8001694:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8001698:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 800169c:	f7ff fc7e 	bl	8000f9c <dataTransmit>

	TiikPosition.x = TiikTemporaryPosition.x;
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <turn3Wheel+0x4c4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a16      	ldr	r2, [pc, #88]	@ (8001700 <turn3Wheel+0x4c8>)
 80016a6:	6013      	str	r3, [r2, #0]
	TiikPosition.y = TiikTemporaryPosition.y;
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <turn3Wheel+0x4c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <turn3Wheel+0x4c8>)
 80016ae:	6053      	str	r3, [r2, #4]
	TiikPosition.angle = TiikTemporaryPosition.angle;
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <turn3Wheel+0x4c4>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <turn3Wheel+0x4c8>)
 80016b6:	6093      	str	r3, [r2, #8]


	HAL_Delay(deltaT);
 80016b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c0:	ee17 0a90 	vmov	r0, s15
 80016c4:	f001 fbc8 	bl	8002e58 <HAL_Delay>

}
 80016c8:	bf00      	nop
 80016ca:	3758      	adds	r7, #88	@ 0x58
 80016cc:	46bd      	mov	sp, r7
 80016ce:	ecbd 8b02 	vpop	{d8}
 80016d2:	bdb0      	pop	{r4, r5, r7, pc}
 80016d4:	f3af 8000 	nop.w
 80016d8:	a0b5ed8d 	.word	0xa0b5ed8d
 80016dc:	3eb0c6f7 	.word	0x3eb0c6f7
 80016e0:	20000454 	.word	0x20000454
 80016e4:	20000304 	.word	0x20000304
 80016e8:	20000358 	.word	0x20000358
 80016ec:	200003ac 	.word	0x200003ac
 80016f0:	200001f4 	.word	0x200001f4
 80016f4:	20000479 	.word	0x20000479
 80016f8:	00000000 	.word	0x00000000
 80016fc:	20000468 	.word	0x20000468
 8001700:	20000458 	.word	0x20000458
 8001704:	00000000 	.word	0x00000000

08001708 <moveForward3Wheel>:

void moveForward3Wheel(float speed, float distance, float angle){
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	ed2d 8b02 	vpush	{d8}
 800170e:	b0ac      	sub	sp, #176	@ 0xb0
 8001710:	af12      	add	r7, sp, #72	@ 0x48
 8001712:	ed87 0a03 	vstr	s0, [r7, #12]
 8001716:	edc7 0a02 	vstr	s1, [r7, #8]
 800171a:	ed87 1a01 	vstr	s2, [r7, #4]

	float stepByTurn = 3200;
 800171e:	4b84      	ldr	r3, [pc, #528]	@ (8001930 <moveForward3Wheel+0x228>)
 8001720:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float wheelDiameter = 58;
 8001722:	4b84      	ldr	r3, [pc, #528]	@ (8001934 <moveForward3Wheel+0x22c>)
 8001724:	64bb      	str	r3, [r7, #72]	@ 0x48
	float stepToDistance = stepByTurn/(M_PI*wheelDiameter);
 8001726:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001728:	f7fe feba 	bl	80004a0 <__aeabi_f2d>
 800172c:	4604      	mov	r4, r0
 800172e:	460d      	mov	r5, r1
 8001730:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001732:	f7fe feb5 	bl	80004a0 <__aeabi_f2d>
 8001736:	a378      	add	r3, pc, #480	@ (adr r3, 8001918 <moveForward3Wheel+0x210>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe ff08 	bl	8000550 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4620      	mov	r0, r4
 8001746:	4629      	mov	r1, r5
 8001748:	f7ff f82c 	bl	80007a4 <__aeabi_ddiv>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f7ff f9d4 	bl	8000b00 <__aeabi_d2f>
 8001758:	4603      	mov	r3, r0
 800175a:	647b      	str	r3, [r7, #68]	@ 0x44

	float speedTiik = 10;
 800175c:	4b76      	ldr	r3, [pc, #472]	@ (8001938 <moveForward3Wheel+0x230>)
 800175e:	667b      	str	r3, [r7, #100]	@ 0x64

	float distanceAchieve = 0.0;
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	663b      	str	r3, [r7, #96]	@ 0x60
	float distanceToAchieve = distance;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	643b      	str	r3, [r7, #64]	@ 0x40

	int task = 1;
 800176a:	2301      	movs	r3, #1
 800176c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	float rampDistance = 300;
 800176e:	4b73      	ldr	r3, [pc, #460]	@ (800193c <moveForward3Wheel+0x234>)
 8001770:	65bb      	str	r3, [r7, #88]	@ 0x58

	if (distanceToAchieve < 2*rampDistance){
 8001772:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001776:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800177a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800177e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d507      	bpl.n	8001798 <moveForward3Wheel+0x90>
		rampDistance = distanceToAchieve/2;
 8001788:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800178c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001794:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	}

	float deltaT = 30;
 8001798:	4b69      	ldr	r3, [pc, #420]	@ (8001940 <moveForward3Wheel+0x238>)
 800179a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	float deltaTn = 0.0;
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	float tn = 0.0;
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34
	float tn_1 = 0.0;
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	657b      	str	r3, [r7, #84]	@ 0x54
	float t0 = __HAL_TIM_GetCounter(&htim5)*pow(10,-6);
 80017ae:	4b65      	ldr	r3, [pc, #404]	@ (8001944 <moveForward3Wheel+0x23c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe51 	bl	800045c <__aeabi_ui2d>
 80017ba:	a359      	add	r3, pc, #356	@ (adr r3, 8001920 <moveForward3Wheel+0x218>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe fec6 	bl	8000550 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff f998 	bl	8000b00 <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30

	float urgencyRamp = 150;
 80017d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001948 <moveForward3Wheel+0x240>)
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float urgencyDistance  = 0;
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	653b      	str	r3, [r7, #80]	@ 0x50

	float maxSpeed = speed;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28

	float cosTheta = cos(angle + M_PI/2);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7fe fe5c 	bl	80004a0 <__aeabi_f2d>
 80017e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8001928 <moveForward3Wheel+0x220>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fcf9 	bl	80001e4 <__adddf3>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	ec43 2b17 	vmov	d7, r2, r3
 80017fa:	eeb0 0a47 	vmov.f32	s0, s14
 80017fe:	eef0 0a67 	vmov.f32	s1, s15
 8001802:	f004 ffb1 	bl	8006768 <cos>
 8001806:	ec53 2b10 	vmov	r2, r3, d0
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f977 	bl	8000b00 <__aeabi_d2f>
 8001812:	4603      	mov	r3, r0
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
	float sinTheta = sin(angle + M_PI/2);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7fe fe42 	bl	80004a0 <__aeabi_f2d>
 800181c:	a342      	add	r3, pc, #264	@ (adr r3, 8001928 <moveForward3Wheel+0x220>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe fcdf 	bl	80001e4 <__adddf3>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	ec43 2b17 	vmov	d7, r2, r3
 800182e:	eeb0 0a47 	vmov.f32	s0, s14
 8001832:	eef0 0a67 	vmov.f32	s1, s15
 8001836:	f004 ffeb 	bl	8006810 <sin>
 800183a:	ec53 2b10 	vmov	r2, r3, d0
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f95d 	bl	8000b00 <__aeabi_d2f>
 8001846:	4603      	mov	r3, r0
 8001848:	623b      	str	r3, [r7, #32]

	float sqrt3 = sqrt(3);
 800184a:	4b40      	ldr	r3, [pc, #256]	@ (800194c <moveForward3Wheel+0x244>)
 800184c:	61fb      	str	r3, [r7, #28]
	while(task){
 800184e:	e198      	b.n	8001b82 <moveForward3Wheel+0x47a>

		if (stop){
 8001850:	4b3f      	ldr	r3, [pc, #252]	@ (8001950 <moveForward3Wheel+0x248>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d014      	beq.n	8001882 <moveForward3Wheel+0x17a>
			speedTiik = maxSpeed  - ((maxSpeed -10)*urgencyDistance/urgencyRamp);
 8001858:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800185c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001860:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001864:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001868:	ee67 6a27 	vmul.f32	s13, s14, s15
 800186c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001874:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8001880:	e06a      	b.n	8001958 <moveForward3Wheel+0x250>
		} else if (distanceAchieve < rampDistance) {
 8001882:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001886:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800188a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	d514      	bpl.n	80018be <moveForward3Wheel+0x1b6>
		    speedTiik = ((maxSpeed - 10)*distanceAchieve/rampDistance) + 10;
 8001894:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001898:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800189c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018a0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80018a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018a8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80018ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 80018bc:	e04c      	b.n	8001958 <moveForward3Wheel+0x250>
		} else if (distanceToAchieve - distanceAchieve < rampDistance){
 80018be:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80018c2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80018c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ca:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80018ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	dd3d      	ble.n	8001954 <moveForward3Wheel+0x24c>
			speedTiik = maxSpeed - ((speed-10)*(distanceAchieve-distanceToAchieve + rampDistance)/rampDistance);
 80018d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018dc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018e4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80018e8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80018ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018f0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80018f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018fc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001904:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8001910:	e022      	b.n	8001958 <moveForward3Wheel+0x250>
 8001912:	bf00      	nop
 8001914:	f3af 8000 	nop.w
 8001918:	54442d18 	.word	0x54442d18
 800191c:	400921fb 	.word	0x400921fb
 8001920:	a0b5ed8d 	.word	0xa0b5ed8d
 8001924:	3eb0c6f7 	.word	0x3eb0c6f7
 8001928:	54442d18 	.word	0x54442d18
 800192c:	3ff921fb 	.word	0x3ff921fb
 8001930:	45480000 	.word	0x45480000
 8001934:	42680000 	.word	0x42680000
 8001938:	41200000 	.word	0x41200000
 800193c:	43960000 	.word	0x43960000
 8001940:	41f00000 	.word	0x41f00000
 8001944:	200001f4 	.word	0x200001f4
 8001948:	43160000 	.word	0x43160000
 800194c:	3fddb3d7 	.word	0x3fddb3d7
 8001950:	20000479 	.word	0x20000479
		} else {
			speedTiik = maxSpeed;
 8001954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001956:	667b      	str	r3, [r7, #100]	@ 0x64
		}
		float speedN = speedTiik*cosTheta;
 8001958:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800195c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	edc7 7a06 	vstr	s15, [r7, #24]
		float speedSE = ( speedTiik*((-cosTheta/2)-(sqrt3*sinTheta/2)));
 8001968:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800196c:	eef1 7a67 	vneg.f32	s15, s15
 8001970:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001974:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001978:	edd7 6a07 	vldr	s13, [r7, #28]
 800197c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001980:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001984:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001988:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	edc7 7a05 	vstr	s15, [r7, #20]
		float speedSO = ( speedTiik*((-cosTheta/2)+(sqrt3*sinTheta/2)));
 800199c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019a0:	eef1 7a67 	vneg.f32	s15, s15
 80019a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80019a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80019b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80019b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019b8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80019bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	edc7 7a04 	vstr	s15, [r7, #16]

		updateTimerPeriod(motorN,speedN*stepToDistance);
 80019d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80019d4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80019d8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80019dc:	4c90      	ldr	r4, [pc, #576]	@ (8001c20 <moveForward3Wheel+0x518>)
 80019de:	4668      	mov	r0, sp
 80019e0:	f104 0310 	add.w	r3, r4, #16
 80019e4:	2244      	movs	r2, #68	@ 0x44
 80019e6:	4619      	mov	r1, r3
 80019e8:	f004 fe10 	bl	800660c <memcpy>
 80019ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019f0:	eeb0 0a48 	vmov.f32	s0, s16
 80019f4:	f7ff fbc0 	bl	8001178 <updateTimerPeriod>
		updateTimerPeriod(motorSE,speedSE*stepToDistance);
 80019f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80019fc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001a00:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001a04:	4c87      	ldr	r4, [pc, #540]	@ (8001c24 <moveForward3Wheel+0x51c>)
 8001a06:	4668      	mov	r0, sp
 8001a08:	f104 0310 	add.w	r3, r4, #16
 8001a0c:	2244      	movs	r2, #68	@ 0x44
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f004 fdfc 	bl	800660c <memcpy>
 8001a14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a18:	eeb0 0a48 	vmov.f32	s0, s16
 8001a1c:	f7ff fbac 	bl	8001178 <updateTimerPeriod>
		updateTimerPeriod(motorSO,speedSO*stepToDistance);
 8001a20:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a24:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001a28:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001a2c:	4c7e      	ldr	r4, [pc, #504]	@ (8001c28 <moveForward3Wheel+0x520>)
 8001a2e:	4668      	mov	r0, sp
 8001a30:	f104 0310 	add.w	r3, r4, #16
 8001a34:	2244      	movs	r2, #68	@ 0x44
 8001a36:	4619      	mov	r1, r3
 8001a38:	f004 fde8 	bl	800660c <memcpy>
 8001a3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a40:	eeb0 0a48 	vmov.f32	s0, s16
 8001a44:	f7ff fb98 	bl	8001178 <updateTimerPeriod>

		tn = (__HAL_TIM_GetCounter(&htim5)*pow(10,-6) - t0);
 8001a48:	4b78      	ldr	r3, [pc, #480]	@ (8001c2c <moveForward3Wheel+0x524>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd04 	bl	800045c <__aeabi_ui2d>
 8001a54:	a370      	add	r3, pc, #448	@ (adr r3, 8001c18 <moveForward3Wheel+0x510>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe fd79 	bl	8000550 <__aeabi_dmul>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4614      	mov	r4, r2
 8001a64:	461d      	mov	r5, r3
 8001a66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a68:	f7fe fd1a 	bl	80004a0 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fbb4 	bl	80001e0 <__aeabi_dsub>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f83e 	bl	8000b00 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	637b      	str	r3, [r7, #52]	@ 0x34
		deltaTn = tn - tn_1;
 8001a88:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001a8c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a94:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		tn_1 = tn;
 8001a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9a:	657b      	str	r3, [r7, #84]	@ 0x54
		distanceAchieve += speedTiik * deltaTn;
 8001a9c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001aa0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

		if (distanceAchieve > distanceToAchieve || urgencyDistance > urgencyRamp){
 8001ab4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001ab8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001abc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	dc08      	bgt.n	8001ad8 <moveForward3Wheel+0x3d0>
 8001ac6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001aca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ace:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	dd01      	ble.n	8001adc <moveForward3Wheel+0x3d4>
			task = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}

		calculPosition(distanceAchieve,cos(angle + TiikPosition.angle),sin(angle + TiikPosition.angle));
 8001adc:	4b54      	ldr	r3, [pc, #336]	@ (8001c30 <moveForward3Wheel+0x528>)
 8001ade:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aea:	ee17 0a90 	vmov	r0, s15
 8001aee:	f7fe fcd7 	bl	80004a0 <__aeabi_f2d>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	ec43 2b10 	vmov	d0, r2, r3
 8001afa:	f004 fe35 	bl	8006768 <cos>
 8001afe:	ec53 2b10 	vmov	r2, r3, d0
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7fe fffb 	bl	8000b00 <__aeabi_d2f>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	4b48      	ldr	r3, [pc, #288]	@ (8001c30 <moveForward3Wheel+0x528>)
 8001b0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	ee17 0a90 	vmov	r0, s15
 8001b1e:	f7fe fcbf 	bl	80004a0 <__aeabi_f2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	ec43 2b10 	vmov	d0, r2, r3
 8001b2a:	f004 fe71 	bl	8006810 <sin>
 8001b2e:	ec53 2b10 	vmov	r2, r3, d0
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7fe ffe3 	bl	8000b00 <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	ee01 3a10 	vmov	s2, r3
 8001b40:	ee00 4a90 	vmov	s1, r4
 8001b44:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8001b48:	f7ff fa84 	bl	8001054 <calculPosition>

		if (stop){
 8001b4c:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <moveForward3Wheel+0x52c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00b      	beq.n	8001b6c <moveForward3Wheel+0x464>
			urgencyDistance += speedTiik * deltaTn;
 8001b54:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001b58:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b60:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		}


		if (task) HAL_Delay(deltaT);
 8001b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <moveForward3Wheel+0x47a>
 8001b72:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7a:	ee17 0a90 	vmov	r0, s15
 8001b7e:	f001 f96b 	bl	8002e58 <HAL_Delay>
	while(task){
 8001b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f47f ae63 	bne.w	8001850 <moveForward3Wheel+0x148>
	}

	updateTimerPeriod(motorN,0);
 8001b8a:	4c25      	ldr	r4, [pc, #148]	@ (8001c20 <moveForward3Wheel+0x518>)
 8001b8c:	4668      	mov	r0, sp
 8001b8e:	f104 0310 	add.w	r3, r4, #16
 8001b92:	2244      	movs	r2, #68	@ 0x44
 8001b94:	4619      	mov	r1, r3
 8001b96:	f004 fd39 	bl	800660c <memcpy>
 8001b9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b9e:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001c38 <moveForward3Wheel+0x530>
 8001ba2:	f7ff fae9 	bl	8001178 <updateTimerPeriod>
	updateTimerPeriod(motorSE,0);
 8001ba6:	4c1f      	ldr	r4, [pc, #124]	@ (8001c24 <moveForward3Wheel+0x51c>)
 8001ba8:	4668      	mov	r0, sp
 8001baa:	f104 0310 	add.w	r3, r4, #16
 8001bae:	2244      	movs	r2, #68	@ 0x44
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f004 fd2b 	bl	800660c <memcpy>
 8001bb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bba:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001c38 <moveForward3Wheel+0x530>
 8001bbe:	f7ff fadb 	bl	8001178 <updateTimerPeriod>
	updateTimerPeriod(motorSO,0);
 8001bc2:	4c19      	ldr	r4, [pc, #100]	@ (8001c28 <moveForward3Wheel+0x520>)
 8001bc4:	4668      	mov	r0, sp
 8001bc6:	f104 0310 	add.w	r3, r4, #16
 8001bca:	2244      	movs	r2, #68	@ 0x44
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f004 fd1d 	bl	800660c <memcpy>
 8001bd2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bd6:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001c38 <moveForward3Wheel+0x530>
 8001bda:	f7ff facd 	bl	8001178 <updateTimerPeriod>

	TiikPosition.x = TiikTemporaryPosition.x;
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <moveForward3Wheel+0x534>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a13      	ldr	r2, [pc, #76]	@ (8001c30 <moveForward3Wheel+0x528>)
 8001be4:	6013      	str	r3, [r2, #0]
	TiikPosition.y = TiikTemporaryPosition.y;
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <moveForward3Wheel+0x534>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a11      	ldr	r2, [pc, #68]	@ (8001c30 <moveForward3Wheel+0x528>)
 8001bec:	6053      	str	r3, [r2, #4]
	TiikPosition.angle = TiikTemporaryPosition.angle;
 8001bee:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <moveForward3Wheel+0x534>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <moveForward3Wheel+0x528>)
 8001bf4:	6093      	str	r3, [r2, #8]

	HAL_Delay(deltaT);
 8001bf6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfe:	ee17 0a90 	vmov	r0, s15
 8001c02:	f001 f929 	bl	8002e58 <HAL_Delay>

}
 8001c06:	bf00      	nop
 8001c08:	3768      	adds	r7, #104	@ 0x68
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	ecbd 8b02 	vpop	{d8}
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	f3af 8000 	nop.w
 8001c18:	a0b5ed8d 	.word	0xa0b5ed8d
 8001c1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001c20:	20000304 	.word	0x20000304
 8001c24:	20000358 	.word	0x20000358
 8001c28:	200003ac 	.word	0x200003ac
 8001c2c:	200001f4 	.word	0x200001f4
 8001c30:	20000458 	.word	0x20000458
 8001c34:	20000479 	.word	0x20000479
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	20000468 	.word	0x20000468

08001c40 <initPosition>:


void initPosition(float x,float y,float angle){
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c4e:	ed87 1a01 	vstr	s2, [r7, #4]
  TiikPosition.x = x;
 8001c52:	4a0c      	ldr	r2, [pc, #48]	@ (8001c84 <initPosition+0x44>)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6013      	str	r3, [r2, #0]
  TiikPosition.y = y;
 8001c58:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <initPosition+0x44>)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	6053      	str	r3, [r2, #4]
  TiikPosition.angle = angle;
 8001c5e:	4a09      	ldr	r2, [pc, #36]	@ (8001c84 <initPosition+0x44>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6093      	str	r3, [r2, #8]

  TiikTemporaryPosition.x = x;
 8001c64:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <initPosition+0x48>)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6013      	str	r3, [r2, #0]
  TiikTemporaryPosition.y = y;
 8001c6a:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <initPosition+0x48>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6053      	str	r3, [r2, #4]
  TiikTemporaryPosition.angle = angle;
 8001c70:	4a05      	ldr	r2, [pc, #20]	@ (8001c88 <initPosition+0x48>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6093      	str	r3, [r2, #8]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000458 	.word	0x20000458
 8001c88:	20000468 	.word	0x20000468

08001c8c <regroupBytesToFloat>:
    }

    return uint32Value;
}

float regroupBytesToFloat(unsigned char *bytes) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    float floatValue;
    unsigned char *value = (unsigned char *)&floatValue;
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < sizeof(float); ++i) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e00a      	b.n	8001cb6 <regroupBytesToFloat+0x2a>
        *(value + i) = bytes[i];
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	441a      	add	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	6939      	ldr	r1, [r7, #16]
 8001caa:	440b      	add	r3, r1
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d9f1      	bls.n	8001ca0 <regroupBytesToFloat+0x14>
    }

    return floatValue;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	ee07 3a90 	vmov	s15, r3
}
 8001cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <treatData>:

void treatData(){
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
    float position_X_float = regroupBytesToFloat(&dataRxBuffer[1]);
 8001cd6:	4872      	ldr	r0, [pc, #456]	@ (8001ea0 <treatData+0x1d0>)
 8001cd8:	f7ff ffd8 	bl	8001c8c <regroupBytesToFloat>
 8001cdc:	ed87 0a05 	vstr	s0, [r7, #20]
    float position_Y_float = regroupBytesToFloat(&dataRxBuffer[5]);
 8001ce0:	4870      	ldr	r0, [pc, #448]	@ (8001ea4 <treatData+0x1d4>)
 8001ce2:	f7ff ffd3 	bl	8001c8c <regroupBytesToFloat>
 8001ce6:	ed87 0a04 	vstr	s0, [r7, #16]
    float position_angle_float = regroupBytesToFloat(&dataRxBuffer[9]);
 8001cea:	486f      	ldr	r0, [pc, #444]	@ (8001ea8 <treatData+0x1d8>)
 8001cec:	f7ff ffce 	bl	8001c8c <regroupBytesToFloat>
 8001cf0:	ed87 0a03 	vstr	s0, [r7, #12]


	if ((!isnan(position_angle_float)) && (stop == 0)){
 8001cf4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d610      	bvs.n	8001d28 <treatData+0x58>
 8001d06:	4b69      	ldr	r3, [pc, #420]	@ (8001eac <treatData+0x1dc>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10c      	bne.n	8001d28 <treatData+0x58>
		turn3Wheel(M_PI,position_angle_float - TiikPosition.angle);
 8001d0e:	4b68      	ldr	r3, [pc, #416]	@ (8001eb0 <treatData+0x1e0>)
 8001d10:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d14:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1c:	eef0 0a67 	vmov.f32	s1, s15
 8001d20:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8001eb4 <treatData+0x1e4>
 8001d24:	f7ff fa88 	bl	8001238 <turn3Wheel>
	}

	if ((!isnan(position_X_float) || !isnan(position_Y_float)) && (stop == 0)){
 8001d28:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d30:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	d709      	bvc.n	8001d4e <treatData+0x7e>
 8001d3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d42:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	f180 8081 	bvs.w	8001e50 <treatData+0x180>
 8001d4e:	4b57      	ldr	r3, [pc, #348]	@ (8001eac <treatData+0x1dc>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d17c      	bne.n	8001e50 <treatData+0x180>
		float distance = sqrt(pow(position_X_float - TiikPosition.x ,2)+pow(position_Y_float - TiikPosition.y ,2));
 8001d56:	4b56      	ldr	r3, [pc, #344]	@ (8001eb0 <treatData+0x1e0>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	ee17 0a90 	vmov	r0, s15
 8001d68:	f7fe fb9a 	bl	80004a0 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 8001e98 <treatData+0x1c8>
 8001d74:	ec43 2b10 	vmov	d0, r2, r3
 8001d78:	f004 fc58 	bl	800662c <pow>
 8001d7c:	ec55 4b10 	vmov	r4, r5, d0
 8001d80:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb0 <treatData+0x1e0>)
 8001d82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d86:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8e:	ee17 0a90 	vmov	r0, s15
 8001d92:	f7fe fb85 	bl	80004a0 <__aeabi_f2d>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 8001e98 <treatData+0x1c8>
 8001d9e:	ec43 2b10 	vmov	d0, r2, r3
 8001da2:	f004 fc43 	bl	800662c <pow>
 8001da6:	ec53 2b10 	vmov	r2, r3, d0
 8001daa:	4620      	mov	r0, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	f7fe fa19 	bl	80001e4 <__adddf3>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	ec43 2b17 	vmov	d7, r2, r3
 8001dba:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbe:	eef0 0a67 	vmov.f32	s1, s15
 8001dc2:	f004 fca3 	bl	800670c <sqrt>
 8001dc6:	ec53 2b10 	vmov	r2, r3, d0
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe fe97 	bl	8000b00 <__aeabi_d2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	60bb      	str	r3, [r7, #8]
		float angle = atan2((position_Y_float - TiikPosition.y),(position_X_float - TiikPosition.x))- TiikPosition.angle;
 8001dd6:	4b36      	ldr	r3, [pc, #216]	@ (8001eb0 <treatData+0x1e0>)
 8001dd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ddc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de4:	ee17 0a90 	vmov	r0, s15
 8001de8:	f7fe fb5a 	bl	80004a0 <__aeabi_f2d>
 8001dec:	4604      	mov	r4, r0
 8001dee:	460d      	mov	r5, r1
 8001df0:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb0 <treatData+0x1e0>)
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfe:	ee17 0a90 	vmov	r0, s15
 8001e02:	f7fe fb4d 	bl	80004a0 <__aeabi_f2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	ec43 2b11 	vmov	d1, r2, r3
 8001e0e:	ec45 4b10 	vmov	d0, r4, r5
 8001e12:	f004 fc09 	bl	8006628 <atan2>
 8001e16:	ec55 4b10 	vmov	r4, r5, d0
 8001e1a:	4b25      	ldr	r3, [pc, #148]	@ (8001eb0 <treatData+0x1e0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb3e 	bl	80004a0 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	f7fe f9d8 	bl	80001e0 <__aeabi_dsub>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe fe62 	bl	8000b00 <__aeabi_d2f>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	607b      	str	r3, [r7, #4]

 		moveForward3Wheel(300,distance,angle);
 8001e40:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e44:	edd7 0a02 	vldr	s1, [r7, #8]
 8001e48:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001eb8 <treatData+0x1e8>
 8001e4c:	f7ff fc5c 	bl	8001708 <moveForward3Wheel>
	}

	stop = 0;
 8001e50:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <treatData+0x1dc>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]

	robotState = 0x00;
 8001e56:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <treatData+0x1ec>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
	dataTxBuffer[2] = robotState;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <treatData+0x1ec>)
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <treatData+0x1f0>)
 8001e62:	709a      	strb	r2, [r3, #2]
	dataArrived = 0;
 8001e64:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <treatData+0x1f4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]

	dataTransmit(TiikPosition.x,TiikPosition.y,TiikPosition.angle);
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <treatData+0x1e0>)
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <treatData+0x1e0>)
 8001e72:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <treatData+0x1e0>)
 8001e78:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e7c:	eeb0 1a66 	vmov.f32	s2, s13
 8001e80:	eef0 0a47 	vmov.f32	s1, s14
 8001e84:	eeb0 0a67 	vmov.f32	s0, s15
 8001e88:	f7ff f888 	bl	8000f9c <dataTransmit>
}
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bdb0      	pop	{r4, r5, r7, pc}
 8001e94:	f3af 8000 	nop.w
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	40000000 	.word	0x40000000
 8001ea0:	200002f5 	.word	0x200002f5
 8001ea4:	200002f9 	.word	0x200002f9
 8001ea8:	200002fd 	.word	0x200002fd
 8001eac:	20000479 	.word	0x20000479
 8001eb0:	20000458 	.word	0x20000458
 8001eb4:	40490fdb 	.word	0x40490fdb
 8001eb8:	43960000 	.word	0x43960000
 8001ebc:	20000478 	.word	0x20000478
 8001ec0:	200002e4 	.word	0x200002e4
 8001ec4:	2000047a 	.word	0x2000047a

08001ec8 <initSpeed>:

void initSpeed(){
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b093      	sub	sp, #76	@ 0x4c
 8001ecc:	af12      	add	r7, sp, #72	@ 0x48
	updateTimerPeriod(motorN,0);
 8001ece:	4c17      	ldr	r4, [pc, #92]	@ (8001f2c <initSpeed+0x64>)
 8001ed0:	4668      	mov	r0, sp
 8001ed2:	f104 0310 	add.w	r3, r4, #16
 8001ed6:	2244      	movs	r2, #68	@ 0x44
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f004 fb97 	bl	800660c <memcpy>
 8001ede:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ee2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001f30 <initSpeed+0x68>
 8001ee6:	f7ff f947 	bl	8001178 <updateTimerPeriod>
	updateTimerPeriod(motorSE,0);
 8001eea:	4c12      	ldr	r4, [pc, #72]	@ (8001f34 <initSpeed+0x6c>)
 8001eec:	4668      	mov	r0, sp
 8001eee:	f104 0310 	add.w	r3, r4, #16
 8001ef2:	2244      	movs	r2, #68	@ 0x44
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f004 fb89 	bl	800660c <memcpy>
 8001efa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001efe:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001f30 <initSpeed+0x68>
 8001f02:	f7ff f939 	bl	8001178 <updateTimerPeriod>
	updateTimerPeriod(motorSO,0);
 8001f06:	4c0c      	ldr	r4, [pc, #48]	@ (8001f38 <initSpeed+0x70>)
 8001f08:	4668      	mov	r0, sp
 8001f0a:	f104 0310 	add.w	r3, r4, #16
 8001f0e:	2244      	movs	r2, #68	@ 0x44
 8001f10:	4619      	mov	r1, r3
 8001f12:	f004 fb7b 	bl	800660c <memcpy>
 8001f16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f1a:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001f30 <initSpeed+0x68>
 8001f1e:	f7ff f92b 	bl	8001178 <updateTimerPeriod>
}
 8001f22:	bf00      	nop
 8001f24:	3704      	adds	r7, #4
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000304 	.word	0x20000304
 8001f30:	00000000 	.word	0x00000000
 8001f34:	20000358 	.word	0x20000358
 8001f38:	200003ac 	.word	0x200003ac

08001f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f40:	f000 ff18 	bl	8002d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f44:	f000 f87c 	bl	8002040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f48:	f000 fbee 	bl	8002728 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f4c:	f000 fba0 	bl	8002690 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f50:	f000 fb74 	bl	800263c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001f54:	f000 f926 	bl	80021a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f58:	f000 f9c4 	bl	80022e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f5c:	f000 fa0e 	bl	800237c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f60:	f000 fa82 	bl	8002468 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001f64:	f000 faf6 	bl	8002554 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001f68:	f000 f8ca 	bl	8002100 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f72:	4826      	ldr	r0, [pc, #152]	@ (800200c <main+0xd0>)
 8001f74:	f001 fe7e 	bl	8003c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2180      	movs	r1, #128	@ 0x80
 8001f7c:	4824      	ldr	r0, [pc, #144]	@ (8002010 <main+0xd4>)
 8001f7e:	f001 fe79 	bl	8003c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	2180      	movs	r1, #128	@ 0x80
 8001f86:	4821      	ldr	r0, [pc, #132]	@ (800200c <main+0xd0>)
 8001f88:	f001 fe74 	bl	8003c74 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4821      	ldr	r0, [pc, #132]	@ (8002014 <main+0xd8>)
 8001f90:	f002 fc86 	bl	80048a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001f94:	2100      	movs	r1, #0
 8001f96:	4820      	ldr	r0, [pc, #128]	@ (8002018 <main+0xdc>)
 8001f98:	f002 fc82 	bl	80048a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	481f      	ldr	r0, [pc, #124]	@ (800201c <main+0xe0>)
 8001fa0:	f002 fc7e 	bl	80048a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	481e      	ldr	r0, [pc, #120]	@ (8002020 <main+0xe4>)
 8001fa8:	f002 fc7a 	bl	80048a0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8001fac:	481d      	ldr	r0, [pc, #116]	@ (8002024 <main+0xe8>)
 8001fae:	f002 fb63 	bl	8004678 <HAL_TIM_Base_Start_IT>

  initMotors();
 8001fb2:	f7fe ff6d 	bl	8000e90 <initMotors>

  robotState = 0x00;
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <main+0xec>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
  dataTxBuffer[2] = robotState;
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <main+0xec>)
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <main+0xf0>)
 8001fc2:	709a      	strb	r2, [r3, #2]
  dataTxBuffer[0] = 0x54;
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <main+0xf0>)
 8001fc6:	2254      	movs	r2, #84	@ 0x54
 8001fc8:	701a      	strb	r2, [r3, #0]
  dataTxBuffer[1] = 0x2c;
 8001fca:	4b18      	ldr	r3, [pc, #96]	@ (800202c <main+0xf0>)
 8001fcc:	222c      	movs	r2, #44	@ 0x2c
 8001fce:	705a      	strb	r2, [r3, #1]

  initSpeed();
 8001fd0:	f7ff ff7a 	bl	8001ec8 <initSpeed>
  initPosition(0.0,0.0,0.0);
 8001fd4:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 8002030 <main+0xf4>
 8001fd8:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8002030 <main+0xf4>
 8001fdc:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002030 <main+0xf4>
 8001fe0:	f7ff fe2e 	bl	8001c40 <initPosition>
  setPosition();
 8001fe4:	f7ff f80e 	bl	8001004 <setPosition>
  dataArrived = 0;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <main+0xf8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, dataRxBuffer, 13);
 8001fee:	220d      	movs	r2, #13
 8001ff0:	4911      	ldr	r1, [pc, #68]	@ (8002038 <main+0xfc>)
 8001ff2:	4812      	ldr	r0, [pc, #72]	@ (800203c <main+0x100>)
 8001ff4:	f003 fb5d 	bl	80056b2 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (dataArrived){
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <main+0xf8>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0fb      	beq.n	8001ff8 <main+0xbc>
		  dataArrived = 0;
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <main+0xf8>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
		  treatData();
 8002006:	f7ff fe63 	bl	8001cd0 <treatData>
	  if (dataArrived){
 800200a:	e7f5      	b.n	8001ff8 <main+0xbc>
 800200c:	40020000 	.word	0x40020000
 8002010:	40020800 	.word	0x40020800
 8002014:	200000d4 	.word	0x200000d4
 8002018:	2000011c 	.word	0x2000011c
 800201c:	20000164 	.word	0x20000164
 8002020:	200001ac 	.word	0x200001ac
 8002024:	200001f4 	.word	0x200001f4
 8002028:	20000478 	.word	0x20000478
 800202c:	200002e4 	.word	0x200002e4
 8002030:	00000000 	.word	0x00000000
 8002034:	2000047a 	.word	0x2000047a
 8002038:	200002f4 	.word	0x200002f4
 800203c:	2000023c 	.word	0x2000023c

08002040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b094      	sub	sp, #80	@ 0x50
 8002044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002046:	f107 0320 	add.w	r3, r7, #32
 800204a:	2230      	movs	r2, #48	@ 0x30
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f004 faaa 	bl	80065a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	4b23      	ldr	r3, [pc, #140]	@ (80020f8 <SystemClock_Config+0xb8>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	4a22      	ldr	r2, [pc, #136]	@ (80020f8 <SystemClock_Config+0xb8>)
 800206e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002072:	6413      	str	r3, [r2, #64]	@ 0x40
 8002074:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <SystemClock_Config+0xb8>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <SystemClock_Config+0xbc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800208c:	4a1b      	ldr	r2, [pc, #108]	@ (80020fc <SystemClock_Config+0xbc>)
 800208e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <SystemClock_Config+0xbc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020a0:	2302      	movs	r3, #2
 80020a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a4:	2301      	movs	r3, #1
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020a8:	2310      	movs	r3, #16
 80020aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b0:	f107 0320 	add.w	r3, r7, #32
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 fdf7 	bl	8003ca8 <HAL_RCC_OscConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80020c0:	f000 fc10 	bl	80028e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c4:	230f      	movs	r3, #15
 80020c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 f85a 	bl	8004198 <HAL_RCC_ClockConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80020ea:	f000 fbfb 	bl	80028e4 <Error_Handler>
  }
}
 80020ee:	bf00      	nop
 80020f0:	3750      	adds	r7, #80	@ 0x50
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000

08002100 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002106:	463b      	mov	r3, r7
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <MX_ADC1_Init+0x98>)
 8002114:	4a21      	ldr	r2, [pc, #132]	@ (800219c <MX_ADC1_Init+0x9c>)
 8002116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002118:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <MX_ADC1_Init+0x98>)
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800211e:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <MX_ADC1_Init+0x98>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002124:	4b1c      	ldr	r3, [pc, #112]	@ (8002198 <MX_ADC1_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <MX_ADC1_Init+0x98>)
 800212c:	2200      	movs	r2, #0
 800212e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <MX_ADC1_Init+0x98>)
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002138:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <MX_ADC1_Init+0x98>)
 800213a:	2200      	movs	r2, #0
 800213c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800213e:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <MX_ADC1_Init+0x98>)
 8002140:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <MX_ADC1_Init+0xa0>)
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <MX_ADC1_Init+0x98>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <MX_ADC1_Init+0x98>)
 800214c:	2201      	movs	r2, #1
 800214e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <MX_ADC1_Init+0x98>)
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002158:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <MX_ADC1_Init+0x98>)
 800215a:	2201      	movs	r2, #1
 800215c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800215e:	480e      	ldr	r0, [pc, #56]	@ (8002198 <MX_ADC1_Init+0x98>)
 8002160:	f000 fe9e 	bl	8002ea0 <HAL_ADC_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800216a:	f000 fbbb 	bl	80028e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002172:	2301      	movs	r3, #1
 8002174:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800217a:	463b      	mov	r3, r7
 800217c:	4619      	mov	r1, r3
 800217e:	4806      	ldr	r0, [pc, #24]	@ (8002198 <MX_ADC1_Init+0x98>)
 8002180:	f000 fed2 	bl	8002f28 <HAL_ADC_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800218a:	f000 fbab 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000008c 	.word	0x2000008c
 800219c:	40012000 	.word	0x40012000
 80021a0:	0f000001 	.word	0x0f000001

080021a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b096      	sub	sp, #88	@ 0x58
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	615a      	str	r2, [r3, #20]
 80021d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	2220      	movs	r2, #32
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 f9e3 	bl	80065a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021e2:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <MX_TIM1_Init+0x138>)
 80021e4:	4a3e      	ldr	r2, [pc, #248]	@ (80022e0 <MX_TIM1_Init+0x13c>)
 80021e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80021e8:	4b3c      	ldr	r3, [pc, #240]	@ (80022dc <MX_TIM1_Init+0x138>)
 80021ea:	220f      	movs	r2, #15
 80021ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ee:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <MX_TIM1_Init+0x138>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000;
 80021f4:	4b39      	ldr	r3, [pc, #228]	@ (80022dc <MX_TIM1_Init+0x138>)
 80021f6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80021fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fc:	4b37      	ldr	r3, [pc, #220]	@ (80022dc <MX_TIM1_Init+0x138>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002202:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <MX_TIM1_Init+0x138>)
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b34      	ldr	r3, [pc, #208]	@ (80022dc <MX_TIM1_Init+0x138>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800220e:	4833      	ldr	r0, [pc, #204]	@ (80022dc <MX_TIM1_Init+0x138>)
 8002210:	f002 f9e2 	bl	80045d8 <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800221a:	f000 fb63 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002222:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002224:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002228:	4619      	mov	r1, r3
 800222a:	482c      	ldr	r0, [pc, #176]	@ (80022dc <MX_TIM1_Init+0x138>)
 800222c:	f002 fd06 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002236:	f000 fb55 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800223a:	4828      	ldr	r0, [pc, #160]	@ (80022dc <MX_TIM1_Init+0x138>)
 800223c:	f002 fad7 	bl	80047ee <HAL_TIM_PWM_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002246:	f000 fb4d 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002252:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002256:	4619      	mov	r1, r3
 8002258:	4820      	ldr	r0, [pc, #128]	@ (80022dc <MX_TIM1_Init+0x138>)
 800225a:	f003 f88f 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002264:	f000 fb3e 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002268:	2360      	movs	r3, #96	@ 0x60
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1;
 800226c:	2301      	movs	r3, #1
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002274:	2300      	movs	r3, #0
 8002276:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800227c:	2300      	movs	r3, #0
 800227e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002280:	2300      	movs	r3, #0
 8002282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	4813      	ldr	r0, [pc, #76]	@ (80022dc <MX_TIM1_Init+0x138>)
 800228e:	f002 fc13 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002298:	f000 fb24 	bl	80028e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4807      	ldr	r0, [pc, #28]	@ (80022dc <MX_TIM1_Init+0x138>)
 80022c0:	f003 f8ca 	bl	8005458 <HAL_TIMEx_ConfigBreakDeadTime>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80022ca:	f000 fb0b 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022ce:	4803      	ldr	r0, [pc, #12]	@ (80022dc <MX_TIM1_Init+0x138>)
 80022d0:	f000 fbf2 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 80022d4:	bf00      	nop
 80022d6:	3758      	adds	r7, #88	@ 0x58
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200000d4 	.word	0x200000d4
 80022e0:	40010000 	.word	0x40010000

080022e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	463b      	mov	r3, r7
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002300:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <MX_TIM2_Init+0x94>)
 8002302:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <MX_TIM2_Init+0x94>)
 800230a:	220f      	movs	r2, #15
 800230c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230e:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <MX_TIM2_Init+0x94>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <MX_TIM2_Init+0x94>)
 8002316:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800231a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231c:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <MX_TIM2_Init+0x94>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <MX_TIM2_Init+0x94>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002328:	4813      	ldr	r0, [pc, #76]	@ (8002378 <MX_TIM2_Init+0x94>)
 800232a:	f002 f955 	bl	80045d8 <HAL_TIM_Base_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002334:	f000 fad6 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800233c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	4619      	mov	r1, r3
 8002344:	480c      	ldr	r0, [pc, #48]	@ (8002378 <MX_TIM2_Init+0x94>)
 8002346:	f002 fc79 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002350:	f000 fac8 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800235c:	463b      	mov	r3, r7
 800235e:	4619      	mov	r1, r3
 8002360:	4805      	ldr	r0, [pc, #20]	@ (8002378 <MX_TIM2_Init+0x94>)
 8002362:	f003 f80b 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800236c:	f000 faba 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000011c 	.word	0x2000011c

0800237c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	@ 0x38
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	f107 0320 	add.w	r3, r7, #32
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
 80023a8:	615a      	str	r2, [r3, #20]
 80023aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002460 <MX_TIM3_Init+0xe4>)
 80023ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002464 <MX_TIM3_Init+0xe8>)
 80023b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80023b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002460 <MX_TIM3_Init+0xe4>)
 80023b4:	220f      	movs	r2, #15
 80023b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b8:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <MX_TIM3_Init+0xe4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000;
 80023be:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <MX_TIM3_Init+0xe4>)
 80023c0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80023c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c6:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <MX_TIM3_Init+0xe4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <MX_TIM3_Init+0xe4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023d2:	4823      	ldr	r0, [pc, #140]	@ (8002460 <MX_TIM3_Init+0xe4>)
 80023d4:	f002 f900 	bl	80045d8 <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023de:	f000 fa81 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ec:	4619      	mov	r1, r3
 80023ee:	481c      	ldr	r0, [pc, #112]	@ (8002460 <MX_TIM3_Init+0xe4>)
 80023f0:	f002 fc24 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023fa:	f000 fa73 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023fe:	4818      	ldr	r0, [pc, #96]	@ (8002460 <MX_TIM3_Init+0xe4>)
 8002400:	f002 f9f5 	bl	80047ee <HAL_TIM_PWM_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800240a:	f000 fa6b 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002416:	f107 0320 	add.w	r3, r7, #32
 800241a:	4619      	mov	r1, r3
 800241c:	4810      	ldr	r0, [pc, #64]	@ (8002460 <MX_TIM3_Init+0xe4>)
 800241e:	f002 ffad 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002428:	f000 fa5c 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800242c:	2360      	movs	r3, #96	@ 0x60
 800242e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8002430:	2301      	movs	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2200      	movs	r2, #0
 8002440:	4619      	mov	r1, r3
 8002442:	4807      	ldr	r0, [pc, #28]	@ (8002460 <MX_TIM3_Init+0xe4>)
 8002444:	f002 fb38 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800244e:	f000 fa49 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002452:	4803      	ldr	r0, [pc, #12]	@ (8002460 <MX_TIM3_Init+0xe4>)
 8002454:	f000 fb30 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 8002458:	bf00      	nop
 800245a:	3738      	adds	r7, #56	@ 0x38
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000164 	.word	0x20000164
 8002464:	40000400 	.word	0x40000400

08002468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08e      	sub	sp, #56	@ 0x38
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	f107 0320 	add.w	r3, r7, #32
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
 8002494:	615a      	str	r2, [r3, #20]
 8002496:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002498:	4b2c      	ldr	r3, [pc, #176]	@ (800254c <MX_TIM4_Init+0xe4>)
 800249a:	4a2d      	ldr	r2, [pc, #180]	@ (8002550 <MX_TIM4_Init+0xe8>)
 800249c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800249e:	4b2b      	ldr	r3, [pc, #172]	@ (800254c <MX_TIM4_Init+0xe4>)
 80024a0:	220f      	movs	r2, #15
 80024a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a4:	4b29      	ldr	r3, [pc, #164]	@ (800254c <MX_TIM4_Init+0xe4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 80024aa:	4b28      	ldr	r3, [pc, #160]	@ (800254c <MX_TIM4_Init+0xe4>)
 80024ac:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80024b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b2:	4b26      	ldr	r3, [pc, #152]	@ (800254c <MX_TIM4_Init+0xe4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b8:	4b24      	ldr	r3, [pc, #144]	@ (800254c <MX_TIM4_Init+0xe4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024be:	4823      	ldr	r0, [pc, #140]	@ (800254c <MX_TIM4_Init+0xe4>)
 80024c0:	f002 f88a 	bl	80045d8 <HAL_TIM_Base_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80024ca:	f000 fa0b 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024d8:	4619      	mov	r1, r3
 80024da:	481c      	ldr	r0, [pc, #112]	@ (800254c <MX_TIM4_Init+0xe4>)
 80024dc:	f002 fbae 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80024e6:	f000 f9fd 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024ea:	4818      	ldr	r0, [pc, #96]	@ (800254c <MX_TIM4_Init+0xe4>)
 80024ec:	f002 f97f 	bl	80047ee <HAL_TIM_PWM_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80024f6:	f000 f9f5 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002502:	f107 0320 	add.w	r3, r7, #32
 8002506:	4619      	mov	r1, r3
 8002508:	4810      	ldr	r0, [pc, #64]	@ (800254c <MX_TIM4_Init+0xe4>)
 800250a:	f002 ff37 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002514:	f000 f9e6 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002518:	2360      	movs	r3, #96	@ 0x60
 800251a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 800251c:	2301      	movs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	2204      	movs	r2, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4807      	ldr	r0, [pc, #28]	@ (800254c <MX_TIM4_Init+0xe4>)
 8002530:	f002 fac2 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800253a:	f000 f9d3 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800253e:	4803      	ldr	r0, [pc, #12]	@ (800254c <MX_TIM4_Init+0xe4>)
 8002540:	f000 faba 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 8002544:	bf00      	nop
 8002546:	3738      	adds	r7, #56	@ 0x38
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200001ac 	.word	0x200001ac
 8002550:	40000800 	.word	0x40000800

08002554 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08e      	sub	sp, #56	@ 0x38
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800255a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002568:	f107 0320 	add.w	r3, r7, #32
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
 8002580:	615a      	str	r2, [r3, #20]
 8002582:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002584:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <MX_TIM5_Init+0xe0>)
 8002586:	4a2c      	ldr	r2, [pc, #176]	@ (8002638 <MX_TIM5_Init+0xe4>)
 8002588:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 800258a:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <MX_TIM5_Init+0xe0>)
 800258c:	220f      	movs	r2, #15
 800258e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002590:	4b28      	ldr	r3, [pc, #160]	@ (8002634 <MX_TIM5_Init+0xe0>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002596:	4b27      	ldr	r3, [pc, #156]	@ (8002634 <MX_TIM5_Init+0xe0>)
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259e:	4b25      	ldr	r3, [pc, #148]	@ (8002634 <MX_TIM5_Init+0xe0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a4:	4b23      	ldr	r3, [pc, #140]	@ (8002634 <MX_TIM5_Init+0xe0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025aa:	4822      	ldr	r0, [pc, #136]	@ (8002634 <MX_TIM5_Init+0xe0>)
 80025ac:	f002 f814 	bl	80045d8 <HAL_TIM_Base_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80025b6:	f000 f995 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025c4:	4619      	mov	r1, r3
 80025c6:	481b      	ldr	r0, [pc, #108]	@ (8002634 <MX_TIM5_Init+0xe0>)
 80025c8:	f002 fb38 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80025d2:	f000 f987 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80025d6:	4817      	ldr	r0, [pc, #92]	@ (8002634 <MX_TIM5_Init+0xe0>)
 80025d8:	f002 f8b0 	bl	800473c <HAL_TIM_OC_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80025e2:	f000 f97f 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025ee:	f107 0320 	add.w	r3, r7, #32
 80025f2:	4619      	mov	r1, r3
 80025f4:	480f      	ldr	r0, [pc, #60]	@ (8002634 <MX_TIM5_Init+0xe0>)
 80025f6:	f002 fec1 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002600:	f000 f970 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002604:	2300      	movs	r3, #0
 8002606:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	2200      	movs	r2, #0
 8002618:	4619      	mov	r1, r3
 800261a:	4806      	ldr	r0, [pc, #24]	@ (8002634 <MX_TIM5_Init+0xe0>)
 800261c:	f002 f9f0 	bl	8004a00 <HAL_TIM_OC_ConfigChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002626:	f000 f95d 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	3738      	adds	r7, #56	@ 0x38
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200001f4 	.word	0x200001f4
 8002638:	40000c00 	.word	0x40000c00

0800263c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002640:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002642:	4a12      	ldr	r2, [pc, #72]	@ (800268c <MX_USART2_UART_Init+0x50>)
 8002644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002648:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800264c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8002666:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002668:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800266c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002676:	f002 ff41 	bl	80054fc <HAL_UART_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002680:	f000 f930 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	2000023c 	.word	0x2000023c
 800268c:	40004400 	.word	0x40004400

08002690 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <MX_DMA_Init+0x8c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a1f      	ldr	r2, [pc, #124]	@ (800271c <MX_DMA_Init+0x8c>)
 80026a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <MX_DMA_Init+0x8c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80026b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <MX_DMA_Init+0x90>)
 80026b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002724 <MX_DMA_Init+0x94>)
 80026b6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80026b8:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <MX_DMA_Init+0x90>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80026be:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <MX_DMA_Init+0x90>)
 80026c0:	2280      	movs	r2, #128	@ 0x80
 80026c2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80026c4:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <MX_DMA_Init+0x90>)
 80026c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ca:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80026cc:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <MX_DMA_Init+0x90>)
 80026ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d4:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <MX_DMA_Init+0x90>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026da:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <MX_DMA_Init+0x90>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <MX_DMA_Init+0x90>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <MX_DMA_Init+0x90>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <MX_DMA_Init+0x90>)
 80026ee:	2204      	movs	r2, #4
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <MX_DMA_Init+0x90>)
 80026f4:	2203      	movs	r2, #3
 80026f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <MX_DMA_Init+0x90>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026fe:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <MX_DMA_Init+0x90>)
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002704:	4806      	ldr	r0, [pc, #24]	@ (8002720 <MX_DMA_Init+0x90>)
 8002706:	f000 ff3f 	bl	8003588 <HAL_DMA_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_DMA_Init+0x84>
  {
    Error_Handler( );
 8002710:	f000 f8e8 	bl	80028e4 <Error_Handler>
  }

}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	20000284 	.word	0x20000284
 8002724:	40026410 	.word	0x40026410

08002728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	@ 0x28
 800272c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b41      	ldr	r3, [pc, #260]	@ (8002848 <MX_GPIO_Init+0x120>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a40      	ldr	r2, [pc, #256]	@ (8002848 <MX_GPIO_Init+0x120>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b3e      	ldr	r3, [pc, #248]	@ (8002848 <MX_GPIO_Init+0x120>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b3a      	ldr	r3, [pc, #232]	@ (8002848 <MX_GPIO_Init+0x120>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4a39      	ldr	r2, [pc, #228]	@ (8002848 <MX_GPIO_Init+0x120>)
 8002764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4b37      	ldr	r3, [pc, #220]	@ (8002848 <MX_GPIO_Init+0x120>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	4b33      	ldr	r3, [pc, #204]	@ (8002848 <MX_GPIO_Init+0x120>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a32      	ldr	r2, [pc, #200]	@ (8002848 <MX_GPIO_Init+0x120>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b30      	ldr	r3, [pc, #192]	@ (8002848 <MX_GPIO_Init+0x120>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	4b2c      	ldr	r3, [pc, #176]	@ (8002848 <MX_GPIO_Init+0x120>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	4a2b      	ldr	r2, [pc, #172]	@ (8002848 <MX_GPIO_Init+0x120>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a2:	4b29      	ldr	r3, [pc, #164]	@ (8002848 <MX_GPIO_Init+0x120>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
 80027b4:	4825      	ldr	r0, [pc, #148]	@ (800284c <MX_GPIO_Init+0x124>)
 80027b6:	f001 fa5d 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2139      	movs	r1, #57	@ 0x39
 80027be:	4824      	ldr	r0, [pc, #144]	@ (8002850 <MX_GPIO_Init+0x128>)
 80027c0:	f001 fa58 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2180      	movs	r1, #128	@ 0x80
 80027c8:	4822      	ldr	r0, [pc, #136]	@ (8002854 <MX_GPIO_Init+0x12c>)
 80027ca:	f001 fa53 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80027d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	481b      	ldr	r0, [pc, #108]	@ (8002854 <MX_GPIO_Init+0x12c>)
 80027e6:	f001 f8c1 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80027ea:	f44f 63d4 	mov.w	r3, #1696	@ 0x6a0
 80027ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4619      	mov	r1, r3
 8002802:	4812      	ldr	r0, [pc, #72]	@ (800284c <MX_GPIO_Init+0x124>)
 8002804:	f001 f8b2 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002808:	2339      	movs	r3, #57	@ 0x39
 800280a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280c:	2301      	movs	r3, #1
 800280e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	480c      	ldr	r0, [pc, #48]	@ (8002850 <MX_GPIO_Init+0x128>)
 8002820:	f001 f8a4 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002828:	2301      	movs	r3, #1
 800282a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4806      	ldr	r0, [pc, #24]	@ (8002854 <MX_GPIO_Init+0x12c>)
 800283c:	f001 f896 	bl	800396c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002840:	bf00      	nop
 8002842:	3728      	adds	r7, #40	@ 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40023800 	.word	0x40023800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800

08002858 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	//debugTransmit(0x01);

	if (dataRxBuffer[0] == 0x01){
 8002860:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_UART_RxCpltCallback+0x74>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <HAL_UART_RxCpltCallback+0x1e>
		dataRxBuffer[0] = 0x00;
 8002868:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <HAL_UART_RxCpltCallback+0x74>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
		stop = 1;
 800286e:	4b18      	ldr	r3, [pc, #96]	@ (80028d0 <HAL_UART_RxCpltCallback+0x78>)
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e014      	b.n	80028a0 <HAL_UART_RxCpltCallback+0x48>
	} else if (dataRxBuffer[0] == 0x02){
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <HAL_UART_RxCpltCallback+0x74>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d110      	bne.n	80028a0 <HAL_UART_RxCpltCallback+0x48>
		dataRxBuffer[0] = 0x00;
 800287e:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <HAL_UART_RxCpltCallback+0x74>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
		if (dataTxBuffer[2] == 0x00){
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <HAL_UART_RxCpltCallback+0x7c>)
 8002886:	789b      	ldrb	r3, [r3, #2]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_UART_RxCpltCallback+0x48>
			robotState = 0x01;
 800288c:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_UART_RxCpltCallback+0x80>)
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
			dataTxBuffer[2] = robotState;
 8002892:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_UART_RxCpltCallback+0x80>)
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <HAL_UART_RxCpltCallback+0x7c>)
 8002898:	709a      	strb	r2, [r3, #2]
			dataArrived = 1;
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <HAL_UART_RxCpltCallback+0x84>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
		}
	}

	dataTransmit(TiikTemporaryPosition.x,TiikTemporaryPosition.y,TiikTemporaryPosition.angle);
 80028a0:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <HAL_UART_RxCpltCallback+0x88>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_UART_RxCpltCallback+0x88>)
 80028a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80028ac:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <HAL_UART_RxCpltCallback+0x88>)
 80028ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80028b2:	eeb0 1a66 	vmov.f32	s2, s13
 80028b6:	eef0 0a47 	vmov.f32	s1, s14
 80028ba:	eeb0 0a67 	vmov.f32	s0, s15
 80028be:	f7fe fb6d 	bl	8000f9c <dataTransmit>
		HAL_UART_Receive_IT(&huart2, rxBufferData, 13);
	}

	HAL_UART_Receive_IT(&huart2, dataRxBuffer, 13);
	*/
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200002f4 	.word	0x200002f4
 80028d0:	20000479 	.word	0x20000479
 80028d4:	200002e4 	.word	0x200002e4
 80028d8:	20000478 	.word	0x20000478
 80028dc:	2000047a 	.word	0x2000047a
 80028e0:	20000468 	.word	0x20000468

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <Error_Handler+0x8>

080028f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	4b10      	ldr	r3, [pc, #64]	@ (800293c <HAL_MspInit+0x4c>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	4a0f      	ldr	r2, [pc, #60]	@ (800293c <HAL_MspInit+0x4c>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002904:	6453      	str	r3, [r2, #68]	@ 0x44
 8002906:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <HAL_MspInit+0x4c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <HAL_MspInit+0x4c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	4a08      	ldr	r2, [pc, #32]	@ (800293c <HAL_MspInit+0x4c>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	@ 0x40
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_MspInit+0x4c>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800292e:	2007      	movs	r0, #7
 8002930:	f000 fde8 	bl	8003504 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <HAL_ADC_MspInit+0x7c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d127      	bne.n	80029b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <HAL_ADC_MspInit+0x80>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	4a15      	ldr	r2, [pc, #84]	@ (80029c0 <HAL_ADC_MspInit+0x80>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002970:	6453      	str	r3, [r2, #68]	@ 0x44
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <HAL_ADC_MspInit+0x80>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <HAL_ADC_MspInit+0x80>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a0e      	ldr	r2, [pc, #56]	@ (80029c0 <HAL_ADC_MspInit+0x80>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <HAL_ADC_MspInit+0x80>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800299a:	2301      	movs	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800299e:	2303      	movs	r3, #3
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <HAL_ADC_MspInit+0x84>)
 80029ae:	f000 ffdd 	bl	800396c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029b2:	bf00      	nop
 80029b4:	3728      	adds	r7, #40	@ 0x28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40012000 	.word	0x40012000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020000 	.word	0x40020000

080029c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a33      	ldr	r2, [pc, #204]	@ (8002aa4 <HAL_TIM_Base_MspInit+0xdc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	4b32      	ldr	r3, [pc, #200]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	4a31      	ldr	r2, [pc, #196]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ea:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80029f6:	e04e      	b.n	8002a96 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	4b28      	ldr	r3, [pc, #160]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	4a27      	ldr	r2, [pc, #156]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a12:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
}
 8002a1e:	e03a      	b.n	8002a96 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a21      	ldr	r2, [pc, #132]	@ (8002aac <HAL_TIM_Base_MspInit+0xe4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10e      	bne.n	8002a48 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
}
 8002a46:	e026      	b.n	8002a96 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	@ (8002ab0 <HAL_TIM_Base_MspInit+0xe8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
}
 8002a6e:	e012      	b.n	8002a96 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab4 <HAL_TIM_Base_MspInit+0xec>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10d      	bne.n	8002a96 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	4a09      	ldr	r2, [pc, #36]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a84:	f043 0308 	orr.w	r3, r3, #8
 8002a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xe0>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	bf00      	nop
 8002a98:	3724      	adds	r7, #36	@ 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00

08002ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	@ 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a36      	ldr	r2, [pc, #216]	@ (8002bb0 <HAL_TIM_MspPostInit+0xf8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d11f      	bne.n	8002b1a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	4b35      	ldr	r3, [pc, #212]	@ (8002bb4 <HAL_TIM_MspPostInit+0xfc>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	4a34      	ldr	r2, [pc, #208]	@ (8002bb4 <HAL_TIM_MspPostInit+0xfc>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aea:	4b32      	ldr	r3, [pc, #200]	@ (8002bb4 <HAL_TIM_MspPostInit+0xfc>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002af6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	4829      	ldr	r0, [pc, #164]	@ (8002bb8 <HAL_TIM_MspPostInit+0x100>)
 8002b14:	f000 ff2a 	bl	800396c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b18:	e046      	b.n	8002ba8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a27      	ldr	r2, [pc, #156]	@ (8002bbc <HAL_TIM_MspPostInit+0x104>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d11e      	bne.n	8002b62 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <HAL_TIM_MspPostInit+0xfc>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	4a21      	ldr	r2, [pc, #132]	@ (8002bb4 <HAL_TIM_MspPostInit+0xfc>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b34:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <HAL_TIM_MspPostInit+0xfc>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b40:	2340      	movs	r3, #64	@ 0x40
 8002b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b50:	2302      	movs	r3, #2
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4817      	ldr	r0, [pc, #92]	@ (8002bb8 <HAL_TIM_MspPostInit+0x100>)
 8002b5c:	f000 ff06 	bl	800396c <HAL_GPIO_Init>
}
 8002b60:	e022      	b.n	8002ba8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a16      	ldr	r2, [pc, #88]	@ (8002bc0 <HAL_TIM_MspPostInit+0x108>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d11d      	bne.n	8002ba8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <HAL_TIM_MspPostInit+0xfc>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb4 <HAL_TIM_MspPostInit+0xfc>)
 8002b76:	f043 0302 	orr.w	r3, r3, #2
 8002b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <HAL_TIM_MspPostInit+0xfc>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4808      	ldr	r0, [pc, #32]	@ (8002bc4 <HAL_TIM_MspPostInit+0x10c>)
 8002ba4:	f000 fee2 	bl	800396c <HAL_GPIO_Init>
}
 8002ba8:	bf00      	nop
 8002baa:	3728      	adds	r7, #40	@ 0x28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40000800 	.word	0x40000800
 8002bc4:	40020400 	.word	0x40020400

08002bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a25      	ldr	r2, [pc, #148]	@ (8002c7c <HAL_UART_MspInit+0xb4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d143      	bne.n	8002c72 <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <HAL_UART_MspInit+0xb8>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a23      	ldr	r2, [pc, #140]	@ (8002c80 <HAL_UART_MspInit+0xb8>)
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b21      	ldr	r3, [pc, #132]	@ (8002c80 <HAL_UART_MspInit+0xb8>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <HAL_UART_MspInit+0xb8>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <HAL_UART_MspInit+0xb8>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <HAL_UART_MspInit+0xb8>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c22:	2302      	movs	r3, #2
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c32:	2307      	movs	r3, #7
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4811      	ldr	r0, [pc, #68]	@ (8002c84 <HAL_UART_MspInit+0xbc>)
 8002c3e:	f000 fe95 	bl	800396c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c42:	230c      	movs	r3, #12
 8002c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c52:	2307      	movs	r3, #7
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4809      	ldr	r0, [pc, #36]	@ (8002c84 <HAL_UART_MspInit+0xbc>)
 8002c5e:	f000 fe85 	bl	800396c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	2026      	movs	r0, #38	@ 0x26
 8002c68:	f000 fc57 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c6c:	2026      	movs	r0, #38	@ 0x26
 8002c6e:	f000 fc70 	bl	8003552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c72:	bf00      	nop
 8002c74:	3728      	adds	r7, #40	@ 0x28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40004400 	.word	0x40004400
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020000 	.word	0x40020000

08002c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <NMI_Handler+0x4>

08002c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <HardFault_Handler+0x4>

08002c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <MemManage_Handler+0x4>

08002ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <BusFault_Handler+0x4>

08002ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <UsageFault_Handler+0x4>

08002cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cde:	f000 f89b 	bl	8002e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cec:	4802      	ldr	r0, [pc, #8]	@ (8002cf8 <USART2_IRQHandler+0x10>)
 8002cee:	f002 fd05 	bl	80056fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000023c 	.word	0x2000023c

08002cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <SystemInit+0x20>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	4a05      	ldr	r2, [pc, #20]	@ (8002d1c <SystemInit+0x20>)
 8002d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d24:	f7ff ffea 	bl	8002cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d28:	480c      	ldr	r0, [pc, #48]	@ (8002d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d2a:	490d      	ldr	r1, [pc, #52]	@ (8002d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d40:	4c0a      	ldr	r4, [pc, #40]	@ (8002d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f003 fc39 	bl	80065c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d52:	f7ff f8f3 	bl	8001f3c <main>
  bx  lr    
 8002d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d64:	08008cc0 	.word	0x08008cc0
  ldr r2, =_sbss
 8002d68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d6c:	200005b8 	.word	0x200005b8

08002d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d70:	e7fe      	b.n	8002d70 <ADC_IRQHandler>
	...

08002d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <HAL_Init+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <HAL_Init+0x40>)
 8002d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <HAL_Init+0x40>)
 8002d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d90:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a07      	ldr	r2, [pc, #28]	@ (8002db4 <HAL_Init+0x40>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	f000 fbb1 	bl	8003504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f000 f808 	bl	8002db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da8:	f7ff fda2 	bl	80028f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023c00 	.word	0x40023c00

08002db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc0:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_InitTick+0x54>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <HAL_InitTick+0x58>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fbc9 	bl	800356e <HAL_SYSTICK_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00e      	b.n	8002e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	d80a      	bhi.n	8002e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dec:	2200      	movs	r2, #0
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	f000 fb91 	bl	800351a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df8:	4a06      	ldr	r2, [pc, #24]	@ (8002e14 <HAL_InitTick+0x5c>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20000008 	.word	0x20000008
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_IncTick+0x20>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000008 	.word	0x20000008
 8002e3c:	2000047c 	.word	0x2000047c

08002e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_GetTick+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	2000047c 	.word	0x2000047c

08002e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff ffee 	bl	8002e40 <HAL_GetTick>
 8002e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d005      	beq.n	8002e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_Delay+0x44>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e7e:	bf00      	nop
 8002e80:	f7ff ffde 	bl	8002e40 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8f7      	bhi.n	8002e80 <HAL_Delay+0x28>
  {
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000008 	.word	0x20000008

08002ea0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e033      	b.n	8002f1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fd3e 	bl	8002940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ee6:	f023 0302 	bic.w	r3, r3, #2
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f93a 	bl	800316c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f0e:	e001      	b.n	8002f14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x1c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e105      	b.n	8003150 <HAL_ADC_ConfigChannel+0x228>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	d925      	bls.n	8002fa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68d9      	ldr	r1, [r3, #12]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	3b1e      	subs	r3, #30
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43da      	mvns	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	400a      	ands	r2, r1
 8002f78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68d9      	ldr	r1, [r3, #12]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4403      	add	r3, r0
 8002f92:	3b1e      	subs	r3, #30
 8002f94:	409a      	lsls	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	e022      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6919      	ldr	r1, [r3, #16]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4403      	add	r3, r0
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d824      	bhi.n	8003038 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b05      	subs	r3, #5
 8003000:	221f      	movs	r2, #31
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	400a      	ands	r2, r1
 800300e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	3b05      	subs	r3, #5
 800302a:	fa00 f203 	lsl.w	r2, r0, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	635a      	str	r2, [r3, #52]	@ 0x34
 8003036:	e04c      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d824      	bhi.n	800308a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	3b23      	subs	r3, #35	@ 0x23
 8003052:	221f      	movs	r2, #31
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43da      	mvns	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	400a      	ands	r2, r1
 8003060:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	4618      	mov	r0, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	3b23      	subs	r3, #35	@ 0x23
 800307c:	fa00 f203 	lsl.w	r2, r0, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
 8003088:	e023      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	3b41      	subs	r3, #65	@ 0x41
 800309c:	221f      	movs	r2, #31
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	400a      	ands	r2, r1
 80030aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	3b41      	subs	r3, #65	@ 0x41
 80030c6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d2:	4b22      	ldr	r3, [pc, #136]	@ (800315c <HAL_ADC_ConfigChannel+0x234>)
 80030d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_ADC_ConfigChannel+0x238>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d109      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x1cc>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b12      	cmp	r3, #18
 80030e6:	d105      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <HAL_ADC_ConfigChannel+0x238>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d123      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x21e>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b10      	cmp	r3, #16
 8003104:	d003      	beq.n	800310e <HAL_ADC_ConfigChannel+0x1e6>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b11      	cmp	r3, #17
 800310c:	d11b      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b10      	cmp	r3, #16
 8003120:	d111      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <HAL_ADC_ConfigChannel+0x23c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a10      	ldr	r2, [pc, #64]	@ (8003168 <HAL_ADC_ConfigChannel+0x240>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	0c9a      	lsrs	r2, r3, #18
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003138:	e002      	b.n	8003140 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3b01      	subs	r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f9      	bne.n	800313a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40012300 	.word	0x40012300
 8003160:	40012000 	.word	0x40012000
 8003164:	20000000 	.word	0x20000000
 8003168:	431bde83 	.word	0x431bde83

0800316c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003174:	4b79      	ldr	r3, [pc, #484]	@ (800335c <ADC_Init+0x1f0>)
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	021a      	lsls	r2, r3, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fe:	4a58      	ldr	r2, [pc, #352]	@ (8003360 <ADC_Init+0x1f4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d022      	beq.n	800324a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003212:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	e00f      	b.n	800326a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003268:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0202 	bic.w	r2, r2, #2
 8003278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7e1b      	ldrb	r3, [r3, #24]
 8003284:	005a      	lsls	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01b      	beq.n	80032d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	3b01      	subs	r3, #1
 80032c4:	035a      	lsls	r2, r3, #13
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	e007      	b.n	80032e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	051a      	lsls	r2, r3, #20
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003314:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003322:	025a      	lsls	r2, r3, #9
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800333a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	029a      	lsls	r2, r3, #10
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40012300 	.word	0x40012300
 8003360:	0f000001 	.word	0x0f000001

08003364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003380:	4013      	ands	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800338c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003396:	4a04      	ldr	r2, [pc, #16]	@ (80033a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	60d3      	str	r3, [r2, #12]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b0:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <__NVIC_GetPriorityGrouping+0x18>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	f003 0307 	and.w	r3, r3, #7
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	db0b      	blt.n	80033f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	4907      	ldr	r1, [pc, #28]	@ (8003400 <__NVIC_EnableIRQ+0x38>)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	2001      	movs	r0, #1
 80033ea:	fa00 f202 	lsl.w	r2, r0, r2
 80033ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000e100 	.word	0xe000e100

08003404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	2b00      	cmp	r3, #0
 8003416:	db0a      	blt.n	800342e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	490c      	ldr	r1, [pc, #48]	@ (8003450 <__NVIC_SetPriority+0x4c>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	0112      	lsls	r2, r2, #4
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	440b      	add	r3, r1
 8003428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800342c:	e00a      	b.n	8003444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4908      	ldr	r1, [pc, #32]	@ (8003454 <__NVIC_SetPriority+0x50>)
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	3b04      	subs	r3, #4
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	440b      	add	r3, r1
 8003442:	761a      	strb	r2, [r3, #24]
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000e100 	.word	0xe000e100
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	@ 0x24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f1c3 0307 	rsb	r3, r3, #7
 8003472:	2b04      	cmp	r3, #4
 8003474:	bf28      	it	cs
 8003476:	2304      	movcs	r3, #4
 8003478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3304      	adds	r3, #4
 800347e:	2b06      	cmp	r3, #6
 8003480:	d902      	bls.n	8003488 <NVIC_EncodePriority+0x30>
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3b03      	subs	r3, #3
 8003486:	e000      	b.n	800348a <NVIC_EncodePriority+0x32>
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	f04f 32ff 	mov.w	r2, #4294967295
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	401a      	ands	r2, r3
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a0:	f04f 31ff 	mov.w	r1, #4294967295
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	43d9      	mvns	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b0:	4313      	orrs	r3, r2
         );
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3724      	adds	r7, #36	@ 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d0:	d301      	bcc.n	80034d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d2:	2301      	movs	r3, #1
 80034d4:	e00f      	b.n	80034f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <SysTick_Config+0x40>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034de:	210f      	movs	r1, #15
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	f7ff ff8e 	bl	8003404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <SysTick_Config+0x40>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ee:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <SysTick_Config+0x40>)
 80034f0:	2207      	movs	r2, #7
 80034f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	e000e010 	.word	0xe000e010

08003504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff29 	bl	8003364 <__NVIC_SetPriorityGrouping>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800352c:	f7ff ff3e 	bl	80033ac <__NVIC_GetPriorityGrouping>
 8003530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	6978      	ldr	r0, [r7, #20]
 8003538:	f7ff ff8e 	bl	8003458 <NVIC_EncodePriority>
 800353c:	4602      	mov	r2, r0
 800353e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff5d 	bl	8003404 <__NVIC_SetPriority>
}
 800354a:	bf00      	nop
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff31 	bl	80033c8 <__NVIC_EnableIRQ>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ffa2 	bl	80034c0 <SysTick_Config>
 800357c:	4603      	mov	r3, r0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7ff fc54 	bl	8002e40 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e099      	b.n	80036d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c4:	e00f      	b.n	80035e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c6:	f7ff fc3b 	bl	8002e40 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d908      	bls.n	80035e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e078      	b.n	80036d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e8      	bne.n	80035c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4b38      	ldr	r3, [pc, #224]	@ (80036e0 <HAL_DMA_Init+0x158>)
 8003600:	4013      	ands	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003612:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	2b04      	cmp	r3, #4
 800363e:	d107      	bne.n	8003650 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	4313      	orrs	r3, r2
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0307 	bic.w	r3, r3, #7
 8003666:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	2b04      	cmp	r3, #4
 8003678:	d117      	bne.n	80036aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8f1 	bl	8003874 <DMA_CheckFifoParam>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2240      	movs	r2, #64	@ 0x40
 800369c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036a6:	2301      	movs	r3, #1
 80036a8:	e016      	b.n	80036d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f8a8 	bl	8003808 <DMA_CalcBaseAndBitshift>
 80036b8:	4603      	mov	r3, r0
 80036ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	223f      	movs	r2, #63	@ 0x3f
 80036c2:	409a      	lsls	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	f010803f 	.word	0xf010803f

080036e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036f2:	f7ff fba5 	bl	8002e40 <HAL_GetTick>
 80036f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d008      	beq.n	8003716 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2280      	movs	r2, #128	@ 0x80
 8003708:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e052      	b.n	80037bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0216 	bic.w	r2, r2, #22
 8003724:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003734:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <HAL_DMA_Abort+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0208 	bic.w	r2, r2, #8
 8003754:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003766:	e013      	b.n	8003790 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003768:	f7ff fb6a 	bl	8002e40 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b05      	cmp	r3, #5
 8003774:	d90c      	bls.n	8003790 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2203      	movs	r2, #3
 8003780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e015      	b.n	80037bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e4      	bne.n	8003768 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a2:	223f      	movs	r2, #63	@ 0x3f
 80037a4:	409a      	lsls	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d004      	beq.n	80037e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2280      	movs	r2, #128	@ 0x80
 80037dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e00c      	b.n	80037fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2205      	movs	r2, #5
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	3b10      	subs	r3, #16
 8003818:	4a14      	ldr	r2, [pc, #80]	@ (800386c <DMA_CalcBaseAndBitshift+0x64>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003822:	4a13      	ldr	r2, [pc, #76]	@ (8003870 <DMA_CalcBaseAndBitshift+0x68>)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d909      	bls.n	800384a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	1d1a      	adds	r2, r3, #4
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	659a      	str	r2, [r3, #88]	@ 0x58
 8003848:	e007      	b.n	800385a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	aaaaaaab 	.word	0xaaaaaaab
 8003870:	08008a30 	.word	0x08008a30

08003874 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11f      	bne.n	80038ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d856      	bhi.n	8003942 <DMA_CheckFifoParam+0xce>
 8003894:	a201      	add	r2, pc, #4	@ (adr r2, 800389c <DMA_CheckFifoParam+0x28>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	080038bf 	.word	0x080038bf
 80038a4:	080038ad 	.word	0x080038ad
 80038a8:	08003943 	.word	0x08003943
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d046      	beq.n	8003946 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038bc:	e043      	b.n	8003946 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038c6:	d140      	bne.n	800394a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038cc:	e03d      	b.n	800394a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d6:	d121      	bne.n	800391c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d837      	bhi.n	800394e <DMA_CheckFifoParam+0xda>
 80038de:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <DMA_CheckFifoParam+0x70>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	080038fb 	.word	0x080038fb
 80038ec:	080038f5 	.word	0x080038f5
 80038f0:	0800390d 	.word	0x0800390d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e030      	b.n	800395c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d025      	beq.n	8003952 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390a:	e022      	b.n	8003952 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003914:	d11f      	bne.n	8003956 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800391a:	e01c      	b.n	8003956 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d903      	bls.n	800392a <DMA_CheckFifoParam+0xb6>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d003      	beq.n	8003930 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003928:	e018      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
      break;
 800392e:	e015      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      break;
 8003940:	e00b      	b.n	800395a <DMA_CheckFifoParam+0xe6>
      break;
 8003942:	bf00      	nop
 8003944:	e00a      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 8003946:	bf00      	nop
 8003948:	e008      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 800394a:	bf00      	nop
 800394c:	e006      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 800394e:	bf00      	nop
 8003950:	e004      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 8003952:	bf00      	nop
 8003954:	e002      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;   
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 800395a:	bf00      	nop
    }
  } 
  
  return status; 
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop

0800396c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	@ 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	e159      	b.n	8003c3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003988:	2201      	movs	r2, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	f040 8148 	bne.w	8003c36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d005      	beq.n	80039be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d130      	bne.n	8003a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	2203      	movs	r2, #3
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f4:	2201      	movs	r2, #1
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 0201 	and.w	r2, r3, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d017      	beq.n	8003a5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d123      	bne.n	8003ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	08da      	lsrs	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3208      	adds	r2, #8
 8003a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	220f      	movs	r2, #15
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	08da      	lsrs	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3208      	adds	r2, #8
 8003aaa:	69b9      	ldr	r1, [r7, #24]
 8003aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0203 	and.w	r2, r3, #3
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80a2 	beq.w	8003c36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	4b57      	ldr	r3, [pc, #348]	@ (8003c54 <HAL_GPIO_Init+0x2e8>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	4a56      	ldr	r2, [pc, #344]	@ (8003c54 <HAL_GPIO_Init+0x2e8>)
 8003afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b02:	4b54      	ldr	r3, [pc, #336]	@ (8003c54 <HAL_GPIO_Init+0x2e8>)
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b0e:	4a52      	ldr	r2, [pc, #328]	@ (8003c58 <HAL_GPIO_Init+0x2ec>)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	3302      	adds	r3, #2
 8003b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	220f      	movs	r2, #15
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a49      	ldr	r2, [pc, #292]	@ (8003c5c <HAL_GPIO_Init+0x2f0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d019      	beq.n	8003b6e <HAL_GPIO_Init+0x202>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a48      	ldr	r2, [pc, #288]	@ (8003c60 <HAL_GPIO_Init+0x2f4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0x1fe>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a47      	ldr	r2, [pc, #284]	@ (8003c64 <HAL_GPIO_Init+0x2f8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00d      	beq.n	8003b66 <HAL_GPIO_Init+0x1fa>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a46      	ldr	r2, [pc, #280]	@ (8003c68 <HAL_GPIO_Init+0x2fc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <HAL_GPIO_Init+0x1f6>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a45      	ldr	r2, [pc, #276]	@ (8003c6c <HAL_GPIO_Init+0x300>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_GPIO_Init+0x1f2>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e008      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b5e:	2307      	movs	r3, #7
 8003b60:	e006      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b62:	2303      	movs	r3, #3
 8003b64:	e004      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e002      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	f002 0203 	and.w	r2, r2, #3
 8003b76:	0092      	lsls	r2, r2, #2
 8003b78:	4093      	lsls	r3, r2
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b80:	4935      	ldr	r1, [pc, #212]	@ (8003c58 <HAL_GPIO_Init+0x2ec>)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	3302      	adds	r3, #2
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b8e:	4b38      	ldr	r3, [pc, #224]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bdc:	4a24      	ldr	r2, [pc, #144]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003be2:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c06:	4a1a      	ldr	r2, [pc, #104]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c0c:	4b18      	ldr	r3, [pc, #96]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c30:	4a0f      	ldr	r2, [pc, #60]	@ (8003c70 <HAL_GPIO_Init+0x304>)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b0f      	cmp	r3, #15
 8003c40:	f67f aea2 	bls.w	8003988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3724      	adds	r7, #36	@ 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40013800 	.word	0x40013800
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	40020400 	.word	0x40020400
 8003c64:	40020800 	.word	0x40020800
 8003c68:	40020c00 	.word	0x40020c00
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40013c00 	.word	0x40013c00

08003c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
 8003c80:	4613      	mov	r3, r2
 8003c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c84:	787b      	ldrb	r3, [r7, #1]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8a:	887a      	ldrh	r2, [r7, #2]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c90:	e003      	b.n	8003c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	041a      	lsls	r2, r3, #16
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	619a      	str	r2, [r3, #24]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e267      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d075      	beq.n	8003db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc6:	4b88      	ldr	r3, [pc, #544]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d00c      	beq.n	8003cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd2:	4b85      	ldr	r3, [pc, #532]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d112      	bne.n	8003d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cde:	4b82      	ldr	r3, [pc, #520]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	4b7e      	ldr	r3, [pc, #504]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d05b      	beq.n	8003db0 <HAL_RCC_OscConfig+0x108>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d157      	bne.n	8003db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e242      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d0c:	d106      	bne.n	8003d1c <HAL_RCC_OscConfig+0x74>
 8003d0e:	4b76      	ldr	r3, [pc, #472]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a75      	ldr	r2, [pc, #468]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e01d      	b.n	8003d58 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x98>
 8003d26:	4b70      	ldr	r3, [pc, #448]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	4b6d      	ldr	r3, [pc, #436]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6c      	ldr	r2, [pc, #432]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0xb0>
 8003d40:	4b69      	ldr	r3, [pc, #420]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a68      	ldr	r2, [pc, #416]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b66      	ldr	r3, [pc, #408]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a65      	ldr	r2, [pc, #404]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d013      	beq.n	8003d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7ff f86e 	bl	8002e40 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d68:	f7ff f86a 	bl	8002e40 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	@ 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e207      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0xc0>
 8003d86:	e014      	b.n	8003db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7ff f85a 	bl	8002e40 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d90:	f7ff f856 	bl	8002e40 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	@ 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e1f3      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da2:	4b51      	ldr	r3, [pc, #324]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0xe8>
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d063      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dca:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d11c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b44      	ldr	r3, [pc, #272]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d116      	bne.n	8003e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	4b41      	ldr	r3, [pc, #260]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_RCC_OscConfig+0x152>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e1c7      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4937      	ldr	r1, [pc, #220]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	e03a      	b.n	8003e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d020      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e18:	4b34      	ldr	r3, [pc, #208]	@ (8003eec <HAL_RCC_OscConfig+0x244>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7ff f80f 	bl	8002e40 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e26:	f7ff f80b 	bl	8002e40 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e1a8      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e44:	4b28      	ldr	r3, [pc, #160]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4925      	ldr	r1, [pc, #148]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	600b      	str	r3, [r1, #0]
 8003e58:	e015      	b.n	8003e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5a:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <HAL_RCC_OscConfig+0x244>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe ffee 	bl	8002e40 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e68:	f7fe ffea 	bl	8002e40 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e187      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d036      	beq.n	8003f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d016      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <HAL_RCC_OscConfig+0x248>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fe ffce 	bl	8002e40 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea8:	f7fe ffca 	bl	8002e40 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e167      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x200>
 8003ec6:	e01b      	b.n	8003f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec8:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <HAL_RCC_OscConfig+0x248>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fe ffb7 	bl	8002e40 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	e00e      	b.n	8003ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed6:	f7fe ffb3 	bl	8002e40 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d907      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e150      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	42470000 	.word	0x42470000
 8003ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef4:	4b88      	ldr	r3, [pc, #544]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1ea      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8097 	beq.w	800403c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f12:	4b81      	ldr	r3, [pc, #516]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	4b7d      	ldr	r3, [pc, #500]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	4a7c      	ldr	r2, [pc, #496]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3e:	4b77      	ldr	r3, [pc, #476]	@ (800411c <HAL_RCC_OscConfig+0x474>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d118      	bne.n	8003f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4a:	4b74      	ldr	r3, [pc, #464]	@ (800411c <HAL_RCC_OscConfig+0x474>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a73      	ldr	r2, [pc, #460]	@ (800411c <HAL_RCC_OscConfig+0x474>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f56:	f7fe ff73 	bl	8002e40 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5e:	f7fe ff6f 	bl	8002e40 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e10c      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f70:	4b6a      	ldr	r3, [pc, #424]	@ (800411c <HAL_RCC_OscConfig+0x474>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x2ea>
 8003f84:	4b64      	ldr	r3, [pc, #400]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f88:	4a63      	ldr	r2, [pc, #396]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f90:	e01c      	b.n	8003fcc <HAL_RCC_OscConfig+0x324>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x30c>
 8003f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	f043 0304 	orr.w	r3, r3, #4
 8003fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa6:	4b5c      	ldr	r3, [pc, #368]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	4a5b      	ldr	r2, [pc, #364]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0x324>
 8003fb4:	4b58      	ldr	r3, [pc, #352]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb8:	4a57      	ldr	r2, [pc, #348]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc0:	4b55      	ldr	r3, [pc, #340]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc4:	4a54      	ldr	r2, [pc, #336]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	f023 0304 	bic.w	r3, r3, #4
 8003fca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fe ff34 	bl	8002e40 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fe ff30 	bl	8002e40 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0cb      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	4b49      	ldr	r3, [pc, #292]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0ee      	beq.n	8003fdc <HAL_RCC_OscConfig+0x334>
 8003ffe:	e014      	b.n	800402a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004000:	f7fe ff1e 	bl	8002e40 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004006:	e00a      	b.n	800401e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fe ff1a 	bl	8002e40 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0b5      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401e:	4b3e      	ldr	r3, [pc, #248]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ee      	bne.n	8004008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004030:	4b39      	ldr	r3, [pc, #228]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	4a38      	ldr	r2, [pc, #224]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8004036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800403a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a1 	beq.w	8004188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004046:	4b34      	ldr	r3, [pc, #208]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b08      	cmp	r3, #8
 8004050:	d05c      	beq.n	800410c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d141      	bne.n	80040de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405a:	4b31      	ldr	r3, [pc, #196]	@ (8004120 <HAL_RCC_OscConfig+0x478>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe feee 	bl	8002e40 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004068:	f7fe feea 	bl	8002e40 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e087      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	4b27      	ldr	r3, [pc, #156]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	3b01      	subs	r3, #1
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	061b      	lsls	r3, r3, #24
 80040aa:	491b      	ldr	r1, [pc, #108]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <HAL_RCC_OscConfig+0x478>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fe fec3 	bl	8002e40 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040be:	f7fe febf 	bl	8002e40 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e05c      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x416>
 80040dc:	e054      	b.n	8004188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	4b10      	ldr	r3, [pc, #64]	@ (8004120 <HAL_RCC_OscConfig+0x478>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fe feac 	bl	8002e40 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fe fea8 	bl	8002e40 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e045      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_RCC_OscConfig+0x470>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x444>
 800410a:	e03d      	b.n	8004188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d107      	bne.n	8004124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e038      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
 8004118:	40023800 	.word	0x40023800
 800411c:	40007000 	.word	0x40007000
 8004120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004124:	4b1b      	ldr	r3, [pc, #108]	@ (8004194 <HAL_RCC_OscConfig+0x4ec>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d028      	beq.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d121      	bne.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d11a      	bne.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800415a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800415c:	4293      	cmp	r3, r2
 800415e:	d111      	bne.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	3b01      	subs	r3, #1
 800416e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800

08004198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0cc      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ac:	4b68      	ldr	r3, [pc, #416]	@ (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d90c      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b65      	ldr	r3, [pc, #404]	@ (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b63      	ldr	r3, [pc, #396]	@ (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0b8      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041ec:	4b59      	ldr	r3, [pc, #356]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a58      	ldr	r2, [pc, #352]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004204:	4b53      	ldr	r3, [pc, #332]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a52      	ldr	r2, [pc, #328]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800420e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004210:	4b50      	ldr	r3, [pc, #320]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	494d      	ldr	r1, [pc, #308]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d044      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b47      	ldr	r3, [pc, #284]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d119      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e07f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d003      	beq.n	8004256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004252:	2b03      	cmp	r3, #3
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004256:	4b3f      	ldr	r3, [pc, #252]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004266:	4b3b      	ldr	r3, [pc, #236]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e067      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004276:	4b37      	ldr	r3, [pc, #220]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f023 0203 	bic.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4934      	ldr	r1, [pc, #208]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004288:	f7fe fdda 	bl	8002e40 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004290:	f7fe fdd6 	bl	8002e40 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e04f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 020c 	and.w	r2, r3, #12
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1eb      	bne.n	8004290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b8:	4b25      	ldr	r3, [pc, #148]	@ (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d20c      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b22      	ldr	r3, [pc, #136]	@ (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e032      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4916      	ldr	r1, [pc, #88]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	490e      	ldr	r1, [pc, #56]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431e:	f000 f821 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 8004322:	4602      	mov	r2, r0
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	490a      	ldr	r1, [pc, #40]	@ (8004358 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	5ccb      	ldrb	r3, [r1, r3]
 8004332:	fa22 f303 	lsr.w	r3, r2, r3
 8004336:	4a09      	ldr	r2, [pc, #36]	@ (800435c <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800433a:	4b09      	ldr	r3, [pc, #36]	@ (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fd3a 	bl	8002db8 <HAL_InitTick>

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40023c00 	.word	0x40023c00
 8004354:	40023800 	.word	0x40023800
 8004358:	08008a18 	.word	0x08008a18
 800435c:	20000000 	.word	0x20000000
 8004360:	20000004 	.word	0x20000004

08004364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004368:	b094      	sub	sp, #80	@ 0x50
 800436a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004370:	2300      	movs	r3, #0
 8004372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004374:	2300      	movs	r3, #0
 8004376:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800437c:	4b79      	ldr	r3, [pc, #484]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d00d      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004388:	2b08      	cmp	r3, #8
 800438a:	f200 80e1 	bhi.w	8004550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x34>
 8004392:	2b04      	cmp	r3, #4
 8004394:	d003      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x3a>
 8004396:	e0db      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b73      	ldr	r3, [pc, #460]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x204>)
 800439a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800439c:	e0db      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439e:	4b73      	ldr	r3, [pc, #460]	@ (800456c <HAL_RCC_GetSysClockFreq+0x208>)
 80043a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043a2:	e0d8      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d063      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	2200      	movs	r2, #0
 80043c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043d6:	4622      	mov	r2, r4
 80043d8:	462b      	mov	r3, r5
 80043da:	f04f 0000 	mov.w	r0, #0
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	0159      	lsls	r1, r3, #5
 80043e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e8:	0150      	lsls	r0, r2, #5
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4621      	mov	r1, r4
 80043f0:	1a51      	subs	r1, r2, r1
 80043f2:	6139      	str	r1, [r7, #16]
 80043f4:	4629      	mov	r1, r5
 80043f6:	eb63 0301 	sbc.w	r3, r3, r1
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004408:	4659      	mov	r1, fp
 800440a:	018b      	lsls	r3, r1, #6
 800440c:	4651      	mov	r1, sl
 800440e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004412:	4651      	mov	r1, sl
 8004414:	018a      	lsls	r2, r1, #6
 8004416:	4651      	mov	r1, sl
 8004418:	ebb2 0801 	subs.w	r8, r2, r1
 800441c:	4659      	mov	r1, fp
 800441e:	eb63 0901 	sbc.w	r9, r3, r1
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800442e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004436:	4690      	mov	r8, r2
 8004438:	4699      	mov	r9, r3
 800443a:	4623      	mov	r3, r4
 800443c:	eb18 0303 	adds.w	r3, r8, r3
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	462b      	mov	r3, r5
 8004444:	eb49 0303 	adc.w	r3, r9, r3
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004456:	4629      	mov	r1, r5
 8004458:	024b      	lsls	r3, r1, #9
 800445a:	4621      	mov	r1, r4
 800445c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004460:	4621      	mov	r1, r4
 8004462:	024a      	lsls	r2, r1, #9
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800446a:	2200      	movs	r2, #0
 800446c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800446e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004474:	f7fc fb94 	bl	8000ba0 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4613      	mov	r3, r2
 800447e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004480:	e058      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004482:	4b38      	ldr	r3, [pc, #224]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	2200      	movs	r2, #0
 800448a:	4618      	mov	r0, r3
 800448c:	4611      	mov	r1, r2
 800448e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
 8004498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800449c:	4642      	mov	r2, r8
 800449e:	464b      	mov	r3, r9
 80044a0:	f04f 0000 	mov.w	r0, #0
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	0159      	lsls	r1, r3, #5
 80044aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ae:	0150      	lsls	r0, r2, #5
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4641      	mov	r1, r8
 80044b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044d4:	ebb2 040a 	subs.w	r4, r2, sl
 80044d8:	eb63 050b 	sbc.w	r5, r3, fp
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	00eb      	lsls	r3, r5, #3
 80044e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ea:	00e2      	lsls	r2, r4, #3
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	4643      	mov	r3, r8
 80044f2:	18e3      	adds	r3, r4, r3
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	464b      	mov	r3, r9
 80044f8:	eb45 0303 	adc.w	r3, r5, r3
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800450a:	4629      	mov	r1, r5
 800450c:	028b      	lsls	r3, r1, #10
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004514:	4621      	mov	r1, r4
 8004516:	028a      	lsls	r2, r1, #10
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451e:	2200      	movs	r2, #0
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	61fa      	str	r2, [r7, #28]
 8004524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004528:	f7fc fb3a 	bl	8000ba0 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	3301      	adds	r3, #1
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004544:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800454e:	e002      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004550:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x204>)
 8004552:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004558:	4618      	mov	r0, r3
 800455a:	3750      	adds	r7, #80	@ 0x50
 800455c:	46bd      	mov	sp, r7
 800455e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800
 8004568:	00f42400 	.word	0x00f42400
 800456c:	007a1200 	.word	0x007a1200

08004570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004574:	4b03      	ldr	r3, [pc, #12]	@ (8004584 <HAL_RCC_GetHCLKFreq+0x14>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000000 	.word	0x20000000

08004588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800458c:	f7ff fff0 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	0a9b      	lsrs	r3, r3, #10
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4903      	ldr	r1, [pc, #12]	@ (80045ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40023800 	.word	0x40023800
 80045ac:	08008a28 	.word	0x08008a28

080045b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045b4:	f7ff ffdc 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	0b5b      	lsrs	r3, r3, #13
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4903      	ldr	r1, [pc, #12]	@ (80045d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40023800 	.word	0x40023800
 80045d4:	08008a28 	.word	0x08008a28

080045d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e041      	b.n	800466e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fe f9e2 	bl	80029c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f000 fbd8 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e044      	b.n	800471a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004728 <HAL_TIM_Base_Start_IT+0xb0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d018      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x6c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ba:	d013      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x6c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1a      	ldr	r2, [pc, #104]	@ (800472c <HAL_TIM_Base_Start_IT+0xb4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00e      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x6c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <HAL_TIM_Base_Start_IT+0xb8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d009      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x6c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a17      	ldr	r2, [pc, #92]	@ (8004734 <HAL_TIM_Base_Start_IT+0xbc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x6c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a16      	ldr	r2, [pc, #88]	@ (8004738 <HAL_TIM_Base_Start_IT+0xc0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d111      	bne.n	8004708 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b06      	cmp	r3, #6
 80046f4:	d010      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004706:	e007      	b.n	8004718 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40010000 	.word	0x40010000
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40014000 	.word	0x40014000

0800473c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e041      	b.n	80047d2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f839 	bl	80047da <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f000 fb26 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e041      	b.n	8004884 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f839 	bl	800488c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f000 facd 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <HAL_TIM_PWM_Start+0x24>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e022      	b.n	800490a <HAL_TIM_PWM_Start+0x6a>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d109      	bne.n	80048de <HAL_TIM_PWM_Start+0x3e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	e015      	b.n	800490a <HAL_TIM_PWM_Start+0x6a>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d109      	bne.n	80048f8 <HAL_TIM_PWM_Start+0x58>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e008      	b.n	800490a <HAL_TIM_PWM_Start+0x6a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e068      	b.n	80049e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_TIM_PWM_Start+0x82>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004920:	e013      	b.n	800494a <HAL_TIM_PWM_Start+0xaa>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d104      	bne.n	8004932 <HAL_TIM_PWM_Start+0x92>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004930:	e00b      	b.n	800494a <HAL_TIM_PWM_Start+0xaa>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Start+0xa2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004940:	e003      	b.n	800494a <HAL_TIM_PWM_Start+0xaa>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2201      	movs	r2, #1
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fcec 	bl	8005330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a23      	ldr	r2, [pc, #140]	@ (80049ec <HAL_TIM_PWM_Start+0x14c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d107      	bne.n	8004972 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1d      	ldr	r2, [pc, #116]	@ (80049ec <HAL_TIM_PWM_Start+0x14c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d018      	beq.n	80049ae <HAL_TIM_PWM_Start+0x10e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004984:	d013      	beq.n	80049ae <HAL_TIM_PWM_Start+0x10e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a19      	ldr	r2, [pc, #100]	@ (80049f0 <HAL_TIM_PWM_Start+0x150>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_TIM_PWM_Start+0x10e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a17      	ldr	r2, [pc, #92]	@ (80049f4 <HAL_TIM_PWM_Start+0x154>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_TIM_PWM_Start+0x10e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a16      	ldr	r2, [pc, #88]	@ (80049f8 <HAL_TIM_PWM_Start+0x158>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_TIM_PWM_Start+0x10e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a14      	ldr	r2, [pc, #80]	@ (80049fc <HAL_TIM_PWM_Start+0x15c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d111      	bne.n	80049d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b06      	cmp	r3, #6
 80049be:	d010      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d0:	e007      	b.n	80049e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	40000c00 	.word	0x40000c00
 80049fc:	40014000 	.word	0x40014000

08004a00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e048      	b.n	8004ab0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	d839      	bhi.n	8004aa0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004aa1 	.word	0x08004aa1
 8004a3c:	08004aa1 	.word	0x08004aa1
 8004a40:	08004aa1 	.word	0x08004aa1
 8004a44:	08004a77 	.word	0x08004a77
 8004a48:	08004aa1 	.word	0x08004aa1
 8004a4c:	08004aa1 	.word	0x08004aa1
 8004a50:	08004aa1 	.word	0x08004aa1
 8004a54:	08004a85 	.word	0x08004a85
 8004a58:	08004aa1 	.word	0x08004aa1
 8004a5c:	08004aa1 	.word	0x08004aa1
 8004a60:	08004aa1 	.word	0x08004aa1
 8004a64:	08004a93 	.word	0x08004a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fa38 	bl	8004ee4 <TIM_OC1_SetConfig>
      break;
 8004a74:	e017      	b.n	8004aa6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fa97 	bl	8004fb0 <TIM_OC2_SetConfig>
      break;
 8004a82:	e010      	b.n	8004aa6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fafc 	bl	8005088 <TIM_OC3_SetConfig>
      break;
 8004a90:	e009      	b.n	8004aa6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fb5f 	bl	800515c <TIM_OC4_SetConfig>
      break;
 8004a9e:	e002      	b.n	8004aa6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e0ae      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b0c      	cmp	r3, #12
 8004ae2:	f200 809f 	bhi.w	8004c24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004b21 	.word	0x08004b21
 8004af0:	08004c25 	.word	0x08004c25
 8004af4:	08004c25 	.word	0x08004c25
 8004af8:	08004c25 	.word	0x08004c25
 8004afc:	08004b61 	.word	0x08004b61
 8004b00:	08004c25 	.word	0x08004c25
 8004b04:	08004c25 	.word	0x08004c25
 8004b08:	08004c25 	.word	0x08004c25
 8004b0c:	08004ba3 	.word	0x08004ba3
 8004b10:	08004c25 	.word	0x08004c25
 8004b14:	08004c25 	.word	0x08004c25
 8004b18:	08004c25 	.word	0x08004c25
 8004b1c:	08004be3 	.word	0x08004be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f9dc 	bl	8004ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0208 	orr.w	r2, r2, #8
 8004b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0204 	bic.w	r2, r2, #4
 8004b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6999      	ldr	r1, [r3, #24]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	619a      	str	r2, [r3, #24]
      break;
 8004b5e:	e064      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fa22 	bl	8004fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6999      	ldr	r1, [r3, #24]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	021a      	lsls	r2, r3, #8
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	619a      	str	r2, [r3, #24]
      break;
 8004ba0:	e043      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fa6d 	bl	8005088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0208 	orr.w	r2, r2, #8
 8004bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0204 	bic.w	r2, r2, #4
 8004bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69d9      	ldr	r1, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	61da      	str	r2, [r3, #28]
      break;
 8004be0:	e023      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fab7 	bl	800515c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	021a      	lsls	r2, r3, #8
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	61da      	str	r2, [r3, #28]
      break;
 8004c22:	e002      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
      break;
 8004c28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e0b4      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x186>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c90:	d03e      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0xd4>
 8004c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c96:	f200 8087 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9e:	f000 8086 	beq.w	8004dae <HAL_TIM_ConfigClockSource+0x172>
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca6:	d87f      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b70      	cmp	r3, #112	@ 0x70
 8004caa:	d01a      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8004cac:	2b70      	cmp	r3, #112	@ 0x70
 8004cae:	d87b      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d050      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x11a>
 8004cb4:	2b60      	cmp	r3, #96	@ 0x60
 8004cb6:	d877      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b50      	cmp	r3, #80	@ 0x50
 8004cba:	d03c      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0xfa>
 8004cbc:	2b50      	cmp	r3, #80	@ 0x50
 8004cbe:	d873      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d058      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x13a>
 8004cc4:	2b40      	cmp	r3, #64	@ 0x40
 8004cc6:	d86f      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d064      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ccc:	2b30      	cmp	r3, #48	@ 0x30
 8004cce:	d86b      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d060      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d867      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05c      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d05a      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	e062      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf2:	f000 fafd 	bl	80052f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	609a      	str	r2, [r3, #8]
      break;
 8004d0e:	e04f      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d20:	f000 fae6 	bl	80052f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d32:	609a      	str	r2, [r3, #8]
      break;
 8004d34:	e03c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 fa5a 	bl	80051fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2150      	movs	r1, #80	@ 0x50
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fab3 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 8004d54:	e02c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 fa79 	bl	800525a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2160      	movs	r1, #96	@ 0x60
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 faa3 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 8004d74:	e01c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	461a      	mov	r2, r3
 8004d84:	f000 fa3a 	bl	80051fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2140      	movs	r1, #64	@ 0x40
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fa93 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 8004d94:	e00c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f000 fa8a 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 8004da6:	e003      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dac:	e000      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec8 <TIM_Base_SetConfig+0xfc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a37      	ldr	r2, [pc, #220]	@ (8004ecc <TIM_Base_SetConfig+0x100>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a36      	ldr	r2, [pc, #216]	@ (8004ed0 <TIM_Base_SetConfig+0x104>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a35      	ldr	r2, [pc, #212]	@ (8004ed4 <TIM_Base_SetConfig+0x108>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec8 <TIM_Base_SetConfig+0xfc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01b      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e24:	d017      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a28      	ldr	r2, [pc, #160]	@ (8004ecc <TIM_Base_SetConfig+0x100>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a27      	ldr	r2, [pc, #156]	@ (8004ed0 <TIM_Base_SetConfig+0x104>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a26      	ldr	r2, [pc, #152]	@ (8004ed4 <TIM_Base_SetConfig+0x108>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a25      	ldr	r2, [pc, #148]	@ (8004ed8 <TIM_Base_SetConfig+0x10c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a24      	ldr	r2, [pc, #144]	@ (8004edc <TIM_Base_SetConfig+0x110>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a23      	ldr	r2, [pc, #140]	@ (8004ee0 <TIM_Base_SetConfig+0x114>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec8 <TIM_Base_SetConfig+0xfc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d103      	bne.n	8004e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800

08004ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f023 0201 	bic.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 0302 	bic.w	r3, r3, #2
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10c      	bne.n	8004f5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0308 	bic.w	r3, r3, #8
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a13      	ldr	r2, [pc, #76]	@ (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d111      	bne.n	8004f86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	621a      	str	r2, [r3, #32]
}
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	40010000 	.word	0x40010000

08004fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f023 0210 	bic.w	r2, r3, #16
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0320 	bic.w	r3, r3, #32
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1e      	ldr	r2, [pc, #120]	@ (8005084 <TIM_OC2_SetConfig+0xd4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10d      	bne.n	800502c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800502a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a15      	ldr	r2, [pc, #84]	@ (8005084 <TIM_OC2_SetConfig+0xd4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d113      	bne.n	800505c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800503a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000

08005088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005158 <TIM_OC3_SetConfig+0xd0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d10d      	bne.n	8005102 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a14      	ldr	r2, [pc, #80]	@ (8005158 <TIM_OC3_SetConfig+0xd0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d113      	bne.n	8005132 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40010000 	.word	0x40010000

0800515c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	031b      	lsls	r3, r3, #12
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a10      	ldr	r2, [pc, #64]	@ (80051f8 <TIM_OC4_SetConfig+0x9c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d109      	bne.n	80051d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	019b      	lsls	r3, r3, #6
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000

080051fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0201 	bic.w	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f023 030a 	bic.w	r3, r3, #10
 8005238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525a:	b480      	push	{r7}
 800525c:	b087      	sub	sp, #28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f023 0210 	bic.w	r2, r3, #16
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	031b      	lsls	r3, r3, #12
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005296:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f043 0307 	orr.w	r3, r3, #7
 80052dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	609a      	str	r2, [r3, #8]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800530a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	021a      	lsls	r2, r3, #8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	431a      	orrs	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4313      	orrs	r3, r2
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	2201      	movs	r2, #1
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a1a      	ldr	r2, [r3, #32]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	43db      	mvns	r3, r3
 8005352:	401a      	ands	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	fa01 f303 	lsl.w	r3, r1, r3
 8005368:	431a      	orrs	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005390:	2302      	movs	r3, #2
 8005392:	e050      	b.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e0:	d013      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a18      	ldr	r2, [pc, #96]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a16      	ldr	r2, [pc, #88]	@ (800544c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a13      	ldr	r2, [pc, #76]	@ (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10c      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4313      	orrs	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010000 	.word	0x40010000
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800
 8005450:	40000c00 	.word	0x40000c00
 8005454:	40014000 	.word	0x40014000

08005458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005470:	2302      	movs	r3, #2
 8005472:	e03d      	b.n	80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e042      	b.n	8005594 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fd fb50 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2224      	movs	r2, #36	@ 0x24
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800553e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fdbd 	bl	80060c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	@ 0x28
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d175      	bne.n	80056a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_UART_Transmit+0x2c>
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e06e      	b.n	80056aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2221      	movs	r2, #33	@ 0x21
 80055d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055da:	f7fd fc31 	bl	8002e40 <HAL_GetTick>
 80055de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f4:	d108      	bne.n	8005608 <HAL_UART_Transmit+0x6c>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	e003      	b.n	8005610 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800560c:	2300      	movs	r3, #0
 800560e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005610:	e02e      	b.n	8005670 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2200      	movs	r2, #0
 800561a:	2180      	movs	r1, #128	@ 0x80
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fb1f 	bl	8005c60 <UART_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e03a      	b.n	80056aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005648:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	3302      	adds	r3, #2
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e007      	b.n	8005662 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3301      	adds	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1cb      	bne.n	8005612 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	2140      	movs	r1, #64	@ 0x40
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 faeb 	bl	8005c60 <UART_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e006      	b.n	80056aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e000      	b.n	80056aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
  }
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3720      	adds	r7, #32
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	4613      	mov	r3, r2
 80056be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d112      	bne.n	80056f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_UART_Receive_IT+0x26>
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e00b      	b.n	80056f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056e2:	88fb      	ldrh	r3, [r7, #6]
 80056e4:	461a      	mov	r2, r3
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fb12 	bl	8005d12 <UART_Start_Receive_IT>
 80056ee:	4603      	mov	r3, r0
 80056f0:	e000      	b.n	80056f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
  }
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b0ba      	sub	sp, #232	@ 0xe8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800573a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_UART_IRQHandler+0x66>
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fbf2 	bl	8005f44 <UART_Receive_IT>
      return;
 8005760:	e25b      	b.n	8005c1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80de 	beq.w	8005928 <HAL_UART_IRQHandler+0x22c>
 800576c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800577c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80d1 	beq.w	8005928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_UART_IRQHandler+0xae>
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a2:	f043 0201 	orr.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_UART_IRQHandler+0xd2>
 80057b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c6:	f043 0202 	orr.w	r2, r3, #2
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_UART_IRQHandler+0xf6>
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	f043 0204 	orr.w	r2, r3, #4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d011      	beq.n	8005822 <HAL_UART_IRQHandler+0x126>
 80057fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800580a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f043 0208 	orr.w	r2, r3, #8
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 81f2 	beq.w	8005c10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_UART_IRQHandler+0x14e>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fb7d 	bl	8005f44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_UART_IRQHandler+0x17a>
 800586e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d04f      	beq.n	8005916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fa85 	bl	8005d86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005886:	2b40      	cmp	r3, #64	@ 0x40
 8005888:	d141      	bne.n	800590e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1d9      	bne.n	800588a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d013      	beq.n	8005906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e2:	4a7e      	ldr	r2, [pc, #504]	@ (8005adc <HAL_UART_IRQHandler+0x3e0>)
 80058e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd ff6a 	bl	80037c4 <HAL_DMA_Abort_IT>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d016      	beq.n	8005924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005904:	e00e      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f994 	bl	8005c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590c:	e00a      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f990 	bl	8005c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	e006      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f98c 	bl	8005c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005922:	e175      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	bf00      	nop
    return;
 8005926:	e173      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592c:	2b01      	cmp	r3, #1
 800592e:	f040 814f 	bne.w	8005bd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8148 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8141 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b40      	cmp	r3, #64	@ 0x40
 8005970:	f040 80b6 	bne.w	8005ae0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8145 	beq.w	8005c14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800598e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005992:	429a      	cmp	r2, r3
 8005994:	f080 813e 	bcs.w	8005c14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800599e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059aa:	f000 8088 	beq.w	8005abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1d9      	bne.n	80059ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3314      	adds	r3, #20
 8005a00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e1      	bne.n	80059fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e3      	bne.n	8005a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005aa0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005aa2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005aa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e3      	bne.n	8005a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fd fe13 	bl	80036e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8b7 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ada:	e09b      	b.n	8005c14 <HAL_UART_IRQHandler+0x518>
 8005adc:	08005e4d 	.word	0x08005e4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 808e 	beq.w	8005c18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8089 	beq.w	8005c18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e3      	bne.n	8005b06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3314      	adds	r3, #20
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3314      	adds	r3, #20
 8005b5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b62:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e3      	bne.n	8005b3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0310 	bic.w	r3, r3, #16
 8005b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ba8:	61fa      	str	r2, [r7, #28]
 8005baa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	69b9      	ldr	r1, [r7, #24]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e3      	bne.n	8005b84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f83d 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bce:	e023      	b.n	8005c18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x4f4>
 8005bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f943 	bl	8005e74 <UART_Transmit_IT>
    return;
 8005bee:	e014      	b.n	8005c1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00e      	beq.n	8005c1a <HAL_UART_IRQHandler+0x51e>
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d008      	beq.n	8005c1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f983 	bl	8005f14 <UART_EndTransmit_IT>
    return;
 8005c0e:	e004      	b.n	8005c1a <HAL_UART_IRQHandler+0x51e>
    return;
 8005c10:	bf00      	nop
 8005c12:	e002      	b.n	8005c1a <HAL_UART_IRQHandler+0x51e>
      return;
 8005c14:	bf00      	nop
 8005c16:	e000      	b.n	8005c1a <HAL_UART_IRQHandler+0x51e>
      return;
 8005c18:	bf00      	nop
  }
}
 8005c1a:	37e8      	adds	r7, #232	@ 0xe8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c70:	e03b      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d037      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fd f8e1 	bl	8002e40 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	6a3a      	ldr	r2, [r7, #32]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e03a      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d023      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b80      	cmp	r3, #128	@ 0x80
 8005ca6:	d020      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b40      	cmp	r3, #64	@ 0x40
 8005cac:	d01d      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d116      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f857 	bl	8005d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2208      	movs	r2, #8
 8005cdc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e00f      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2301      	moveq	r3, #1
 8005cfc:	2300      	movne	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d0b4      	beq.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	88fa      	ldrh	r2, [r7, #6]
 8005d2a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	88fa      	ldrh	r2, [r7, #6]
 8005d30:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2222      	movs	r2, #34	@ 0x22
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d56:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0220 	orr.w	r2, r2, #32
 8005d76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b095      	sub	sp, #84	@ 0x54
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	330c      	adds	r3, #12
 8005dac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dae:	643a      	str	r2, [r7, #64]	@ 0x40
 8005db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005db4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e5      	bne.n	8005d8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3314      	adds	r3, #20
 8005dc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3314      	adds	r3, #20
 8005de0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005de4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005de8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e5      	bne.n	8005dc2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d119      	bne.n	8005e32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f023 0310 	bic.w	r3, r3, #16
 8005e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e1e:	61ba      	str	r2, [r7, #24]
 8005e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6979      	ldr	r1, [r7, #20]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e5      	bne.n	8005dfe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e40:	bf00      	nop
 8005e42:	3754      	adds	r7, #84	@ 0x54
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff fee4 	bl	8005c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b21      	cmp	r3, #33	@ 0x21
 8005e86:	d13e      	bne.n	8005f06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e90:	d114      	bne.n	8005ebc <UART_Transmit_IT+0x48>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d110      	bne.n	8005ebc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	1c9a      	adds	r2, r3, #2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	621a      	str	r2, [r3, #32]
 8005eba:	e008      	b.n	8005ece <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	1c59      	adds	r1, r3, #1
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6211      	str	r1, [r2, #32]
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4619      	mov	r1, r3
 8005edc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10f      	bne.n	8005f02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ef0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e000      	b.n	8005f08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
  }
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff fe73 	bl	8005c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08c      	sub	sp, #48	@ 0x30
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b22      	cmp	r3, #34	@ 0x22
 8005f56:	f040 80ae 	bne.w	80060b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f62:	d117      	bne.n	8005f94 <UART_Receive_IT+0x50>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d113      	bne.n	8005f94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f92:	e026      	b.n	8005fe2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa6:	d007      	beq.n	8005fb8 <UART_Receive_IT+0x74>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <UART_Receive_IT+0x82>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	e008      	b.n	8005fd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d15d      	bne.n	80060b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0220 	bic.w	r2, r2, #32
 8006004:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006014:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006038:	2b01      	cmp	r3, #1
 800603a:	d135      	bne.n	80060a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	613b      	str	r3, [r7, #16]
   return(result);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f023 0310 	bic.w	r3, r3, #16
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006062:	623a      	str	r2, [r7, #32]
 8006064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	69f9      	ldr	r1, [r7, #28]
 8006068:	6a3a      	ldr	r2, [r7, #32]
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e5      	bne.n	8006042 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	2b10      	cmp	r3, #16
 8006082:	d10a      	bne.n	800609a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fdd1 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
 80060a6:	e002      	b.n	80060ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7fc fbd5 	bl	8002858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e002      	b.n	80060b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e000      	b.n	80060b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060b6:	2302      	movs	r3, #2
  }
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3730      	adds	r7, #48	@ 0x30
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c4:	b0c0      	sub	sp, #256	@ 0x100
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060dc:	68d9      	ldr	r1, [r3, #12]
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	ea40 0301 	orr.w	r3, r0, r1
 80060e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	431a      	orrs	r2, r3
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006118:	f021 010c 	bic.w	r1, r1, #12
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006126:	430b      	orrs	r3, r1
 8006128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613a:	6999      	ldr	r1, [r3, #24]
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	ea40 0301 	orr.w	r3, r0, r1
 8006146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b8f      	ldr	r3, [pc, #572]	@ (800638c <UART_SetConfig+0x2cc>)
 8006150:	429a      	cmp	r2, r3
 8006152:	d005      	beq.n	8006160 <UART_SetConfig+0xa0>
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4b8d      	ldr	r3, [pc, #564]	@ (8006390 <UART_SetConfig+0x2d0>)
 800615c:	429a      	cmp	r2, r3
 800615e:	d104      	bne.n	800616a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006160:	f7fe fa26 	bl	80045b0 <HAL_RCC_GetPCLK2Freq>
 8006164:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006168:	e003      	b.n	8006172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800616a:	f7fe fa0d 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 800616e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800617c:	f040 810c 	bne.w	8006398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006184:	2200      	movs	r2, #0
 8006186:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800618a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800618e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006192:	4622      	mov	r2, r4
 8006194:	462b      	mov	r3, r5
 8006196:	1891      	adds	r1, r2, r2
 8006198:	65b9      	str	r1, [r7, #88]	@ 0x58
 800619a:	415b      	adcs	r3, r3
 800619c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800619e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061a2:	4621      	mov	r1, r4
 80061a4:	eb12 0801 	adds.w	r8, r2, r1
 80061a8:	4629      	mov	r1, r5
 80061aa:	eb43 0901 	adc.w	r9, r3, r1
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061c2:	4690      	mov	r8, r2
 80061c4:	4699      	mov	r9, r3
 80061c6:	4623      	mov	r3, r4
 80061c8:	eb18 0303 	adds.w	r3, r8, r3
 80061cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061d0:	462b      	mov	r3, r5
 80061d2:	eb49 0303 	adc.w	r3, r9, r3
 80061d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061ee:	460b      	mov	r3, r1
 80061f0:	18db      	adds	r3, r3, r3
 80061f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061f4:	4613      	mov	r3, r2
 80061f6:	eb42 0303 	adc.w	r3, r2, r3
 80061fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80061fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006204:	f7fa fccc 	bl	8000ba0 <__aeabi_uldivmod>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4b61      	ldr	r3, [pc, #388]	@ (8006394 <UART_SetConfig+0x2d4>)
 800620e:	fba3 2302 	umull	r2, r3, r3, r2
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	011c      	lsls	r4, r3, #4
 8006216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800621a:	2200      	movs	r2, #0
 800621c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006220:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006228:	4642      	mov	r2, r8
 800622a:	464b      	mov	r3, r9
 800622c:	1891      	adds	r1, r2, r2
 800622e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006230:	415b      	adcs	r3, r3
 8006232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006238:	4641      	mov	r1, r8
 800623a:	eb12 0a01 	adds.w	sl, r2, r1
 800623e:	4649      	mov	r1, r9
 8006240:	eb43 0b01 	adc.w	fp, r3, r1
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006258:	4692      	mov	sl, r2
 800625a:	469b      	mov	fp, r3
 800625c:	4643      	mov	r3, r8
 800625e:	eb1a 0303 	adds.w	r3, sl, r3
 8006262:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006266:	464b      	mov	r3, r9
 8006268:	eb4b 0303 	adc.w	r3, fp, r3
 800626c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800627c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006284:	460b      	mov	r3, r1
 8006286:	18db      	adds	r3, r3, r3
 8006288:	643b      	str	r3, [r7, #64]	@ 0x40
 800628a:	4613      	mov	r3, r2
 800628c:	eb42 0303 	adc.w	r3, r2, r3
 8006290:	647b      	str	r3, [r7, #68]	@ 0x44
 8006292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800629a:	f7fa fc81 	bl	8000ba0 <__aeabi_uldivmod>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006394 <UART_SetConfig+0x2d4>)
 80062a6:	fba3 2301 	umull	r2, r3, r3, r1
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	2264      	movs	r2, #100	@ 0x64
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	1acb      	subs	r3, r1, r3
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062ba:	4b36      	ldr	r3, [pc, #216]	@ (8006394 <UART_SetConfig+0x2d4>)
 80062bc:	fba3 2302 	umull	r2, r3, r3, r2
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062c8:	441c      	add	r4, r3
 80062ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062dc:	4642      	mov	r2, r8
 80062de:	464b      	mov	r3, r9
 80062e0:	1891      	adds	r1, r2, r2
 80062e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062e4:	415b      	adcs	r3, r3
 80062e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062ec:	4641      	mov	r1, r8
 80062ee:	1851      	adds	r1, r2, r1
 80062f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80062f2:	4649      	mov	r1, r9
 80062f4:	414b      	adcs	r3, r1
 80062f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006304:	4659      	mov	r1, fp
 8006306:	00cb      	lsls	r3, r1, #3
 8006308:	4651      	mov	r1, sl
 800630a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800630e:	4651      	mov	r1, sl
 8006310:	00ca      	lsls	r2, r1, #3
 8006312:	4610      	mov	r0, r2
 8006314:	4619      	mov	r1, r3
 8006316:	4603      	mov	r3, r0
 8006318:	4642      	mov	r2, r8
 800631a:	189b      	adds	r3, r3, r2
 800631c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006320:	464b      	mov	r3, r9
 8006322:	460a      	mov	r2, r1
 8006324:	eb42 0303 	adc.w	r3, r2, r3
 8006328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006338:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800633c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006340:	460b      	mov	r3, r1
 8006342:	18db      	adds	r3, r3, r3
 8006344:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006346:	4613      	mov	r3, r2
 8006348:	eb42 0303 	adc.w	r3, r2, r3
 800634c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006356:	f7fa fc23 	bl	8000ba0 <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <UART_SetConfig+0x2d4>)
 8006360:	fba3 1302 	umull	r1, r3, r3, r2
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	2164      	movs	r1, #100	@ 0x64
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	3332      	adds	r3, #50	@ 0x32
 8006372:	4a08      	ldr	r2, [pc, #32]	@ (8006394 <UART_SetConfig+0x2d4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f003 0207 	and.w	r2, r3, #7
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4422      	add	r2, r4
 8006386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006388:	e106      	b.n	8006598 <UART_SetConfig+0x4d8>
 800638a:	bf00      	nop
 800638c:	40011000 	.word	0x40011000
 8006390:	40011400 	.word	0x40011400
 8006394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800639c:	2200      	movs	r2, #0
 800639e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063aa:	4642      	mov	r2, r8
 80063ac:	464b      	mov	r3, r9
 80063ae:	1891      	adds	r1, r2, r2
 80063b0:	6239      	str	r1, [r7, #32]
 80063b2:	415b      	adcs	r3, r3
 80063b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ba:	4641      	mov	r1, r8
 80063bc:	1854      	adds	r4, r2, r1
 80063be:	4649      	mov	r1, r9
 80063c0:	eb43 0501 	adc.w	r5, r3, r1
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	00eb      	lsls	r3, r5, #3
 80063ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063d2:	00e2      	lsls	r2, r4, #3
 80063d4:	4614      	mov	r4, r2
 80063d6:	461d      	mov	r5, r3
 80063d8:	4643      	mov	r3, r8
 80063da:	18e3      	adds	r3, r4, r3
 80063dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063e0:	464b      	mov	r3, r9
 80063e2:	eb45 0303 	adc.w	r3, r5, r3
 80063e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063fa:	f04f 0200 	mov.w	r2, #0
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006406:	4629      	mov	r1, r5
 8006408:	008b      	lsls	r3, r1, #2
 800640a:	4621      	mov	r1, r4
 800640c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006410:	4621      	mov	r1, r4
 8006412:	008a      	lsls	r2, r1, #2
 8006414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006418:	f7fa fbc2 	bl	8000ba0 <__aeabi_uldivmod>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4b60      	ldr	r3, [pc, #384]	@ (80065a4 <UART_SetConfig+0x4e4>)
 8006422:	fba3 2302 	umull	r2, r3, r3, r2
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	011c      	lsls	r4, r3, #4
 800642a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800642e:	2200      	movs	r2, #0
 8006430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006434:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800643c:	4642      	mov	r2, r8
 800643e:	464b      	mov	r3, r9
 8006440:	1891      	adds	r1, r2, r2
 8006442:	61b9      	str	r1, [r7, #24]
 8006444:	415b      	adcs	r3, r3
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800644c:	4641      	mov	r1, r8
 800644e:	1851      	adds	r1, r2, r1
 8006450:	6139      	str	r1, [r7, #16]
 8006452:	4649      	mov	r1, r9
 8006454:	414b      	adcs	r3, r1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006464:	4659      	mov	r1, fp
 8006466:	00cb      	lsls	r3, r1, #3
 8006468:	4651      	mov	r1, sl
 800646a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800646e:	4651      	mov	r1, sl
 8006470:	00ca      	lsls	r2, r1, #3
 8006472:	4610      	mov	r0, r2
 8006474:	4619      	mov	r1, r3
 8006476:	4603      	mov	r3, r0
 8006478:	4642      	mov	r2, r8
 800647a:	189b      	adds	r3, r3, r2
 800647c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006480:	464b      	mov	r3, r9
 8006482:	460a      	mov	r2, r1
 8006484:	eb42 0303 	adc.w	r3, r2, r3
 8006488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006496:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064a4:	4649      	mov	r1, r9
 80064a6:	008b      	lsls	r3, r1, #2
 80064a8:	4641      	mov	r1, r8
 80064aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ae:	4641      	mov	r1, r8
 80064b0:	008a      	lsls	r2, r1, #2
 80064b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064b6:	f7fa fb73 	bl	8000ba0 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	4b38      	ldr	r3, [pc, #224]	@ (80065a4 <UART_SetConfig+0x4e4>)
 80064c2:	fba3 2301 	umull	r2, r3, r3, r1
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	2264      	movs	r2, #100	@ 0x64
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	1acb      	subs	r3, r1, r3
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	3332      	adds	r3, #50	@ 0x32
 80064d4:	4a33      	ldr	r2, [pc, #204]	@ (80065a4 <UART_SetConfig+0x4e4>)
 80064d6:	fba2 2303 	umull	r2, r3, r2, r3
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064e0:	441c      	add	r4, r3
 80064e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064e6:	2200      	movs	r2, #0
 80064e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80064ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80064ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064f0:	4642      	mov	r2, r8
 80064f2:	464b      	mov	r3, r9
 80064f4:	1891      	adds	r1, r2, r2
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	415b      	adcs	r3, r3
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006500:	4641      	mov	r1, r8
 8006502:	1851      	adds	r1, r2, r1
 8006504:	6039      	str	r1, [r7, #0]
 8006506:	4649      	mov	r1, r9
 8006508:	414b      	adcs	r3, r1
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006518:	4659      	mov	r1, fp
 800651a:	00cb      	lsls	r3, r1, #3
 800651c:	4651      	mov	r1, sl
 800651e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006522:	4651      	mov	r1, sl
 8006524:	00ca      	lsls	r2, r1, #3
 8006526:	4610      	mov	r0, r2
 8006528:	4619      	mov	r1, r3
 800652a:	4603      	mov	r3, r0
 800652c:	4642      	mov	r2, r8
 800652e:	189b      	adds	r3, r3, r2
 8006530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006532:	464b      	mov	r3, r9
 8006534:	460a      	mov	r2, r1
 8006536:	eb42 0303 	adc.w	r3, r2, r3
 800653a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	663b      	str	r3, [r7, #96]	@ 0x60
 8006546:	667a      	str	r2, [r7, #100]	@ 0x64
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006554:	4649      	mov	r1, r9
 8006556:	008b      	lsls	r3, r1, #2
 8006558:	4641      	mov	r1, r8
 800655a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800655e:	4641      	mov	r1, r8
 8006560:	008a      	lsls	r2, r1, #2
 8006562:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006566:	f7fa fb1b 	bl	8000ba0 <__aeabi_uldivmod>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4b0d      	ldr	r3, [pc, #52]	@ (80065a4 <UART_SetConfig+0x4e4>)
 8006570:	fba3 1302 	umull	r1, r3, r3, r2
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	2164      	movs	r1, #100	@ 0x64
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	3332      	adds	r3, #50	@ 0x32
 8006582:	4a08      	ldr	r2, [pc, #32]	@ (80065a4 <UART_SetConfig+0x4e4>)
 8006584:	fba2 2303 	umull	r2, r3, r2, r3
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	f003 020f 	and.w	r2, r3, #15
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4422      	add	r2, r4
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800659e:	46bd      	mov	sp, r7
 80065a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065a4:	51eb851f 	.word	0x51eb851f

080065a8 <memset>:
 80065a8:	4402      	add	r2, r0
 80065aa:	4603      	mov	r3, r0
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d100      	bne.n	80065b2 <memset+0xa>
 80065b0:	4770      	bx	lr
 80065b2:	f803 1b01 	strb.w	r1, [r3], #1
 80065b6:	e7f9      	b.n	80065ac <memset+0x4>

080065b8 <__errno>:
 80065b8:	4b01      	ldr	r3, [pc, #4]	@ (80065c0 <__errno+0x8>)
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	2000000c 	.word	0x2000000c

080065c4 <__libc_init_array>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	4d0d      	ldr	r5, [pc, #52]	@ (80065fc <__libc_init_array+0x38>)
 80065c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006600 <__libc_init_array+0x3c>)
 80065ca:	1b64      	subs	r4, r4, r5
 80065cc:	10a4      	asrs	r4, r4, #2
 80065ce:	2600      	movs	r6, #0
 80065d0:	42a6      	cmp	r6, r4
 80065d2:	d109      	bne.n	80065e8 <__libc_init_array+0x24>
 80065d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006604 <__libc_init_array+0x40>)
 80065d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006608 <__libc_init_array+0x44>)
 80065d8:	f002 fa12 	bl	8008a00 <_init>
 80065dc:	1b64      	subs	r4, r4, r5
 80065de:	10a4      	asrs	r4, r4, #2
 80065e0:	2600      	movs	r6, #0
 80065e2:	42a6      	cmp	r6, r4
 80065e4:	d105      	bne.n	80065f2 <__libc_init_array+0x2e>
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ec:	4798      	blx	r3
 80065ee:	3601      	adds	r6, #1
 80065f0:	e7ee      	b.n	80065d0 <__libc_init_array+0xc>
 80065f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f6:	4798      	blx	r3
 80065f8:	3601      	adds	r6, #1
 80065fa:	e7f2      	b.n	80065e2 <__libc_init_array+0x1e>
 80065fc:	08008cb8 	.word	0x08008cb8
 8006600:	08008cb8 	.word	0x08008cb8
 8006604:	08008cb8 	.word	0x08008cb8
 8006608:	08008cbc 	.word	0x08008cbc

0800660c <memcpy>:
 800660c:	440a      	add	r2, r1
 800660e:	4291      	cmp	r1, r2
 8006610:	f100 33ff 	add.w	r3, r0, #4294967295
 8006614:	d100      	bne.n	8006618 <memcpy+0xc>
 8006616:	4770      	bx	lr
 8006618:	b510      	push	{r4, lr}
 800661a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800661e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006622:	4291      	cmp	r1, r2
 8006624:	d1f9      	bne.n	800661a <memcpy+0xe>
 8006626:	bd10      	pop	{r4, pc}

08006628 <atan2>:
 8006628:	f000 bbb2 	b.w	8006d90 <__ieee754_atan2>

0800662c <pow>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	ed2d 8b02 	vpush	{d8}
 8006632:	eeb0 8a40 	vmov.f32	s16, s0
 8006636:	eef0 8a60 	vmov.f32	s17, s1
 800663a:	ec55 4b11 	vmov	r4, r5, d1
 800663e:	f000 fc6f 	bl	8006f20 <__ieee754_pow>
 8006642:	4622      	mov	r2, r4
 8006644:	462b      	mov	r3, r5
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	ec57 6b10 	vmov	r6, r7, d0
 800664e:	f7fa fa19 	bl	8000a84 <__aeabi_dcmpun>
 8006652:	2800      	cmp	r0, #0
 8006654:	d13b      	bne.n	80066ce <pow+0xa2>
 8006656:	ec51 0b18 	vmov	r0, r1, d8
 800665a:	2200      	movs	r2, #0
 800665c:	2300      	movs	r3, #0
 800665e:	f7fa f9df 	bl	8000a20 <__aeabi_dcmpeq>
 8006662:	b1b8      	cbz	r0, 8006694 <pow+0x68>
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	4620      	mov	r0, r4
 800666a:	4629      	mov	r1, r5
 800666c:	f7fa f9d8 	bl	8000a20 <__aeabi_dcmpeq>
 8006670:	2800      	cmp	r0, #0
 8006672:	d146      	bne.n	8006702 <pow+0xd6>
 8006674:	ec45 4b10 	vmov	d0, r4, r5
 8006678:	f000 f91e 	bl	80068b8 <finite>
 800667c:	b338      	cbz	r0, 80066ce <pow+0xa2>
 800667e:	2200      	movs	r2, #0
 8006680:	2300      	movs	r3, #0
 8006682:	4620      	mov	r0, r4
 8006684:	4629      	mov	r1, r5
 8006686:	f7fa f9d5 	bl	8000a34 <__aeabi_dcmplt>
 800668a:	b300      	cbz	r0, 80066ce <pow+0xa2>
 800668c:	f7ff ff94 	bl	80065b8 <__errno>
 8006690:	2322      	movs	r3, #34	@ 0x22
 8006692:	e01b      	b.n	80066cc <pow+0xa0>
 8006694:	ec47 6b10 	vmov	d0, r6, r7
 8006698:	f000 f90e 	bl	80068b8 <finite>
 800669c:	b9e0      	cbnz	r0, 80066d8 <pow+0xac>
 800669e:	eeb0 0a48 	vmov.f32	s0, s16
 80066a2:	eef0 0a68 	vmov.f32	s1, s17
 80066a6:	f000 f907 	bl	80068b8 <finite>
 80066aa:	b1a8      	cbz	r0, 80066d8 <pow+0xac>
 80066ac:	ec45 4b10 	vmov	d0, r4, r5
 80066b0:	f000 f902 	bl	80068b8 <finite>
 80066b4:	b180      	cbz	r0, 80066d8 <pow+0xac>
 80066b6:	4632      	mov	r2, r6
 80066b8:	463b      	mov	r3, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	4639      	mov	r1, r7
 80066be:	f7fa f9e1 	bl	8000a84 <__aeabi_dcmpun>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d0e2      	beq.n	800668c <pow+0x60>
 80066c6:	f7ff ff77 	bl	80065b8 <__errno>
 80066ca:	2321      	movs	r3, #33	@ 0x21
 80066cc:	6003      	str	r3, [r0, #0]
 80066ce:	ecbd 8b02 	vpop	{d8}
 80066d2:	ec47 6b10 	vmov	d0, r6, r7
 80066d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d8:	2200      	movs	r2, #0
 80066da:	2300      	movs	r3, #0
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7fa f99e 	bl	8000a20 <__aeabi_dcmpeq>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d0f2      	beq.n	80066ce <pow+0xa2>
 80066e8:	eeb0 0a48 	vmov.f32	s0, s16
 80066ec:	eef0 0a68 	vmov.f32	s1, s17
 80066f0:	f000 f8e2 	bl	80068b8 <finite>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d0ea      	beq.n	80066ce <pow+0xa2>
 80066f8:	ec45 4b10 	vmov	d0, r4, r5
 80066fc:	f000 f8dc 	bl	80068b8 <finite>
 8006700:	e7c3      	b.n	800668a <pow+0x5e>
 8006702:	4f01      	ldr	r7, [pc, #4]	@ (8006708 <pow+0xdc>)
 8006704:	2600      	movs	r6, #0
 8006706:	e7e2      	b.n	80066ce <pow+0xa2>
 8006708:	3ff00000 	.word	0x3ff00000

0800670c <sqrt>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	ed2d 8b02 	vpush	{d8}
 8006712:	ec55 4b10 	vmov	r4, r5, d0
 8006716:	f000 f8db 	bl	80068d0 <__ieee754_sqrt>
 800671a:	4622      	mov	r2, r4
 800671c:	462b      	mov	r3, r5
 800671e:	4620      	mov	r0, r4
 8006720:	4629      	mov	r1, r5
 8006722:	eeb0 8a40 	vmov.f32	s16, s0
 8006726:	eef0 8a60 	vmov.f32	s17, s1
 800672a:	f7fa f9ab 	bl	8000a84 <__aeabi_dcmpun>
 800672e:	b990      	cbnz	r0, 8006756 <sqrt+0x4a>
 8006730:	2200      	movs	r2, #0
 8006732:	2300      	movs	r3, #0
 8006734:	4620      	mov	r0, r4
 8006736:	4629      	mov	r1, r5
 8006738:	f7fa f97c 	bl	8000a34 <__aeabi_dcmplt>
 800673c:	b158      	cbz	r0, 8006756 <sqrt+0x4a>
 800673e:	f7ff ff3b 	bl	80065b8 <__errno>
 8006742:	2321      	movs	r3, #33	@ 0x21
 8006744:	6003      	str	r3, [r0, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	2300      	movs	r3, #0
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	f7fa f829 	bl	80007a4 <__aeabi_ddiv>
 8006752:	ec41 0b18 	vmov	d8, r0, r1
 8006756:	eeb0 0a48 	vmov.f32	s0, s16
 800675a:	eef0 0a68 	vmov.f32	s1, s17
 800675e:	ecbd 8b02 	vpop	{d8}
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	0000      	movs	r0, r0
	...

08006768 <cos>:
 8006768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800676a:	ec53 2b10 	vmov	r2, r3, d0
 800676e:	4826      	ldr	r0, [pc, #152]	@ (8006808 <cos+0xa0>)
 8006770:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006774:	4281      	cmp	r1, r0
 8006776:	d806      	bhi.n	8006786 <cos+0x1e>
 8006778:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006800 <cos+0x98>
 800677c:	b005      	add	sp, #20
 800677e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006782:	f000 b981 	b.w	8006a88 <__kernel_cos>
 8006786:	4821      	ldr	r0, [pc, #132]	@ (800680c <cos+0xa4>)
 8006788:	4281      	cmp	r1, r0
 800678a:	d908      	bls.n	800679e <cos+0x36>
 800678c:	4610      	mov	r0, r2
 800678e:	4619      	mov	r1, r3
 8006790:	f7f9 fd26 	bl	80001e0 <__aeabi_dsub>
 8006794:	ec41 0b10 	vmov	d0, r0, r1
 8006798:	b005      	add	sp, #20
 800679a:	f85d fb04 	ldr.w	pc, [sp], #4
 800679e:	4668      	mov	r0, sp
 80067a0:	f001 f902 	bl	80079a8 <__ieee754_rem_pio2>
 80067a4:	f000 0003 	and.w	r0, r0, #3
 80067a8:	2801      	cmp	r0, #1
 80067aa:	d00b      	beq.n	80067c4 <cos+0x5c>
 80067ac:	2802      	cmp	r0, #2
 80067ae:	d015      	beq.n	80067dc <cos+0x74>
 80067b0:	b9d8      	cbnz	r0, 80067ea <cos+0x82>
 80067b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067b6:	ed9d 0b00 	vldr	d0, [sp]
 80067ba:	f000 f965 	bl	8006a88 <__kernel_cos>
 80067be:	ec51 0b10 	vmov	r0, r1, d0
 80067c2:	e7e7      	b.n	8006794 <cos+0x2c>
 80067c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067c8:	ed9d 0b00 	vldr	d0, [sp]
 80067cc:	f000 fa24 	bl	8006c18 <__kernel_sin>
 80067d0:	ec53 2b10 	vmov	r2, r3, d0
 80067d4:	4610      	mov	r0, r2
 80067d6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80067da:	e7db      	b.n	8006794 <cos+0x2c>
 80067dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067e0:	ed9d 0b00 	vldr	d0, [sp]
 80067e4:	f000 f950 	bl	8006a88 <__kernel_cos>
 80067e8:	e7f2      	b.n	80067d0 <cos+0x68>
 80067ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067ee:	ed9d 0b00 	vldr	d0, [sp]
 80067f2:	2001      	movs	r0, #1
 80067f4:	f000 fa10 	bl	8006c18 <__kernel_sin>
 80067f8:	e7e1      	b.n	80067be <cos+0x56>
 80067fa:	bf00      	nop
 80067fc:	f3af 8000 	nop.w
	...
 8006808:	3fe921fb 	.word	0x3fe921fb
 800680c:	7fefffff 	.word	0x7fefffff

08006810 <sin>:
 8006810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006812:	ec53 2b10 	vmov	r2, r3, d0
 8006816:	4826      	ldr	r0, [pc, #152]	@ (80068b0 <sin+0xa0>)
 8006818:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800681c:	4281      	cmp	r1, r0
 800681e:	d807      	bhi.n	8006830 <sin+0x20>
 8006820:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80068a8 <sin+0x98>
 8006824:	2000      	movs	r0, #0
 8006826:	b005      	add	sp, #20
 8006828:	f85d eb04 	ldr.w	lr, [sp], #4
 800682c:	f000 b9f4 	b.w	8006c18 <__kernel_sin>
 8006830:	4820      	ldr	r0, [pc, #128]	@ (80068b4 <sin+0xa4>)
 8006832:	4281      	cmp	r1, r0
 8006834:	d908      	bls.n	8006848 <sin+0x38>
 8006836:	4610      	mov	r0, r2
 8006838:	4619      	mov	r1, r3
 800683a:	f7f9 fcd1 	bl	80001e0 <__aeabi_dsub>
 800683e:	ec41 0b10 	vmov	d0, r0, r1
 8006842:	b005      	add	sp, #20
 8006844:	f85d fb04 	ldr.w	pc, [sp], #4
 8006848:	4668      	mov	r0, sp
 800684a:	f001 f8ad 	bl	80079a8 <__ieee754_rem_pio2>
 800684e:	f000 0003 	and.w	r0, r0, #3
 8006852:	2801      	cmp	r0, #1
 8006854:	d00c      	beq.n	8006870 <sin+0x60>
 8006856:	2802      	cmp	r0, #2
 8006858:	d011      	beq.n	800687e <sin+0x6e>
 800685a:	b9e8      	cbnz	r0, 8006898 <sin+0x88>
 800685c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006860:	ed9d 0b00 	vldr	d0, [sp]
 8006864:	2001      	movs	r0, #1
 8006866:	f000 f9d7 	bl	8006c18 <__kernel_sin>
 800686a:	ec51 0b10 	vmov	r0, r1, d0
 800686e:	e7e6      	b.n	800683e <sin+0x2e>
 8006870:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006874:	ed9d 0b00 	vldr	d0, [sp]
 8006878:	f000 f906 	bl	8006a88 <__kernel_cos>
 800687c:	e7f5      	b.n	800686a <sin+0x5a>
 800687e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006882:	ed9d 0b00 	vldr	d0, [sp]
 8006886:	2001      	movs	r0, #1
 8006888:	f000 f9c6 	bl	8006c18 <__kernel_sin>
 800688c:	ec53 2b10 	vmov	r2, r3, d0
 8006890:	4610      	mov	r0, r2
 8006892:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006896:	e7d2      	b.n	800683e <sin+0x2e>
 8006898:	ed9d 1b02 	vldr	d1, [sp, #8]
 800689c:	ed9d 0b00 	vldr	d0, [sp]
 80068a0:	f000 f8f2 	bl	8006a88 <__kernel_cos>
 80068a4:	e7f2      	b.n	800688c <sin+0x7c>
 80068a6:	bf00      	nop
	...
 80068b0:	3fe921fb 	.word	0x3fe921fb
 80068b4:	7fefffff 	.word	0x7fefffff

080068b8 <finite>:
 80068b8:	b082      	sub	sp, #8
 80068ba:	ed8d 0b00 	vstr	d0, [sp]
 80068be:	9801      	ldr	r0, [sp, #4]
 80068c0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80068c4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80068c8:	0fc0      	lsrs	r0, r0, #31
 80068ca:	b002      	add	sp, #8
 80068cc:	4770      	bx	lr
	...

080068d0 <__ieee754_sqrt>:
 80068d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	4a68      	ldr	r2, [pc, #416]	@ (8006a78 <__ieee754_sqrt+0x1a8>)
 80068d6:	ec55 4b10 	vmov	r4, r5, d0
 80068da:	43aa      	bics	r2, r5
 80068dc:	462b      	mov	r3, r5
 80068de:	4621      	mov	r1, r4
 80068e0:	d110      	bne.n	8006904 <__ieee754_sqrt+0x34>
 80068e2:	4622      	mov	r2, r4
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7f9 fe32 	bl	8000550 <__aeabi_dmul>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4620      	mov	r0, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	f7f9 fc76 	bl	80001e4 <__adddf3>
 80068f8:	4604      	mov	r4, r0
 80068fa:	460d      	mov	r5, r1
 80068fc:	ec45 4b10 	vmov	d0, r4, r5
 8006900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006904:	2d00      	cmp	r5, #0
 8006906:	dc0e      	bgt.n	8006926 <__ieee754_sqrt+0x56>
 8006908:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800690c:	4322      	orrs	r2, r4
 800690e:	d0f5      	beq.n	80068fc <__ieee754_sqrt+0x2c>
 8006910:	b19d      	cbz	r5, 800693a <__ieee754_sqrt+0x6a>
 8006912:	4622      	mov	r2, r4
 8006914:	4620      	mov	r0, r4
 8006916:	4629      	mov	r1, r5
 8006918:	f7f9 fc62 	bl	80001e0 <__aeabi_dsub>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	f7f9 ff40 	bl	80007a4 <__aeabi_ddiv>
 8006924:	e7e8      	b.n	80068f8 <__ieee754_sqrt+0x28>
 8006926:	152a      	asrs	r2, r5, #20
 8006928:	d115      	bne.n	8006956 <__ieee754_sqrt+0x86>
 800692a:	2000      	movs	r0, #0
 800692c:	e009      	b.n	8006942 <__ieee754_sqrt+0x72>
 800692e:	0acb      	lsrs	r3, r1, #11
 8006930:	3a15      	subs	r2, #21
 8006932:	0549      	lsls	r1, r1, #21
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0fa      	beq.n	800692e <__ieee754_sqrt+0x5e>
 8006938:	e7f7      	b.n	800692a <__ieee754_sqrt+0x5a>
 800693a:	462a      	mov	r2, r5
 800693c:	e7fa      	b.n	8006934 <__ieee754_sqrt+0x64>
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	3001      	adds	r0, #1
 8006942:	02dc      	lsls	r4, r3, #11
 8006944:	d5fb      	bpl.n	800693e <__ieee754_sqrt+0x6e>
 8006946:	1e44      	subs	r4, r0, #1
 8006948:	1b12      	subs	r2, r2, r4
 800694a:	f1c0 0420 	rsb	r4, r0, #32
 800694e:	fa21 f404 	lsr.w	r4, r1, r4
 8006952:	4323      	orrs	r3, r4
 8006954:	4081      	lsls	r1, r0
 8006956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800695a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800695e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006962:	07d2      	lsls	r2, r2, #31
 8006964:	bf5c      	itt	pl
 8006966:	005b      	lslpl	r3, r3, #1
 8006968:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800696c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006970:	bf58      	it	pl
 8006972:	0049      	lslpl	r1, r1, #1
 8006974:	2600      	movs	r6, #0
 8006976:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800697a:	106d      	asrs	r5, r5, #1
 800697c:	0049      	lsls	r1, r1, #1
 800697e:	2016      	movs	r0, #22
 8006980:	4632      	mov	r2, r6
 8006982:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006986:	1917      	adds	r7, r2, r4
 8006988:	429f      	cmp	r7, r3
 800698a:	bfde      	ittt	le
 800698c:	193a      	addle	r2, r7, r4
 800698e:	1bdb      	suble	r3, r3, r7
 8006990:	1936      	addle	r6, r6, r4
 8006992:	0fcf      	lsrs	r7, r1, #31
 8006994:	3801      	subs	r0, #1
 8006996:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800699a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800699e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80069a2:	d1f0      	bne.n	8006986 <__ieee754_sqrt+0xb6>
 80069a4:	4604      	mov	r4, r0
 80069a6:	2720      	movs	r7, #32
 80069a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80069ac:	429a      	cmp	r2, r3
 80069ae:	eb00 0e0c 	add.w	lr, r0, ip
 80069b2:	db02      	blt.n	80069ba <__ieee754_sqrt+0xea>
 80069b4:	d113      	bne.n	80069de <__ieee754_sqrt+0x10e>
 80069b6:	458e      	cmp	lr, r1
 80069b8:	d811      	bhi.n	80069de <__ieee754_sqrt+0x10e>
 80069ba:	f1be 0f00 	cmp.w	lr, #0
 80069be:	eb0e 000c 	add.w	r0, lr, ip
 80069c2:	da42      	bge.n	8006a4a <__ieee754_sqrt+0x17a>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	db40      	blt.n	8006a4a <__ieee754_sqrt+0x17a>
 80069c8:	f102 0801 	add.w	r8, r2, #1
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	458e      	cmp	lr, r1
 80069d0:	bf88      	it	hi
 80069d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80069d6:	eba1 010e 	sub.w	r1, r1, lr
 80069da:	4464      	add	r4, ip
 80069dc:	4642      	mov	r2, r8
 80069de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80069e2:	3f01      	subs	r7, #1
 80069e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80069e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80069ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80069f0:	d1dc      	bne.n	80069ac <__ieee754_sqrt+0xdc>
 80069f2:	4319      	orrs	r1, r3
 80069f4:	d01b      	beq.n	8006a2e <__ieee754_sqrt+0x15e>
 80069f6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006a7c <__ieee754_sqrt+0x1ac>
 80069fa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006a80 <__ieee754_sqrt+0x1b0>
 80069fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a02:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a06:	f7f9 fbeb 	bl	80001e0 <__aeabi_dsub>
 8006a0a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4640      	mov	r0, r8
 8006a14:	4649      	mov	r1, r9
 8006a16:	f7fa f817 	bl	8000a48 <__aeabi_dcmple>
 8006a1a:	b140      	cbz	r0, 8006a2e <__ieee754_sqrt+0x15e>
 8006a1c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a20:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a24:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a28:	d111      	bne.n	8006a4e <__ieee754_sqrt+0x17e>
 8006a2a:	3601      	adds	r6, #1
 8006a2c:	463c      	mov	r4, r7
 8006a2e:	1072      	asrs	r2, r6, #1
 8006a30:	0863      	lsrs	r3, r4, #1
 8006a32:	07f1      	lsls	r1, r6, #31
 8006a34:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006a38:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006a3c:	bf48      	it	mi
 8006a3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006a42:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006a46:	4618      	mov	r0, r3
 8006a48:	e756      	b.n	80068f8 <__ieee754_sqrt+0x28>
 8006a4a:	4690      	mov	r8, r2
 8006a4c:	e7be      	b.n	80069cc <__ieee754_sqrt+0xfc>
 8006a4e:	f7f9 fbc9 	bl	80001e4 <__adddf3>
 8006a52:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	f7f9 ffe9 	bl	8000a34 <__aeabi_dcmplt>
 8006a62:	b120      	cbz	r0, 8006a6e <__ieee754_sqrt+0x19e>
 8006a64:	1ca0      	adds	r0, r4, #2
 8006a66:	bf08      	it	eq
 8006a68:	3601      	addeq	r6, #1
 8006a6a:	3402      	adds	r4, #2
 8006a6c:	e7df      	b.n	8006a2e <__ieee754_sqrt+0x15e>
 8006a6e:	1c63      	adds	r3, r4, #1
 8006a70:	f023 0401 	bic.w	r4, r3, #1
 8006a74:	e7db      	b.n	8006a2e <__ieee754_sqrt+0x15e>
 8006a76:	bf00      	nop
 8006a78:	7ff00000 	.word	0x7ff00000
 8006a7c:	20000068 	.word	0x20000068
 8006a80:	20000060 	.word	0x20000060
 8006a84:	00000000 	.word	0x00000000

08006a88 <__kernel_cos>:
 8006a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	ec57 6b10 	vmov	r6, r7, d0
 8006a90:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006a94:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006a98:	ed8d 1b00 	vstr	d1, [sp]
 8006a9c:	d206      	bcs.n	8006aac <__kernel_cos+0x24>
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	f7fa f805 	bl	8000ab0 <__aeabi_d2iz>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f000 8088 	beq.w	8006bbc <__kernel_cos+0x134>
 8006aac:	4632      	mov	r2, r6
 8006aae:	463b      	mov	r3, r7
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7f9 fd4c 	bl	8000550 <__aeabi_dmul>
 8006ab8:	4b51      	ldr	r3, [pc, #324]	@ (8006c00 <__kernel_cos+0x178>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	4604      	mov	r4, r0
 8006abe:	460d      	mov	r5, r1
 8006ac0:	f7f9 fd46 	bl	8000550 <__aeabi_dmul>
 8006ac4:	a340      	add	r3, pc, #256	@ (adr r3, 8006bc8 <__kernel_cos+0x140>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	4682      	mov	sl, r0
 8006acc:	468b      	mov	fp, r1
 8006ace:	4620      	mov	r0, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	f7f9 fd3d 	bl	8000550 <__aeabi_dmul>
 8006ad6:	a33e      	add	r3, pc, #248	@ (adr r3, 8006bd0 <__kernel_cos+0x148>)
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f7f9 fb82 	bl	80001e4 <__adddf3>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	462b      	mov	r3, r5
 8006ae4:	f7f9 fd34 	bl	8000550 <__aeabi_dmul>
 8006ae8:	a33b      	add	r3, pc, #236	@ (adr r3, 8006bd8 <__kernel_cos+0x150>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fb77 	bl	80001e0 <__aeabi_dsub>
 8006af2:	4622      	mov	r2, r4
 8006af4:	462b      	mov	r3, r5
 8006af6:	f7f9 fd2b 	bl	8000550 <__aeabi_dmul>
 8006afa:	a339      	add	r3, pc, #228	@ (adr r3, 8006be0 <__kernel_cos+0x158>)
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f7f9 fb70 	bl	80001e4 <__adddf3>
 8006b04:	4622      	mov	r2, r4
 8006b06:	462b      	mov	r3, r5
 8006b08:	f7f9 fd22 	bl	8000550 <__aeabi_dmul>
 8006b0c:	a336      	add	r3, pc, #216	@ (adr r3, 8006be8 <__kernel_cos+0x160>)
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f7f9 fb65 	bl	80001e0 <__aeabi_dsub>
 8006b16:	4622      	mov	r2, r4
 8006b18:	462b      	mov	r3, r5
 8006b1a:	f7f9 fd19 	bl	8000550 <__aeabi_dmul>
 8006b1e:	a334      	add	r3, pc, #208	@ (adr r3, 8006bf0 <__kernel_cos+0x168>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fb5e 	bl	80001e4 <__adddf3>
 8006b28:	4622      	mov	r2, r4
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	f7f9 fd10 	bl	8000550 <__aeabi_dmul>
 8006b30:	4622      	mov	r2, r4
 8006b32:	462b      	mov	r3, r5
 8006b34:	f7f9 fd0c 	bl	8000550 <__aeabi_dmul>
 8006b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460d      	mov	r5, r1
 8006b40:	4630      	mov	r0, r6
 8006b42:	4639      	mov	r1, r7
 8006b44:	f7f9 fd04 	bl	8000550 <__aeabi_dmul>
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f7f9 fb46 	bl	80001e0 <__aeabi_dsub>
 8006b54:	4b2b      	ldr	r3, [pc, #172]	@ (8006c04 <__kernel_cos+0x17c>)
 8006b56:	4598      	cmp	r8, r3
 8006b58:	4606      	mov	r6, r0
 8006b5a:	460f      	mov	r7, r1
 8006b5c:	d810      	bhi.n	8006b80 <__kernel_cos+0xf8>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4650      	mov	r0, sl
 8006b64:	4659      	mov	r1, fp
 8006b66:	f7f9 fb3b 	bl	80001e0 <__aeabi_dsub>
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4926      	ldr	r1, [pc, #152]	@ (8006c08 <__kernel_cos+0x180>)
 8006b6e:	4602      	mov	r2, r0
 8006b70:	2000      	movs	r0, #0
 8006b72:	f7f9 fb35 	bl	80001e0 <__aeabi_dsub>
 8006b76:	ec41 0b10 	vmov	d0, r0, r1
 8006b7a:	b003      	add	sp, #12
 8006b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b80:	4b22      	ldr	r3, [pc, #136]	@ (8006c0c <__kernel_cos+0x184>)
 8006b82:	4921      	ldr	r1, [pc, #132]	@ (8006c08 <__kernel_cos+0x180>)
 8006b84:	4598      	cmp	r8, r3
 8006b86:	bf8c      	ite	hi
 8006b88:	4d21      	ldrhi	r5, [pc, #132]	@ (8006c10 <__kernel_cos+0x188>)
 8006b8a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8006b8e:	2400      	movs	r4, #0
 8006b90:	4622      	mov	r2, r4
 8006b92:	462b      	mov	r3, r5
 8006b94:	2000      	movs	r0, #0
 8006b96:	f7f9 fb23 	bl	80001e0 <__aeabi_dsub>
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	4689      	mov	r9, r1
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	f7f9 fb1b 	bl	80001e0 <__aeabi_dsub>
 8006baa:	4632      	mov	r2, r6
 8006bac:	463b      	mov	r3, r7
 8006bae:	f7f9 fb17 	bl	80001e0 <__aeabi_dsub>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	4649      	mov	r1, r9
 8006bba:	e7da      	b.n	8006b72 <__kernel_cos+0xea>
 8006bbc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006bf8 <__kernel_cos+0x170>
 8006bc0:	e7db      	b.n	8006b7a <__kernel_cos+0xf2>
 8006bc2:	bf00      	nop
 8006bc4:	f3af 8000 	nop.w
 8006bc8:	be8838d4 	.word	0xbe8838d4
 8006bcc:	bda8fae9 	.word	0xbda8fae9
 8006bd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006bd4:	3e21ee9e 	.word	0x3e21ee9e
 8006bd8:	809c52ad 	.word	0x809c52ad
 8006bdc:	3e927e4f 	.word	0x3e927e4f
 8006be0:	19cb1590 	.word	0x19cb1590
 8006be4:	3efa01a0 	.word	0x3efa01a0
 8006be8:	16c15177 	.word	0x16c15177
 8006bec:	3f56c16c 	.word	0x3f56c16c
 8006bf0:	5555554c 	.word	0x5555554c
 8006bf4:	3fa55555 	.word	0x3fa55555
 8006bf8:	00000000 	.word	0x00000000
 8006bfc:	3ff00000 	.word	0x3ff00000
 8006c00:	3fe00000 	.word	0x3fe00000
 8006c04:	3fd33332 	.word	0x3fd33332
 8006c08:	3ff00000 	.word	0x3ff00000
 8006c0c:	3fe90000 	.word	0x3fe90000
 8006c10:	3fd20000 	.word	0x3fd20000
 8006c14:	00000000 	.word	0x00000000

08006c18 <__kernel_sin>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	ec55 4b10 	vmov	r4, r5, d0
 8006c20:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006c24:	b085      	sub	sp, #20
 8006c26:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006c2a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006c2e:	4680      	mov	r8, r0
 8006c30:	d205      	bcs.n	8006c3e <__kernel_sin+0x26>
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 ff3b 	bl	8000ab0 <__aeabi_d2iz>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d052      	beq.n	8006ce4 <__kernel_sin+0xcc>
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	4620      	mov	r0, r4
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7f9 fc83 	bl	8000550 <__aeabi_dmul>
 8006c4a:	4682      	mov	sl, r0
 8006c4c:	468b      	mov	fp, r1
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4620      	mov	r0, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	f7f9 fc7b 	bl	8000550 <__aeabi_dmul>
 8006c5a:	a342      	add	r3, pc, #264	@ (adr r3, 8006d64 <__kernel_sin+0x14c>)
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	e9cd 0100 	strd	r0, r1, [sp]
 8006c64:	4650      	mov	r0, sl
 8006c66:	4659      	mov	r1, fp
 8006c68:	f7f9 fc72 	bl	8000550 <__aeabi_dmul>
 8006c6c:	a33f      	add	r3, pc, #252	@ (adr r3, 8006d6c <__kernel_sin+0x154>)
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f7f9 fab5 	bl	80001e0 <__aeabi_dsub>
 8006c76:	4652      	mov	r2, sl
 8006c78:	465b      	mov	r3, fp
 8006c7a:	f7f9 fc69 	bl	8000550 <__aeabi_dmul>
 8006c7e:	a33d      	add	r3, pc, #244	@ (adr r3, 8006d74 <__kernel_sin+0x15c>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 faae 	bl	80001e4 <__adddf3>
 8006c88:	4652      	mov	r2, sl
 8006c8a:	465b      	mov	r3, fp
 8006c8c:	f7f9 fc60 	bl	8000550 <__aeabi_dmul>
 8006c90:	a33a      	add	r3, pc, #232	@ (adr r3, 8006d7c <__kernel_sin+0x164>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	f7f9 faa3 	bl	80001e0 <__aeabi_dsub>
 8006c9a:	4652      	mov	r2, sl
 8006c9c:	465b      	mov	r3, fp
 8006c9e:	f7f9 fc57 	bl	8000550 <__aeabi_dmul>
 8006ca2:	a338      	add	r3, pc, #224	@ (adr r3, 8006d84 <__kernel_sin+0x16c>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fa9c 	bl	80001e4 <__adddf3>
 8006cac:	4606      	mov	r6, r0
 8006cae:	460f      	mov	r7, r1
 8006cb0:	f1b8 0f00 	cmp.w	r8, #0
 8006cb4:	d11b      	bne.n	8006cee <__kernel_sin+0xd6>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4650      	mov	r0, sl
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	f7f9 fc47 	bl	8000550 <__aeabi_dmul>
 8006cc2:	a325      	add	r3, pc, #148	@ (adr r3, 8006d58 <__kernel_sin+0x140>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f7f9 fa8a 	bl	80001e0 <__aeabi_dsub>
 8006ccc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cd0:	f7f9 fc3e 	bl	8000550 <__aeabi_dmul>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 fa82 	bl	80001e4 <__adddf3>
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	ec45 4b10 	vmov	d0, r4, r5
 8006ce8:	b005      	add	sp, #20
 8006cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d60 <__kernel_sin+0x148>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f7f9 fc2b 	bl	8000550 <__aeabi_dmul>
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	4680      	mov	r8, r0
 8006cfe:	4689      	mov	r9, r1
 8006d00:	463b      	mov	r3, r7
 8006d02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d06:	f7f9 fc23 	bl	8000550 <__aeabi_dmul>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4640      	mov	r0, r8
 8006d10:	4649      	mov	r1, r9
 8006d12:	f7f9 fa65 	bl	80001e0 <__aeabi_dsub>
 8006d16:	4652      	mov	r2, sl
 8006d18:	465b      	mov	r3, fp
 8006d1a:	f7f9 fc19 	bl	8000550 <__aeabi_dmul>
 8006d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d22:	f7f9 fa5d 	bl	80001e0 <__aeabi_dsub>
 8006d26:	a30c      	add	r3, pc, #48	@ (adr r3, 8006d58 <__kernel_sin+0x140>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	460f      	mov	r7, r1
 8006d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d34:	f7f9 fc0c 	bl	8000550 <__aeabi_dmul>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 fa50 	bl	80001e4 <__adddf3>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4620      	mov	r0, r4
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f7f9 fa48 	bl	80001e0 <__aeabi_dsub>
 8006d50:	e7c6      	b.n	8006ce0 <__kernel_sin+0xc8>
 8006d52:	bf00      	nop
 8006d54:	f3af 8000 	nop.w
 8006d58:	55555549 	.word	0x55555549
 8006d5c:	3fc55555 	.word	0x3fc55555
 8006d60:	3fe00000 	.word	0x3fe00000
 8006d64:	5acfd57c 	.word	0x5acfd57c
 8006d68:	3de5d93a 	.word	0x3de5d93a
 8006d6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006d70:	3e5ae5e6 	.word	0x3e5ae5e6
 8006d74:	57b1fe7d 	.word	0x57b1fe7d
 8006d78:	3ec71de3 	.word	0x3ec71de3
 8006d7c:	19c161d5 	.word	0x19c161d5
 8006d80:	3f2a01a0 	.word	0x3f2a01a0
 8006d84:	1110f8a6 	.word	0x1110f8a6
 8006d88:	3f811111 	.word	0x3f811111
 8006d8c:	00000000 	.word	0x00000000

08006d90 <__ieee754_atan2>:
 8006d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d94:	ec57 6b11 	vmov	r6, r7, d1
 8006d98:	4273      	negs	r3, r6
 8006d9a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006f18 <__ieee754_atan2+0x188>
 8006d9e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8006da2:	4333      	orrs	r3, r6
 8006da4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006da8:	4543      	cmp	r3, r8
 8006daa:	ec51 0b10 	vmov	r0, r1, d0
 8006dae:	4635      	mov	r5, r6
 8006db0:	d809      	bhi.n	8006dc6 <__ieee754_atan2+0x36>
 8006db2:	4244      	negs	r4, r0
 8006db4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006db8:	4304      	orrs	r4, r0
 8006dba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006dbe:	4544      	cmp	r4, r8
 8006dc0:	468e      	mov	lr, r1
 8006dc2:	4681      	mov	r9, r0
 8006dc4:	d907      	bls.n	8006dd6 <__ieee754_atan2+0x46>
 8006dc6:	4632      	mov	r2, r6
 8006dc8:	463b      	mov	r3, r7
 8006dca:	f7f9 fa0b 	bl	80001e4 <__adddf3>
 8006dce:	ec41 0b10 	vmov	d0, r0, r1
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8006dda:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8006dde:	4334      	orrs	r4, r6
 8006de0:	d103      	bne.n	8006dea <__ieee754_atan2+0x5a>
 8006de2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de6:	f000 bfdb 	b.w	8007da0 <atan>
 8006dea:	17bc      	asrs	r4, r7, #30
 8006dec:	f004 0402 	and.w	r4, r4, #2
 8006df0:	ea53 0909 	orrs.w	r9, r3, r9
 8006df4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006df8:	d107      	bne.n	8006e0a <__ieee754_atan2+0x7a>
 8006dfa:	2c02      	cmp	r4, #2
 8006dfc:	d05f      	beq.n	8006ebe <__ieee754_atan2+0x12e>
 8006dfe:	2c03      	cmp	r4, #3
 8006e00:	d1e5      	bne.n	8006dce <__ieee754_atan2+0x3e>
 8006e02:	a141      	add	r1, pc, #260	@ (adr r1, 8006f08 <__ieee754_atan2+0x178>)
 8006e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e08:	e7e1      	b.n	8006dce <__ieee754_atan2+0x3e>
 8006e0a:	4315      	orrs	r5, r2
 8006e0c:	d106      	bne.n	8006e1c <__ieee754_atan2+0x8c>
 8006e0e:	f1be 0f00 	cmp.w	lr, #0
 8006e12:	da5f      	bge.n	8006ed4 <__ieee754_atan2+0x144>
 8006e14:	a13e      	add	r1, pc, #248	@ (adr r1, 8006f10 <__ieee754_atan2+0x180>)
 8006e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e1a:	e7d8      	b.n	8006dce <__ieee754_atan2+0x3e>
 8006e1c:	4542      	cmp	r2, r8
 8006e1e:	d10f      	bne.n	8006e40 <__ieee754_atan2+0xb0>
 8006e20:	4293      	cmp	r3, r2
 8006e22:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e26:	d107      	bne.n	8006e38 <__ieee754_atan2+0xa8>
 8006e28:	2c02      	cmp	r4, #2
 8006e2a:	d84c      	bhi.n	8006ec6 <__ieee754_atan2+0x136>
 8006e2c:	4b34      	ldr	r3, [pc, #208]	@ (8006f00 <__ieee754_atan2+0x170>)
 8006e2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e36:	e7ca      	b.n	8006dce <__ieee754_atan2+0x3e>
 8006e38:	2c02      	cmp	r4, #2
 8006e3a:	d848      	bhi.n	8006ece <__ieee754_atan2+0x13e>
 8006e3c:	4b31      	ldr	r3, [pc, #196]	@ (8006f04 <__ieee754_atan2+0x174>)
 8006e3e:	e7f6      	b.n	8006e2e <__ieee754_atan2+0x9e>
 8006e40:	4543      	cmp	r3, r8
 8006e42:	d0e4      	beq.n	8006e0e <__ieee754_atan2+0x7e>
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8006e4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e4e:	da1e      	bge.n	8006e8e <__ieee754_atan2+0xfe>
 8006e50:	2f00      	cmp	r7, #0
 8006e52:	da01      	bge.n	8006e58 <__ieee754_atan2+0xc8>
 8006e54:	323c      	adds	r2, #60	@ 0x3c
 8006e56:	db1e      	blt.n	8006e96 <__ieee754_atan2+0x106>
 8006e58:	4632      	mov	r2, r6
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	f7f9 fca2 	bl	80007a4 <__aeabi_ddiv>
 8006e60:	ec41 0b10 	vmov	d0, r0, r1
 8006e64:	f001 f934 	bl	80080d0 <fabs>
 8006e68:	f000 ff9a 	bl	8007da0 <atan>
 8006e6c:	ec51 0b10 	vmov	r0, r1, d0
 8006e70:	2c01      	cmp	r4, #1
 8006e72:	d013      	beq.n	8006e9c <__ieee754_atan2+0x10c>
 8006e74:	2c02      	cmp	r4, #2
 8006e76:	d015      	beq.n	8006ea4 <__ieee754_atan2+0x114>
 8006e78:	2c00      	cmp	r4, #0
 8006e7a:	d0a8      	beq.n	8006dce <__ieee754_atan2+0x3e>
 8006e7c:	a318      	add	r3, pc, #96	@ (adr r3, 8006ee0 <__ieee754_atan2+0x150>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f7f9 f9ad 	bl	80001e0 <__aeabi_dsub>
 8006e86:	a318      	add	r3, pc, #96	@ (adr r3, 8006ee8 <__ieee754_atan2+0x158>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	e014      	b.n	8006eb8 <__ieee754_atan2+0x128>
 8006e8e:	a118      	add	r1, pc, #96	@ (adr r1, 8006ef0 <__ieee754_atan2+0x160>)
 8006e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e94:	e7ec      	b.n	8006e70 <__ieee754_atan2+0xe0>
 8006e96:	2000      	movs	r0, #0
 8006e98:	2100      	movs	r1, #0
 8006e9a:	e7e9      	b.n	8006e70 <__ieee754_atan2+0xe0>
 8006e9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	e794      	b.n	8006dce <__ieee754_atan2+0x3e>
 8006ea4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ee0 <__ieee754_atan2+0x150>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f7f9 f999 	bl	80001e0 <__aeabi_dsub>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	a10d      	add	r1, pc, #52	@ (adr r1, 8006ee8 <__ieee754_atan2+0x158>)
 8006eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eb8:	f7f9 f992 	bl	80001e0 <__aeabi_dsub>
 8006ebc:	e787      	b.n	8006dce <__ieee754_atan2+0x3e>
 8006ebe:	a10a      	add	r1, pc, #40	@ (adr r1, 8006ee8 <__ieee754_atan2+0x158>)
 8006ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ec4:	e783      	b.n	8006dce <__ieee754_atan2+0x3e>
 8006ec6:	a10c      	add	r1, pc, #48	@ (adr r1, 8006ef8 <__ieee754_atan2+0x168>)
 8006ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ecc:	e77f      	b.n	8006dce <__ieee754_atan2+0x3e>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	e77c      	b.n	8006dce <__ieee754_atan2+0x3e>
 8006ed4:	a106      	add	r1, pc, #24	@ (adr r1, 8006ef0 <__ieee754_atan2+0x160>)
 8006ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eda:	e778      	b.n	8006dce <__ieee754_atan2+0x3e>
 8006edc:	f3af 8000 	nop.w
 8006ee0:	33145c07 	.word	0x33145c07
 8006ee4:	3ca1a626 	.word	0x3ca1a626
 8006ee8:	54442d18 	.word	0x54442d18
 8006eec:	400921fb 	.word	0x400921fb
 8006ef0:	54442d18 	.word	0x54442d18
 8006ef4:	3ff921fb 	.word	0x3ff921fb
 8006ef8:	54442d18 	.word	0x54442d18
 8006efc:	3fe921fb 	.word	0x3fe921fb
 8006f00:	08008a50 	.word	0x08008a50
 8006f04:	08008a38 	.word	0x08008a38
 8006f08:	54442d18 	.word	0x54442d18
 8006f0c:	c00921fb 	.word	0xc00921fb
 8006f10:	54442d18 	.word	0x54442d18
 8006f14:	bff921fb 	.word	0xbff921fb
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	00000000 	.word	0x00000000

08006f20 <__ieee754_pow>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	b091      	sub	sp, #68	@ 0x44
 8006f26:	ed8d 1b00 	vstr	d1, [sp]
 8006f2a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006f2e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006f32:	ea5a 0001 	orrs.w	r0, sl, r1
 8006f36:	ec57 6b10 	vmov	r6, r7, d0
 8006f3a:	d113      	bne.n	8006f64 <__ieee754_pow+0x44>
 8006f3c:	19b3      	adds	r3, r6, r6
 8006f3e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006f42:	4152      	adcs	r2, r2
 8006f44:	4298      	cmp	r0, r3
 8006f46:	4b98      	ldr	r3, [pc, #608]	@ (80071a8 <__ieee754_pow+0x288>)
 8006f48:	4193      	sbcs	r3, r2
 8006f4a:	f080 84ea 	bcs.w	8007922 <__ieee754_pow+0xa02>
 8006f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f52:	4630      	mov	r0, r6
 8006f54:	4639      	mov	r1, r7
 8006f56:	f7f9 f945 	bl	80001e4 <__adddf3>
 8006f5a:	ec41 0b10 	vmov	d0, r0, r1
 8006f5e:	b011      	add	sp, #68	@ 0x44
 8006f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f64:	4a91      	ldr	r2, [pc, #580]	@ (80071ac <__ieee754_pow+0x28c>)
 8006f66:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006f6a:	4590      	cmp	r8, r2
 8006f6c:	463d      	mov	r5, r7
 8006f6e:	4633      	mov	r3, r6
 8006f70:	d806      	bhi.n	8006f80 <__ieee754_pow+0x60>
 8006f72:	d101      	bne.n	8006f78 <__ieee754_pow+0x58>
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	d1ea      	bne.n	8006f4e <__ieee754_pow+0x2e>
 8006f78:	4592      	cmp	sl, r2
 8006f7a:	d801      	bhi.n	8006f80 <__ieee754_pow+0x60>
 8006f7c:	d10e      	bne.n	8006f9c <__ieee754_pow+0x7c>
 8006f7e:	b169      	cbz	r1, 8006f9c <__ieee754_pow+0x7c>
 8006f80:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006f84:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006f88:	431d      	orrs	r5, r3
 8006f8a:	d1e0      	bne.n	8006f4e <__ieee754_pow+0x2e>
 8006f8c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f90:	18db      	adds	r3, r3, r3
 8006f92:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006f96:	4152      	adcs	r2, r2
 8006f98:	429d      	cmp	r5, r3
 8006f9a:	e7d4      	b.n	8006f46 <__ieee754_pow+0x26>
 8006f9c:	2d00      	cmp	r5, #0
 8006f9e:	46c3      	mov	fp, r8
 8006fa0:	da3a      	bge.n	8007018 <__ieee754_pow+0xf8>
 8006fa2:	4a83      	ldr	r2, [pc, #524]	@ (80071b0 <__ieee754_pow+0x290>)
 8006fa4:	4592      	cmp	sl, r2
 8006fa6:	d84d      	bhi.n	8007044 <__ieee754_pow+0x124>
 8006fa8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006fac:	4592      	cmp	sl, r2
 8006fae:	f240 84c7 	bls.w	8007940 <__ieee754_pow+0xa20>
 8006fb2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006fb6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006fba:	2a14      	cmp	r2, #20
 8006fbc:	dd0f      	ble.n	8006fde <__ieee754_pow+0xbe>
 8006fbe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006fc2:	fa21 f402 	lsr.w	r4, r1, r2
 8006fc6:	fa04 f202 	lsl.w	r2, r4, r2
 8006fca:	428a      	cmp	r2, r1
 8006fcc:	f040 84b8 	bne.w	8007940 <__ieee754_pow+0xa20>
 8006fd0:	f004 0401 	and.w	r4, r4, #1
 8006fd4:	f1c4 0402 	rsb	r4, r4, #2
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	d158      	bne.n	800708e <__ieee754_pow+0x16e>
 8006fdc:	e00e      	b.n	8006ffc <__ieee754_pow+0xdc>
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	d154      	bne.n	800708c <__ieee754_pow+0x16c>
 8006fe2:	f1c2 0214 	rsb	r2, r2, #20
 8006fe6:	fa4a f402 	asr.w	r4, sl, r2
 8006fea:	fa04 f202 	lsl.w	r2, r4, r2
 8006fee:	4552      	cmp	r2, sl
 8006ff0:	f040 84a3 	bne.w	800793a <__ieee754_pow+0xa1a>
 8006ff4:	f004 0401 	and.w	r4, r4, #1
 8006ff8:	f1c4 0402 	rsb	r4, r4, #2
 8006ffc:	4a6d      	ldr	r2, [pc, #436]	@ (80071b4 <__ieee754_pow+0x294>)
 8006ffe:	4592      	cmp	sl, r2
 8007000:	d12e      	bne.n	8007060 <__ieee754_pow+0x140>
 8007002:	f1b9 0f00 	cmp.w	r9, #0
 8007006:	f280 8494 	bge.w	8007932 <__ieee754_pow+0xa12>
 800700a:	496a      	ldr	r1, [pc, #424]	@ (80071b4 <__ieee754_pow+0x294>)
 800700c:	4632      	mov	r2, r6
 800700e:	463b      	mov	r3, r7
 8007010:	2000      	movs	r0, #0
 8007012:	f7f9 fbc7 	bl	80007a4 <__aeabi_ddiv>
 8007016:	e7a0      	b.n	8006f5a <__ieee754_pow+0x3a>
 8007018:	2400      	movs	r4, #0
 800701a:	bbc1      	cbnz	r1, 800708e <__ieee754_pow+0x16e>
 800701c:	4a63      	ldr	r2, [pc, #396]	@ (80071ac <__ieee754_pow+0x28c>)
 800701e:	4592      	cmp	sl, r2
 8007020:	d1ec      	bne.n	8006ffc <__ieee754_pow+0xdc>
 8007022:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007026:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800702a:	431a      	orrs	r2, r3
 800702c:	f000 8479 	beq.w	8007922 <__ieee754_pow+0xa02>
 8007030:	4b61      	ldr	r3, [pc, #388]	@ (80071b8 <__ieee754_pow+0x298>)
 8007032:	4598      	cmp	r8, r3
 8007034:	d908      	bls.n	8007048 <__ieee754_pow+0x128>
 8007036:	f1b9 0f00 	cmp.w	r9, #0
 800703a:	f2c0 8476 	blt.w	800792a <__ieee754_pow+0xa0a>
 800703e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007042:	e78a      	b.n	8006f5a <__ieee754_pow+0x3a>
 8007044:	2402      	movs	r4, #2
 8007046:	e7e8      	b.n	800701a <__ieee754_pow+0xfa>
 8007048:	f1b9 0f00 	cmp.w	r9, #0
 800704c:	f04f 0000 	mov.w	r0, #0
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	da81      	bge.n	8006f5a <__ieee754_pow+0x3a>
 8007056:	e9dd 0300 	ldrd	r0, r3, [sp]
 800705a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800705e:	e77c      	b.n	8006f5a <__ieee754_pow+0x3a>
 8007060:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007064:	d106      	bne.n	8007074 <__ieee754_pow+0x154>
 8007066:	4632      	mov	r2, r6
 8007068:	463b      	mov	r3, r7
 800706a:	4630      	mov	r0, r6
 800706c:	4639      	mov	r1, r7
 800706e:	f7f9 fa6f 	bl	8000550 <__aeabi_dmul>
 8007072:	e772      	b.n	8006f5a <__ieee754_pow+0x3a>
 8007074:	4a51      	ldr	r2, [pc, #324]	@ (80071bc <__ieee754_pow+0x29c>)
 8007076:	4591      	cmp	r9, r2
 8007078:	d109      	bne.n	800708e <__ieee754_pow+0x16e>
 800707a:	2d00      	cmp	r5, #0
 800707c:	db07      	blt.n	800708e <__ieee754_pow+0x16e>
 800707e:	ec47 6b10 	vmov	d0, r6, r7
 8007082:	b011      	add	sp, #68	@ 0x44
 8007084:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007088:	f7ff bc22 	b.w	80068d0 <__ieee754_sqrt>
 800708c:	2400      	movs	r4, #0
 800708e:	ec47 6b10 	vmov	d0, r6, r7
 8007092:	9302      	str	r3, [sp, #8]
 8007094:	f001 f81c 	bl	80080d0 <fabs>
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	ec51 0b10 	vmov	r0, r1, d0
 800709e:	bb53      	cbnz	r3, 80070f6 <__ieee754_pow+0x1d6>
 80070a0:	4b44      	ldr	r3, [pc, #272]	@ (80071b4 <__ieee754_pow+0x294>)
 80070a2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d002      	beq.n	80070b0 <__ieee754_pow+0x190>
 80070aa:	f1b8 0f00 	cmp.w	r8, #0
 80070ae:	d122      	bne.n	80070f6 <__ieee754_pow+0x1d6>
 80070b0:	f1b9 0f00 	cmp.w	r9, #0
 80070b4:	da05      	bge.n	80070c2 <__ieee754_pow+0x1a2>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	2000      	movs	r0, #0
 80070bc:	493d      	ldr	r1, [pc, #244]	@ (80071b4 <__ieee754_pow+0x294>)
 80070be:	f7f9 fb71 	bl	80007a4 <__aeabi_ddiv>
 80070c2:	2d00      	cmp	r5, #0
 80070c4:	f6bf af49 	bge.w	8006f5a <__ieee754_pow+0x3a>
 80070c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80070cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80070d0:	ea58 0804 	orrs.w	r8, r8, r4
 80070d4:	d108      	bne.n	80070e8 <__ieee754_pow+0x1c8>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	f7f9 f87f 	bl	80001e0 <__aeabi_dsub>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	e794      	b.n	8007012 <__ieee754_pow+0xf2>
 80070e8:	2c01      	cmp	r4, #1
 80070ea:	f47f af36 	bne.w	8006f5a <__ieee754_pow+0x3a>
 80070ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80070f2:	4619      	mov	r1, r3
 80070f4:	e731      	b.n	8006f5a <__ieee754_pow+0x3a>
 80070f6:	0feb      	lsrs	r3, r5, #31
 80070f8:	3b01      	subs	r3, #1
 80070fa:	ea53 0204 	orrs.w	r2, r3, r4
 80070fe:	d102      	bne.n	8007106 <__ieee754_pow+0x1e6>
 8007100:	4632      	mov	r2, r6
 8007102:	463b      	mov	r3, r7
 8007104:	e7e9      	b.n	80070da <__ieee754_pow+0x1ba>
 8007106:	3c01      	subs	r4, #1
 8007108:	431c      	orrs	r4, r3
 800710a:	d016      	beq.n	800713a <__ieee754_pow+0x21a>
 800710c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007198 <__ieee754_pow+0x278>
 8007110:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007114:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007118:	f240 8112 	bls.w	8007340 <__ieee754_pow+0x420>
 800711c:	4b28      	ldr	r3, [pc, #160]	@ (80071c0 <__ieee754_pow+0x2a0>)
 800711e:	459a      	cmp	sl, r3
 8007120:	4b25      	ldr	r3, [pc, #148]	@ (80071b8 <__ieee754_pow+0x298>)
 8007122:	d916      	bls.n	8007152 <__ieee754_pow+0x232>
 8007124:	4598      	cmp	r8, r3
 8007126:	d80b      	bhi.n	8007140 <__ieee754_pow+0x220>
 8007128:	f1b9 0f00 	cmp.w	r9, #0
 800712c:	da0b      	bge.n	8007146 <__ieee754_pow+0x226>
 800712e:	2000      	movs	r0, #0
 8007130:	b011      	add	sp, #68	@ 0x44
 8007132:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007136:	f001 b887 	b.w	8008248 <__math_oflow>
 800713a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80071a0 <__ieee754_pow+0x280>
 800713e:	e7e7      	b.n	8007110 <__ieee754_pow+0x1f0>
 8007140:	f1b9 0f00 	cmp.w	r9, #0
 8007144:	dcf3      	bgt.n	800712e <__ieee754_pow+0x20e>
 8007146:	2000      	movs	r0, #0
 8007148:	b011      	add	sp, #68	@ 0x44
 800714a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714e:	f001 b873 	b.w	8008238 <__math_uflow>
 8007152:	4598      	cmp	r8, r3
 8007154:	d20c      	bcs.n	8007170 <__ieee754_pow+0x250>
 8007156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800715a:	2200      	movs	r2, #0
 800715c:	2300      	movs	r3, #0
 800715e:	f7f9 fc69 	bl	8000a34 <__aeabi_dcmplt>
 8007162:	3800      	subs	r0, #0
 8007164:	bf18      	it	ne
 8007166:	2001      	movne	r0, #1
 8007168:	f1b9 0f00 	cmp.w	r9, #0
 800716c:	daec      	bge.n	8007148 <__ieee754_pow+0x228>
 800716e:	e7df      	b.n	8007130 <__ieee754_pow+0x210>
 8007170:	4b10      	ldr	r3, [pc, #64]	@ (80071b4 <__ieee754_pow+0x294>)
 8007172:	4598      	cmp	r8, r3
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	d924      	bls.n	80071c4 <__ieee754_pow+0x2a4>
 800717a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800717e:	2300      	movs	r3, #0
 8007180:	f7f9 fc58 	bl	8000a34 <__aeabi_dcmplt>
 8007184:	3800      	subs	r0, #0
 8007186:	bf18      	it	ne
 8007188:	2001      	movne	r0, #1
 800718a:	f1b9 0f00 	cmp.w	r9, #0
 800718e:	dccf      	bgt.n	8007130 <__ieee754_pow+0x210>
 8007190:	e7da      	b.n	8007148 <__ieee754_pow+0x228>
 8007192:	bf00      	nop
 8007194:	f3af 8000 	nop.w
 8007198:	00000000 	.word	0x00000000
 800719c:	3ff00000 	.word	0x3ff00000
 80071a0:	00000000 	.word	0x00000000
 80071a4:	bff00000 	.word	0xbff00000
 80071a8:	fff00000 	.word	0xfff00000
 80071ac:	7ff00000 	.word	0x7ff00000
 80071b0:	433fffff 	.word	0x433fffff
 80071b4:	3ff00000 	.word	0x3ff00000
 80071b8:	3fefffff 	.word	0x3fefffff
 80071bc:	3fe00000 	.word	0x3fe00000
 80071c0:	43f00000 	.word	0x43f00000
 80071c4:	4b5a      	ldr	r3, [pc, #360]	@ (8007330 <__ieee754_pow+0x410>)
 80071c6:	f7f9 f80b 	bl	80001e0 <__aeabi_dsub>
 80071ca:	a351      	add	r3, pc, #324	@ (adr r3, 8007310 <__ieee754_pow+0x3f0>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	4604      	mov	r4, r0
 80071d2:	460d      	mov	r5, r1
 80071d4:	f7f9 f9bc 	bl	8000550 <__aeabi_dmul>
 80071d8:	a34f      	add	r3, pc, #316	@ (adr r3, 8007318 <__ieee754_pow+0x3f8>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	4606      	mov	r6, r0
 80071e0:	460f      	mov	r7, r1
 80071e2:	4620      	mov	r0, r4
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7f9 f9b3 	bl	8000550 <__aeabi_dmul>
 80071ea:	4b52      	ldr	r3, [pc, #328]	@ (8007334 <__ieee754_pow+0x414>)
 80071ec:	4682      	mov	sl, r0
 80071ee:	468b      	mov	fp, r1
 80071f0:	2200      	movs	r2, #0
 80071f2:	4620      	mov	r0, r4
 80071f4:	4629      	mov	r1, r5
 80071f6:	f7f9 f9ab 	bl	8000550 <__aeabi_dmul>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	a148      	add	r1, pc, #288	@ (adr r1, 8007320 <__ieee754_pow+0x400>)
 8007200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007204:	f7f8 ffec 	bl	80001e0 <__aeabi_dsub>
 8007208:	4622      	mov	r2, r4
 800720a:	462b      	mov	r3, r5
 800720c:	f7f9 f9a0 	bl	8000550 <__aeabi_dmul>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	2000      	movs	r0, #0
 8007216:	4948      	ldr	r1, [pc, #288]	@ (8007338 <__ieee754_pow+0x418>)
 8007218:	f7f8 ffe2 	bl	80001e0 <__aeabi_dsub>
 800721c:	4622      	mov	r2, r4
 800721e:	4680      	mov	r8, r0
 8007220:	4689      	mov	r9, r1
 8007222:	462b      	mov	r3, r5
 8007224:	4620      	mov	r0, r4
 8007226:	4629      	mov	r1, r5
 8007228:	f7f9 f992 	bl	8000550 <__aeabi_dmul>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4640      	mov	r0, r8
 8007232:	4649      	mov	r1, r9
 8007234:	f7f9 f98c 	bl	8000550 <__aeabi_dmul>
 8007238:	a33b      	add	r3, pc, #236	@ (adr r3, 8007328 <__ieee754_pow+0x408>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f987 	bl	8000550 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4650      	mov	r0, sl
 8007248:	4659      	mov	r1, fp
 800724a:	f7f8 ffc9 	bl	80001e0 <__aeabi_dsub>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4680      	mov	r8, r0
 8007254:	4689      	mov	r9, r1
 8007256:	4630      	mov	r0, r6
 8007258:	4639      	mov	r1, r7
 800725a:	f7f8 ffc3 	bl	80001e4 <__adddf3>
 800725e:	2400      	movs	r4, #0
 8007260:	4632      	mov	r2, r6
 8007262:	463b      	mov	r3, r7
 8007264:	4620      	mov	r0, r4
 8007266:	460d      	mov	r5, r1
 8007268:	f7f8 ffba 	bl	80001e0 <__aeabi_dsub>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4640      	mov	r0, r8
 8007272:	4649      	mov	r1, r9
 8007274:	f7f8 ffb4 	bl	80001e0 <__aeabi_dsub>
 8007278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800727c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007280:	2300      	movs	r3, #0
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007288:	4606      	mov	r6, r0
 800728a:	460f      	mov	r7, r1
 800728c:	4652      	mov	r2, sl
 800728e:	465b      	mov	r3, fp
 8007290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007294:	f7f8 ffa4 	bl	80001e0 <__aeabi_dsub>
 8007298:	4622      	mov	r2, r4
 800729a:	462b      	mov	r3, r5
 800729c:	f7f9 f958 	bl	8000550 <__aeabi_dmul>
 80072a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072a4:	4680      	mov	r8, r0
 80072a6:	4689      	mov	r9, r1
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 f950 	bl	8000550 <__aeabi_dmul>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4640      	mov	r0, r8
 80072b6:	4649      	mov	r1, r9
 80072b8:	f7f8 ff94 	bl	80001e4 <__adddf3>
 80072bc:	4652      	mov	r2, sl
 80072be:	465b      	mov	r3, fp
 80072c0:	4606      	mov	r6, r0
 80072c2:	460f      	mov	r7, r1
 80072c4:	4620      	mov	r0, r4
 80072c6:	4629      	mov	r1, r5
 80072c8:	f7f9 f942 	bl	8000550 <__aeabi_dmul>
 80072cc:	460b      	mov	r3, r1
 80072ce:	4602      	mov	r2, r0
 80072d0:	4680      	mov	r8, r0
 80072d2:	4689      	mov	r9, r1
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f8 ff84 	bl	80001e4 <__adddf3>
 80072dc:	4b17      	ldr	r3, [pc, #92]	@ (800733c <__ieee754_pow+0x41c>)
 80072de:	4299      	cmp	r1, r3
 80072e0:	4604      	mov	r4, r0
 80072e2:	460d      	mov	r5, r1
 80072e4:	468a      	mov	sl, r1
 80072e6:	468b      	mov	fp, r1
 80072e8:	f340 82ef 	ble.w	80078ca <__ieee754_pow+0x9aa>
 80072ec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80072f0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80072f4:	4303      	orrs	r3, r0
 80072f6:	f000 81e8 	beq.w	80076ca <__ieee754_pow+0x7aa>
 80072fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072fe:	2200      	movs	r2, #0
 8007300:	2300      	movs	r3, #0
 8007302:	f7f9 fb97 	bl	8000a34 <__aeabi_dcmplt>
 8007306:	3800      	subs	r0, #0
 8007308:	bf18      	it	ne
 800730a:	2001      	movne	r0, #1
 800730c:	e710      	b.n	8007130 <__ieee754_pow+0x210>
 800730e:	bf00      	nop
 8007310:	60000000 	.word	0x60000000
 8007314:	3ff71547 	.word	0x3ff71547
 8007318:	f85ddf44 	.word	0xf85ddf44
 800731c:	3e54ae0b 	.word	0x3e54ae0b
 8007320:	55555555 	.word	0x55555555
 8007324:	3fd55555 	.word	0x3fd55555
 8007328:	652b82fe 	.word	0x652b82fe
 800732c:	3ff71547 	.word	0x3ff71547
 8007330:	3ff00000 	.word	0x3ff00000
 8007334:	3fd00000 	.word	0x3fd00000
 8007338:	3fe00000 	.word	0x3fe00000
 800733c:	408fffff 	.word	0x408fffff
 8007340:	4bd5      	ldr	r3, [pc, #852]	@ (8007698 <__ieee754_pow+0x778>)
 8007342:	402b      	ands	r3, r5
 8007344:	2200      	movs	r2, #0
 8007346:	b92b      	cbnz	r3, 8007354 <__ieee754_pow+0x434>
 8007348:	4bd4      	ldr	r3, [pc, #848]	@ (800769c <__ieee754_pow+0x77c>)
 800734a:	f7f9 f901 	bl	8000550 <__aeabi_dmul>
 800734e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007352:	468b      	mov	fp, r1
 8007354:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007358:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800735c:	4413      	add	r3, r2
 800735e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007360:	4bcf      	ldr	r3, [pc, #828]	@ (80076a0 <__ieee754_pow+0x780>)
 8007362:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007366:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800736a:	459b      	cmp	fp, r3
 800736c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007370:	dd08      	ble.n	8007384 <__ieee754_pow+0x464>
 8007372:	4bcc      	ldr	r3, [pc, #816]	@ (80076a4 <__ieee754_pow+0x784>)
 8007374:	459b      	cmp	fp, r3
 8007376:	f340 81a5 	ble.w	80076c4 <__ieee754_pow+0x7a4>
 800737a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800737c:	3301      	adds	r3, #1
 800737e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007380:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007384:	f04f 0a00 	mov.w	sl, #0
 8007388:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800738c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800738e:	4bc6      	ldr	r3, [pc, #792]	@ (80076a8 <__ieee754_pow+0x788>)
 8007390:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007394:	ed93 7b00 	vldr	d7, [r3]
 8007398:	4629      	mov	r1, r5
 800739a:	ec53 2b17 	vmov	r2, r3, d7
 800739e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80073a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073a6:	f7f8 ff1b 	bl	80001e0 <__aeabi_dsub>
 80073aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073ae:	4606      	mov	r6, r0
 80073b0:	460f      	mov	r7, r1
 80073b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073b6:	f7f8 ff15 	bl	80001e4 <__adddf3>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	2000      	movs	r0, #0
 80073c0:	49ba      	ldr	r1, [pc, #744]	@ (80076ac <__ieee754_pow+0x78c>)
 80073c2:	f7f9 f9ef 	bl	80007a4 <__aeabi_ddiv>
 80073c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f9 f8bd 	bl	8000550 <__aeabi_dmul>
 80073d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80073de:	106d      	asrs	r5, r5, #1
 80073e0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80073e4:	f04f 0b00 	mov.w	fp, #0
 80073e8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80073ec:	4661      	mov	r1, ip
 80073ee:	2200      	movs	r2, #0
 80073f0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80073f4:	4658      	mov	r0, fp
 80073f6:	46e1      	mov	r9, ip
 80073f8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80073fc:	4614      	mov	r4, r2
 80073fe:	461d      	mov	r5, r3
 8007400:	f7f9 f8a6 	bl	8000550 <__aeabi_dmul>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4630      	mov	r0, r6
 800740a:	4639      	mov	r1, r7
 800740c:	f7f8 fee8 	bl	80001e0 <__aeabi_dsub>
 8007410:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007414:	4606      	mov	r6, r0
 8007416:	460f      	mov	r7, r1
 8007418:	4620      	mov	r0, r4
 800741a:	4629      	mov	r1, r5
 800741c:	f7f8 fee0 	bl	80001e0 <__aeabi_dsub>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007428:	f7f8 feda 	bl	80001e0 <__aeabi_dsub>
 800742c:	465a      	mov	r2, fp
 800742e:	464b      	mov	r3, r9
 8007430:	f7f9 f88e 	bl	8000550 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f8 fed0 	bl	80001e0 <__aeabi_dsub>
 8007440:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007444:	f7f9 f884 	bl	8000550 <__aeabi_dmul>
 8007448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800744c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007450:	4610      	mov	r0, r2
 8007452:	4619      	mov	r1, r3
 8007454:	f7f9 f87c 	bl	8000550 <__aeabi_dmul>
 8007458:	a37d      	add	r3, pc, #500	@ (adr r3, 8007650 <__ieee754_pow+0x730>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	f7f9 f875 	bl	8000550 <__aeabi_dmul>
 8007466:	a37c      	add	r3, pc, #496	@ (adr r3, 8007658 <__ieee754_pow+0x738>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 feba 	bl	80001e4 <__adddf3>
 8007470:	4622      	mov	r2, r4
 8007472:	462b      	mov	r3, r5
 8007474:	f7f9 f86c 	bl	8000550 <__aeabi_dmul>
 8007478:	a379      	add	r3, pc, #484	@ (adr r3, 8007660 <__ieee754_pow+0x740>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f8 feb1 	bl	80001e4 <__adddf3>
 8007482:	4622      	mov	r2, r4
 8007484:	462b      	mov	r3, r5
 8007486:	f7f9 f863 	bl	8000550 <__aeabi_dmul>
 800748a:	a377      	add	r3, pc, #476	@ (adr r3, 8007668 <__ieee754_pow+0x748>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 fea8 	bl	80001e4 <__adddf3>
 8007494:	4622      	mov	r2, r4
 8007496:	462b      	mov	r3, r5
 8007498:	f7f9 f85a 	bl	8000550 <__aeabi_dmul>
 800749c:	a374      	add	r3, pc, #464	@ (adr r3, 8007670 <__ieee754_pow+0x750>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 fe9f 	bl	80001e4 <__adddf3>
 80074a6:	4622      	mov	r2, r4
 80074a8:	462b      	mov	r3, r5
 80074aa:	f7f9 f851 	bl	8000550 <__aeabi_dmul>
 80074ae:	a372      	add	r3, pc, #456	@ (adr r3, 8007678 <__ieee754_pow+0x758>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f8 fe96 	bl	80001e4 <__adddf3>
 80074b8:	4622      	mov	r2, r4
 80074ba:	4606      	mov	r6, r0
 80074bc:	460f      	mov	r7, r1
 80074be:	462b      	mov	r3, r5
 80074c0:	4620      	mov	r0, r4
 80074c2:	4629      	mov	r1, r5
 80074c4:	f7f9 f844 	bl	8000550 <__aeabi_dmul>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4630      	mov	r0, r6
 80074ce:	4639      	mov	r1, r7
 80074d0:	f7f9 f83e 	bl	8000550 <__aeabi_dmul>
 80074d4:	465a      	mov	r2, fp
 80074d6:	4604      	mov	r4, r0
 80074d8:	460d      	mov	r5, r1
 80074da:	464b      	mov	r3, r9
 80074dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074e0:	f7f8 fe80 	bl	80001e4 <__adddf3>
 80074e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074e8:	f7f9 f832 	bl	8000550 <__aeabi_dmul>
 80074ec:	4622      	mov	r2, r4
 80074ee:	462b      	mov	r3, r5
 80074f0:	f7f8 fe78 	bl	80001e4 <__adddf3>
 80074f4:	465a      	mov	r2, fp
 80074f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80074fa:	464b      	mov	r3, r9
 80074fc:	4658      	mov	r0, fp
 80074fe:	4649      	mov	r1, r9
 8007500:	f7f9 f826 	bl	8000550 <__aeabi_dmul>
 8007504:	4b6a      	ldr	r3, [pc, #424]	@ (80076b0 <__ieee754_pow+0x790>)
 8007506:	2200      	movs	r2, #0
 8007508:	4606      	mov	r6, r0
 800750a:	460f      	mov	r7, r1
 800750c:	f7f8 fe6a 	bl	80001e4 <__adddf3>
 8007510:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007514:	f7f8 fe66 	bl	80001e4 <__adddf3>
 8007518:	46d8      	mov	r8, fp
 800751a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800751e:	460d      	mov	r5, r1
 8007520:	465a      	mov	r2, fp
 8007522:	460b      	mov	r3, r1
 8007524:	4640      	mov	r0, r8
 8007526:	4649      	mov	r1, r9
 8007528:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800752c:	f7f9 f810 	bl	8000550 <__aeabi_dmul>
 8007530:	465c      	mov	r4, fp
 8007532:	4680      	mov	r8, r0
 8007534:	4689      	mov	r9, r1
 8007536:	4b5e      	ldr	r3, [pc, #376]	@ (80076b0 <__ieee754_pow+0x790>)
 8007538:	2200      	movs	r2, #0
 800753a:	4620      	mov	r0, r4
 800753c:	4629      	mov	r1, r5
 800753e:	f7f8 fe4f 	bl	80001e0 <__aeabi_dsub>
 8007542:	4632      	mov	r2, r6
 8007544:	463b      	mov	r3, r7
 8007546:	f7f8 fe4b 	bl	80001e0 <__aeabi_dsub>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007552:	f7f8 fe45 	bl	80001e0 <__aeabi_dsub>
 8007556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800755a:	f7f8 fff9 	bl	8000550 <__aeabi_dmul>
 800755e:	4622      	mov	r2, r4
 8007560:	4606      	mov	r6, r0
 8007562:	460f      	mov	r7, r1
 8007564:	462b      	mov	r3, r5
 8007566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800756a:	f7f8 fff1 	bl	8000550 <__aeabi_dmul>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4630      	mov	r0, r6
 8007574:	4639      	mov	r1, r7
 8007576:	f7f8 fe35 	bl	80001e4 <__adddf3>
 800757a:	4606      	mov	r6, r0
 800757c:	460f      	mov	r7, r1
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f8 fe2d 	bl	80001e4 <__adddf3>
 800758a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800758e:	a33c      	add	r3, pc, #240	@ (adr r3, 8007680 <__ieee754_pow+0x760>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	4658      	mov	r0, fp
 8007596:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800759a:	460d      	mov	r5, r1
 800759c:	f7f8 ffd8 	bl	8000550 <__aeabi_dmul>
 80075a0:	465c      	mov	r4, fp
 80075a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075a6:	4642      	mov	r2, r8
 80075a8:	464b      	mov	r3, r9
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f8 fe17 	bl	80001e0 <__aeabi_dsub>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4630      	mov	r0, r6
 80075b8:	4639      	mov	r1, r7
 80075ba:	f7f8 fe11 	bl	80001e0 <__aeabi_dsub>
 80075be:	a332      	add	r3, pc, #200	@ (adr r3, 8007688 <__ieee754_pow+0x768>)
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f7f8 ffc4 	bl	8000550 <__aeabi_dmul>
 80075c8:	a331      	add	r3, pc, #196	@ (adr r3, 8007690 <__ieee754_pow+0x770>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	4606      	mov	r6, r0
 80075d0:	460f      	mov	r7, r1
 80075d2:	4620      	mov	r0, r4
 80075d4:	4629      	mov	r1, r5
 80075d6:	f7f8 ffbb 	bl	8000550 <__aeabi_dmul>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4630      	mov	r0, r6
 80075e0:	4639      	mov	r1, r7
 80075e2:	f7f8 fdff 	bl	80001e4 <__adddf3>
 80075e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80075e8:	4b32      	ldr	r3, [pc, #200]	@ (80076b4 <__ieee754_pow+0x794>)
 80075ea:	4413      	add	r3, r2
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f7f8 fdf8 	bl	80001e4 <__adddf3>
 80075f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075fa:	f7f8 ff3f 	bl	800047c <__aeabi_i2d>
 80075fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007600:	4b2d      	ldr	r3, [pc, #180]	@ (80076b8 <__ieee754_pow+0x798>)
 8007602:	4413      	add	r3, r2
 8007604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007608:	4606      	mov	r6, r0
 800760a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800760e:	460f      	mov	r7, r1
 8007610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007614:	f7f8 fde6 	bl	80001e4 <__adddf3>
 8007618:	4642      	mov	r2, r8
 800761a:	464b      	mov	r3, r9
 800761c:	f7f8 fde2 	bl	80001e4 <__adddf3>
 8007620:	4632      	mov	r2, r6
 8007622:	463b      	mov	r3, r7
 8007624:	f7f8 fdde 	bl	80001e4 <__adddf3>
 8007628:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800762c:	4632      	mov	r2, r6
 800762e:	463b      	mov	r3, r7
 8007630:	4658      	mov	r0, fp
 8007632:	460d      	mov	r5, r1
 8007634:	f7f8 fdd4 	bl	80001e0 <__aeabi_dsub>
 8007638:	4642      	mov	r2, r8
 800763a:	464b      	mov	r3, r9
 800763c:	f7f8 fdd0 	bl	80001e0 <__aeabi_dsub>
 8007640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007644:	f7f8 fdcc 	bl	80001e0 <__aeabi_dsub>
 8007648:	465c      	mov	r4, fp
 800764a:	4602      	mov	r2, r0
 800764c:	e036      	b.n	80076bc <__ieee754_pow+0x79c>
 800764e:	bf00      	nop
 8007650:	4a454eef 	.word	0x4a454eef
 8007654:	3fca7e28 	.word	0x3fca7e28
 8007658:	93c9db65 	.word	0x93c9db65
 800765c:	3fcd864a 	.word	0x3fcd864a
 8007660:	a91d4101 	.word	0xa91d4101
 8007664:	3fd17460 	.word	0x3fd17460
 8007668:	518f264d 	.word	0x518f264d
 800766c:	3fd55555 	.word	0x3fd55555
 8007670:	db6fabff 	.word	0xdb6fabff
 8007674:	3fdb6db6 	.word	0x3fdb6db6
 8007678:	33333303 	.word	0x33333303
 800767c:	3fe33333 	.word	0x3fe33333
 8007680:	e0000000 	.word	0xe0000000
 8007684:	3feec709 	.word	0x3feec709
 8007688:	dc3a03fd 	.word	0xdc3a03fd
 800768c:	3feec709 	.word	0x3feec709
 8007690:	145b01f5 	.word	0x145b01f5
 8007694:	be3e2fe0 	.word	0xbe3e2fe0
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	43400000 	.word	0x43400000
 80076a0:	0003988e 	.word	0x0003988e
 80076a4:	000bb679 	.word	0x000bb679
 80076a8:	08008a88 	.word	0x08008a88
 80076ac:	3ff00000 	.word	0x3ff00000
 80076b0:	40080000 	.word	0x40080000
 80076b4:	08008a68 	.word	0x08008a68
 80076b8:	08008a78 	.word	0x08008a78
 80076bc:	460b      	mov	r3, r1
 80076be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076c2:	e5d7      	b.n	8007274 <__ieee754_pow+0x354>
 80076c4:	f04f 0a01 	mov.w	sl, #1
 80076c8:	e65e      	b.n	8007388 <__ieee754_pow+0x468>
 80076ca:	a3b4      	add	r3, pc, #720	@ (adr r3, 800799c <__ieee754_pow+0xa7c>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	4630      	mov	r0, r6
 80076d2:	4639      	mov	r1, r7
 80076d4:	f7f8 fd86 	bl	80001e4 <__adddf3>
 80076d8:	4642      	mov	r2, r8
 80076da:	e9cd 0100 	strd	r0, r1, [sp]
 80076de:	464b      	mov	r3, r9
 80076e0:	4620      	mov	r0, r4
 80076e2:	4629      	mov	r1, r5
 80076e4:	f7f8 fd7c 	bl	80001e0 <__aeabi_dsub>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076f0:	f7f9 f9be 	bl	8000a70 <__aeabi_dcmpgt>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f47f ae00 	bne.w	80072fa <__ieee754_pow+0x3da>
 80076fa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80076fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007702:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007706:	fa43 fa0a 	asr.w	sl, r3, sl
 800770a:	44da      	add	sl, fp
 800770c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007710:	489d      	ldr	r0, [pc, #628]	@ (8007988 <__ieee754_pow+0xa68>)
 8007712:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007716:	4108      	asrs	r0, r1
 8007718:	ea00 030a 	and.w	r3, r0, sl
 800771c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007720:	f1c1 0114 	rsb	r1, r1, #20
 8007724:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007728:	fa4a fa01 	asr.w	sl, sl, r1
 800772c:	f1bb 0f00 	cmp.w	fp, #0
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	bfb8      	it	lt
 800773a:	f1ca 0a00 	rsblt	sl, sl, #0
 800773e:	f7f8 fd4f 	bl	80001e0 <__aeabi_dsub>
 8007742:	4680      	mov	r8, r0
 8007744:	4689      	mov	r9, r1
 8007746:	4632      	mov	r2, r6
 8007748:	463b      	mov	r3, r7
 800774a:	4640      	mov	r0, r8
 800774c:	4649      	mov	r1, r9
 800774e:	f7f8 fd49 	bl	80001e4 <__adddf3>
 8007752:	2400      	movs	r4, #0
 8007754:	a37c      	add	r3, pc, #496	@ (adr r3, 8007948 <__ieee754_pow+0xa28>)
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	4620      	mov	r0, r4
 800775c:	460d      	mov	r5, r1
 800775e:	f7f8 fef7 	bl	8000550 <__aeabi_dmul>
 8007762:	4642      	mov	r2, r8
 8007764:	e9cd 0100 	strd	r0, r1, [sp]
 8007768:	464b      	mov	r3, r9
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	f7f8 fd37 	bl	80001e0 <__aeabi_dsub>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4630      	mov	r0, r6
 8007778:	4639      	mov	r1, r7
 800777a:	f7f8 fd31 	bl	80001e0 <__aeabi_dsub>
 800777e:	a374      	add	r3, pc, #464	@ (adr r3, 8007950 <__ieee754_pow+0xa30>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f7f8 fee4 	bl	8000550 <__aeabi_dmul>
 8007788:	a373      	add	r3, pc, #460	@ (adr r3, 8007958 <__ieee754_pow+0xa38>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	4680      	mov	r8, r0
 8007790:	4689      	mov	r9, r1
 8007792:	4620      	mov	r0, r4
 8007794:	4629      	mov	r1, r5
 8007796:	f7f8 fedb 	bl	8000550 <__aeabi_dmul>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4640      	mov	r0, r8
 80077a0:	4649      	mov	r1, r9
 80077a2:	f7f8 fd1f 	bl	80001e4 <__adddf3>
 80077a6:	4604      	mov	r4, r0
 80077a8:	460d      	mov	r5, r1
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077b2:	f7f8 fd17 	bl	80001e4 <__adddf3>
 80077b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ba:	4680      	mov	r8, r0
 80077bc:	4689      	mov	r9, r1
 80077be:	f7f8 fd0f 	bl	80001e0 <__aeabi_dsub>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4620      	mov	r0, r4
 80077c8:	4629      	mov	r1, r5
 80077ca:	f7f8 fd09 	bl	80001e0 <__aeabi_dsub>
 80077ce:	4642      	mov	r2, r8
 80077d0:	4606      	mov	r6, r0
 80077d2:	460f      	mov	r7, r1
 80077d4:	464b      	mov	r3, r9
 80077d6:	4640      	mov	r0, r8
 80077d8:	4649      	mov	r1, r9
 80077da:	f7f8 feb9 	bl	8000550 <__aeabi_dmul>
 80077de:	a360      	add	r3, pc, #384	@ (adr r3, 8007960 <__ieee754_pow+0xa40>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	4604      	mov	r4, r0
 80077e6:	460d      	mov	r5, r1
 80077e8:	f7f8 feb2 	bl	8000550 <__aeabi_dmul>
 80077ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8007968 <__ieee754_pow+0xa48>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	f7f8 fcf5 	bl	80001e0 <__aeabi_dsub>
 80077f6:	4622      	mov	r2, r4
 80077f8:	462b      	mov	r3, r5
 80077fa:	f7f8 fea9 	bl	8000550 <__aeabi_dmul>
 80077fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8007970 <__ieee754_pow+0xa50>)
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f7f8 fcee 	bl	80001e4 <__adddf3>
 8007808:	4622      	mov	r2, r4
 800780a:	462b      	mov	r3, r5
 800780c:	f7f8 fea0 	bl	8000550 <__aeabi_dmul>
 8007810:	a359      	add	r3, pc, #356	@ (adr r3, 8007978 <__ieee754_pow+0xa58>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f7f8 fce3 	bl	80001e0 <__aeabi_dsub>
 800781a:	4622      	mov	r2, r4
 800781c:	462b      	mov	r3, r5
 800781e:	f7f8 fe97 	bl	8000550 <__aeabi_dmul>
 8007822:	a357      	add	r3, pc, #348	@ (adr r3, 8007980 <__ieee754_pow+0xa60>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fcdc 	bl	80001e4 <__adddf3>
 800782c:	4622      	mov	r2, r4
 800782e:	462b      	mov	r3, r5
 8007830:	f7f8 fe8e 	bl	8000550 <__aeabi_dmul>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4640      	mov	r0, r8
 800783a:	4649      	mov	r1, r9
 800783c:	f7f8 fcd0 	bl	80001e0 <__aeabi_dsub>
 8007840:	4604      	mov	r4, r0
 8007842:	460d      	mov	r5, r1
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4640      	mov	r0, r8
 800784a:	4649      	mov	r1, r9
 800784c:	f7f8 fe80 	bl	8000550 <__aeabi_dmul>
 8007850:	2200      	movs	r2, #0
 8007852:	e9cd 0100 	strd	r0, r1, [sp]
 8007856:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800785a:	4620      	mov	r0, r4
 800785c:	4629      	mov	r1, r5
 800785e:	f7f8 fcbf 	bl	80001e0 <__aeabi_dsub>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	e9dd 0100 	ldrd	r0, r1, [sp]
 800786a:	f7f8 ff9b 	bl	80007a4 <__aeabi_ddiv>
 800786e:	4632      	mov	r2, r6
 8007870:	4604      	mov	r4, r0
 8007872:	460d      	mov	r5, r1
 8007874:	463b      	mov	r3, r7
 8007876:	4640      	mov	r0, r8
 8007878:	4649      	mov	r1, r9
 800787a:	f7f8 fe69 	bl	8000550 <__aeabi_dmul>
 800787e:	4632      	mov	r2, r6
 8007880:	463b      	mov	r3, r7
 8007882:	f7f8 fcaf 	bl	80001e4 <__adddf3>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4620      	mov	r0, r4
 800788c:	4629      	mov	r1, r5
 800788e:	f7f8 fca7 	bl	80001e0 <__aeabi_dsub>
 8007892:	4642      	mov	r2, r8
 8007894:	464b      	mov	r3, r9
 8007896:	f7f8 fca3 	bl	80001e0 <__aeabi_dsub>
 800789a:	460b      	mov	r3, r1
 800789c:	4602      	mov	r2, r0
 800789e:	493b      	ldr	r1, [pc, #236]	@ (800798c <__ieee754_pow+0xa6c>)
 80078a0:	2000      	movs	r0, #0
 80078a2:	f7f8 fc9d 	bl	80001e0 <__aeabi_dsub>
 80078a6:	ec41 0b10 	vmov	d0, r0, r1
 80078aa:	ee10 3a90 	vmov	r3, s1
 80078ae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80078b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078b6:	da30      	bge.n	800791a <__ieee754_pow+0x9fa>
 80078b8:	4650      	mov	r0, sl
 80078ba:	f000 fc11 	bl	80080e0 <scalbn>
 80078be:	ec51 0b10 	vmov	r0, r1, d0
 80078c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c6:	f7ff bbd2 	b.w	800706e <__ieee754_pow+0x14e>
 80078ca:	4c31      	ldr	r4, [pc, #196]	@ (8007990 <__ieee754_pow+0xa70>)
 80078cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d91a      	bls.n	800790a <__ieee754_pow+0x9ea>
 80078d4:	4b2f      	ldr	r3, [pc, #188]	@ (8007994 <__ieee754_pow+0xa74>)
 80078d6:	440b      	add	r3, r1
 80078d8:	4303      	orrs	r3, r0
 80078da:	d009      	beq.n	80078f0 <__ieee754_pow+0x9d0>
 80078dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	f7f9 f8a6 	bl	8000a34 <__aeabi_dcmplt>
 80078e8:	3800      	subs	r0, #0
 80078ea:	bf18      	it	ne
 80078ec:	2001      	movne	r0, #1
 80078ee:	e42b      	b.n	8007148 <__ieee754_pow+0x228>
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	f7f8 fc74 	bl	80001e0 <__aeabi_dsub>
 80078f8:	4632      	mov	r2, r6
 80078fa:	463b      	mov	r3, r7
 80078fc:	f7f9 f8ae 	bl	8000a5c <__aeabi_dcmpge>
 8007900:	2800      	cmp	r0, #0
 8007902:	d1eb      	bne.n	80078dc <__ieee754_pow+0x9bc>
 8007904:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80079a4 <__ieee754_pow+0xa84>
 8007908:	e6f7      	b.n	80076fa <__ieee754_pow+0x7da>
 800790a:	469a      	mov	sl, r3
 800790c:	4b22      	ldr	r3, [pc, #136]	@ (8007998 <__ieee754_pow+0xa78>)
 800790e:	459a      	cmp	sl, r3
 8007910:	f63f aef3 	bhi.w	80076fa <__ieee754_pow+0x7da>
 8007914:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007918:	e715      	b.n	8007746 <__ieee754_pow+0x826>
 800791a:	ec51 0b10 	vmov	r0, r1, d0
 800791e:	4619      	mov	r1, r3
 8007920:	e7cf      	b.n	80078c2 <__ieee754_pow+0x9a2>
 8007922:	491a      	ldr	r1, [pc, #104]	@ (800798c <__ieee754_pow+0xa6c>)
 8007924:	2000      	movs	r0, #0
 8007926:	f7ff bb18 	b.w	8006f5a <__ieee754_pow+0x3a>
 800792a:	2000      	movs	r0, #0
 800792c:	2100      	movs	r1, #0
 800792e:	f7ff bb14 	b.w	8006f5a <__ieee754_pow+0x3a>
 8007932:	4630      	mov	r0, r6
 8007934:	4639      	mov	r1, r7
 8007936:	f7ff bb10 	b.w	8006f5a <__ieee754_pow+0x3a>
 800793a:	460c      	mov	r4, r1
 800793c:	f7ff bb5e 	b.w	8006ffc <__ieee754_pow+0xdc>
 8007940:	2400      	movs	r4, #0
 8007942:	f7ff bb49 	b.w	8006fd8 <__ieee754_pow+0xb8>
 8007946:	bf00      	nop
 8007948:	00000000 	.word	0x00000000
 800794c:	3fe62e43 	.word	0x3fe62e43
 8007950:	fefa39ef 	.word	0xfefa39ef
 8007954:	3fe62e42 	.word	0x3fe62e42
 8007958:	0ca86c39 	.word	0x0ca86c39
 800795c:	be205c61 	.word	0xbe205c61
 8007960:	72bea4d0 	.word	0x72bea4d0
 8007964:	3e663769 	.word	0x3e663769
 8007968:	c5d26bf1 	.word	0xc5d26bf1
 800796c:	3ebbbd41 	.word	0x3ebbbd41
 8007970:	af25de2c 	.word	0xaf25de2c
 8007974:	3f11566a 	.word	0x3f11566a
 8007978:	16bebd93 	.word	0x16bebd93
 800797c:	3f66c16c 	.word	0x3f66c16c
 8007980:	5555553e 	.word	0x5555553e
 8007984:	3fc55555 	.word	0x3fc55555
 8007988:	fff00000 	.word	0xfff00000
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	4090cbff 	.word	0x4090cbff
 8007994:	3f6f3400 	.word	0x3f6f3400
 8007998:	3fe00000 	.word	0x3fe00000
 800799c:	652b82fe 	.word	0x652b82fe
 80079a0:	3c971547 	.word	0x3c971547
 80079a4:	4090cc00 	.word	0x4090cc00

080079a8 <__ieee754_rem_pio2>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	ec57 6b10 	vmov	r6, r7, d0
 80079b0:	4bc5      	ldr	r3, [pc, #788]	@ (8007cc8 <__ieee754_rem_pio2+0x320>)
 80079b2:	b08d      	sub	sp, #52	@ 0x34
 80079b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80079b8:	4598      	cmp	r8, r3
 80079ba:	4604      	mov	r4, r0
 80079bc:	9704      	str	r7, [sp, #16]
 80079be:	d807      	bhi.n	80079d0 <__ieee754_rem_pio2+0x28>
 80079c0:	2200      	movs	r2, #0
 80079c2:	2300      	movs	r3, #0
 80079c4:	ed80 0b00 	vstr	d0, [r0]
 80079c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80079cc:	2500      	movs	r5, #0
 80079ce:	e028      	b.n	8007a22 <__ieee754_rem_pio2+0x7a>
 80079d0:	4bbe      	ldr	r3, [pc, #760]	@ (8007ccc <__ieee754_rem_pio2+0x324>)
 80079d2:	4598      	cmp	r8, r3
 80079d4:	d878      	bhi.n	8007ac8 <__ieee754_rem_pio2+0x120>
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	4dbd      	ldr	r5, [pc, #756]	@ (8007cd0 <__ieee754_rem_pio2+0x328>)
 80079da:	2b00      	cmp	r3, #0
 80079dc:	4630      	mov	r0, r6
 80079de:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007c90 <__ieee754_rem_pio2+0x2e8>)
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	4639      	mov	r1, r7
 80079e6:	dd38      	ble.n	8007a5a <__ieee754_rem_pio2+0xb2>
 80079e8:	f7f8 fbfa 	bl	80001e0 <__aeabi_dsub>
 80079ec:	45a8      	cmp	r8, r5
 80079ee:	4606      	mov	r6, r0
 80079f0:	460f      	mov	r7, r1
 80079f2:	d01a      	beq.n	8007a2a <__ieee754_rem_pio2+0x82>
 80079f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007c98 <__ieee754_rem_pio2+0x2f0>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f7f8 fbf1 	bl	80001e0 <__aeabi_dsub>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4680      	mov	r8, r0
 8007a04:	4689      	mov	r9, r1
 8007a06:	4630      	mov	r0, r6
 8007a08:	4639      	mov	r1, r7
 8007a0a:	f7f8 fbe9 	bl	80001e0 <__aeabi_dsub>
 8007a0e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007c98 <__ieee754_rem_pio2+0x2f0>)
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f7f8 fbe4 	bl	80001e0 <__aeabi_dsub>
 8007a18:	e9c4 8900 	strd	r8, r9, [r4]
 8007a1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a20:	2501      	movs	r5, #1
 8007a22:	4628      	mov	r0, r5
 8007a24:	b00d      	add	sp, #52	@ 0x34
 8007a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2a:	a39d      	add	r3, pc, #628	@ (adr r3, 8007ca0 <__ieee754_rem_pio2+0x2f8>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f7f8 fbd6 	bl	80001e0 <__aeabi_dsub>
 8007a34:	a39c      	add	r3, pc, #624	@ (adr r3, 8007ca8 <__ieee754_rem_pio2+0x300>)
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460f      	mov	r7, r1
 8007a3e:	f7f8 fbcf 	bl	80001e0 <__aeabi_dsub>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4680      	mov	r8, r0
 8007a48:	4689      	mov	r9, r1
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f8 fbc7 	bl	80001e0 <__aeabi_dsub>
 8007a52:	a395      	add	r3, pc, #596	@ (adr r3, 8007ca8 <__ieee754_rem_pio2+0x300>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	e7dc      	b.n	8007a14 <__ieee754_rem_pio2+0x6c>
 8007a5a:	f7f8 fbc3 	bl	80001e4 <__adddf3>
 8007a5e:	45a8      	cmp	r8, r5
 8007a60:	4606      	mov	r6, r0
 8007a62:	460f      	mov	r7, r1
 8007a64:	d018      	beq.n	8007a98 <__ieee754_rem_pio2+0xf0>
 8007a66:	a38c      	add	r3, pc, #560	@ (adr r3, 8007c98 <__ieee754_rem_pio2+0x2f0>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f7f8 fbba 	bl	80001e4 <__adddf3>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4680      	mov	r8, r0
 8007a76:	4689      	mov	r9, r1
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f8 fbb0 	bl	80001e0 <__aeabi_dsub>
 8007a80:	a385      	add	r3, pc, #532	@ (adr r3, 8007c98 <__ieee754_rem_pio2+0x2f0>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f7f8 fbad 	bl	80001e4 <__adddf3>
 8007a8a:	f04f 35ff 	mov.w	r5, #4294967295
 8007a8e:	e9c4 8900 	strd	r8, r9, [r4]
 8007a92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a96:	e7c4      	b.n	8007a22 <__ieee754_rem_pio2+0x7a>
 8007a98:	a381      	add	r3, pc, #516	@ (adr r3, 8007ca0 <__ieee754_rem_pio2+0x2f8>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	f7f8 fba1 	bl	80001e4 <__adddf3>
 8007aa2:	a381      	add	r3, pc, #516	@ (adr r3, 8007ca8 <__ieee754_rem_pio2+0x300>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	460f      	mov	r7, r1
 8007aac:	f7f8 fb9a 	bl	80001e4 <__adddf3>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	4689      	mov	r9, r1
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	f7f8 fb90 	bl	80001e0 <__aeabi_dsub>
 8007ac0:	a379      	add	r3, pc, #484	@ (adr r3, 8007ca8 <__ieee754_rem_pio2+0x300>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	e7de      	b.n	8007a86 <__ieee754_rem_pio2+0xde>
 8007ac8:	4b82      	ldr	r3, [pc, #520]	@ (8007cd4 <__ieee754_rem_pio2+0x32c>)
 8007aca:	4598      	cmp	r8, r3
 8007acc:	f200 80d1 	bhi.w	8007c72 <__ieee754_rem_pio2+0x2ca>
 8007ad0:	f000 fafe 	bl	80080d0 <fabs>
 8007ad4:	ec57 6b10 	vmov	r6, r7, d0
 8007ad8:	a375      	add	r3, pc, #468	@ (adr r3, 8007cb0 <__ieee754_rem_pio2+0x308>)
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	4630      	mov	r0, r6
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	f7f8 fd35 	bl	8000550 <__aeabi_dmul>
 8007ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8007cd8 <__ieee754_rem_pio2+0x330>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f7f8 fb7b 	bl	80001e4 <__adddf3>
 8007aee:	f7f8 ffdf 	bl	8000ab0 <__aeabi_d2iz>
 8007af2:	4605      	mov	r5, r0
 8007af4:	f7f8 fcc2 	bl	800047c <__aeabi_i2d>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b00:	a363      	add	r3, pc, #396	@ (adr r3, 8007c90 <__ieee754_rem_pio2+0x2e8>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fd23 	bl	8000550 <__aeabi_dmul>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	f7f8 fb65 	bl	80001e0 <__aeabi_dsub>
 8007b16:	a360      	add	r3, pc, #384	@ (adr r3, 8007c98 <__ieee754_rem_pio2+0x2f0>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	468b      	mov	fp, r1
 8007b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b24:	f7f8 fd14 	bl	8000550 <__aeabi_dmul>
 8007b28:	2d1f      	cmp	r5, #31
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	460f      	mov	r7, r1
 8007b2e:	dc0c      	bgt.n	8007b4a <__ieee754_rem_pio2+0x1a2>
 8007b30:	4b6a      	ldr	r3, [pc, #424]	@ (8007cdc <__ieee754_rem_pio2+0x334>)
 8007b32:	1e6a      	subs	r2, r5, #1
 8007b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b38:	4543      	cmp	r3, r8
 8007b3a:	d006      	beq.n	8007b4a <__ieee754_rem_pio2+0x1a2>
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	463b      	mov	r3, r7
 8007b40:	4650      	mov	r0, sl
 8007b42:	4659      	mov	r1, fp
 8007b44:	f7f8 fb4c 	bl	80001e0 <__aeabi_dsub>
 8007b48:	e00e      	b.n	8007b68 <__ieee754_rem_pio2+0x1c0>
 8007b4a:	463b      	mov	r3, r7
 8007b4c:	4632      	mov	r2, r6
 8007b4e:	4650      	mov	r0, sl
 8007b50:	4659      	mov	r1, fp
 8007b52:	f7f8 fb45 	bl	80001e0 <__aeabi_dsub>
 8007b56:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007b5a:	9305      	str	r3, [sp, #20]
 8007b5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007b60:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007b64:	2b10      	cmp	r3, #16
 8007b66:	dc02      	bgt.n	8007b6e <__ieee754_rem_pio2+0x1c6>
 8007b68:	e9c4 0100 	strd	r0, r1, [r4]
 8007b6c:	e039      	b.n	8007be2 <__ieee754_rem_pio2+0x23a>
 8007b6e:	a34c      	add	r3, pc, #304	@ (adr r3, 8007ca0 <__ieee754_rem_pio2+0x2f8>)
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b78:	f7f8 fcea 	bl	8000550 <__aeabi_dmul>
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	460f      	mov	r7, r1
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4650      	mov	r0, sl
 8007b86:	4659      	mov	r1, fp
 8007b88:	f7f8 fb2a 	bl	80001e0 <__aeabi_dsub>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4680      	mov	r8, r0
 8007b92:	4689      	mov	r9, r1
 8007b94:	4650      	mov	r0, sl
 8007b96:	4659      	mov	r1, fp
 8007b98:	f7f8 fb22 	bl	80001e0 <__aeabi_dsub>
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	f7f8 fb1e 	bl	80001e0 <__aeabi_dsub>
 8007ba4:	a340      	add	r3, pc, #256	@ (adr r3, 8007ca8 <__ieee754_rem_pio2+0x300>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	4606      	mov	r6, r0
 8007bac:	460f      	mov	r7, r1
 8007bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bb2:	f7f8 fccd 	bl	8000550 <__aeabi_dmul>
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	463b      	mov	r3, r7
 8007bba:	f7f8 fb11 	bl	80001e0 <__aeabi_dsub>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	4649      	mov	r1, r9
 8007bca:	f7f8 fb09 	bl	80001e0 <__aeabi_dsub>
 8007bce:	9a05      	ldr	r2, [sp, #20]
 8007bd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b31      	cmp	r3, #49	@ 0x31
 8007bd8:	dc20      	bgt.n	8007c1c <__ieee754_rem_pio2+0x274>
 8007bda:	e9c4 0100 	strd	r0, r1, [r4]
 8007bde:	46c2      	mov	sl, r8
 8007be0:	46cb      	mov	fp, r9
 8007be2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007be6:	4650      	mov	r0, sl
 8007be8:	4642      	mov	r2, r8
 8007bea:	464b      	mov	r3, r9
 8007bec:	4659      	mov	r1, fp
 8007bee:	f7f8 faf7 	bl	80001e0 <__aeabi_dsub>
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	f7f8 faf3 	bl	80001e0 <__aeabi_dsub>
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c02:	f6bf af0e 	bge.w	8007a22 <__ieee754_rem_pio2+0x7a>
 8007c06:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007c0a:	6063      	str	r3, [r4, #4]
 8007c0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c10:	f8c4 8000 	str.w	r8, [r4]
 8007c14:	60a0      	str	r0, [r4, #8]
 8007c16:	60e3      	str	r3, [r4, #12]
 8007c18:	426d      	negs	r5, r5
 8007c1a:	e702      	b.n	8007a22 <__ieee754_rem_pio2+0x7a>
 8007c1c:	a326      	add	r3, pc, #152	@ (adr r3, 8007cb8 <__ieee754_rem_pio2+0x310>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c26:	f7f8 fc93 	bl	8000550 <__aeabi_dmul>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4640      	mov	r0, r8
 8007c34:	4649      	mov	r1, r9
 8007c36:	f7f8 fad3 	bl	80001e0 <__aeabi_dsub>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4682      	mov	sl, r0
 8007c40:	468b      	mov	fp, r1
 8007c42:	4640      	mov	r0, r8
 8007c44:	4649      	mov	r1, r9
 8007c46:	f7f8 facb 	bl	80001e0 <__aeabi_dsub>
 8007c4a:	4632      	mov	r2, r6
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	f7f8 fac7 	bl	80001e0 <__aeabi_dsub>
 8007c52:	a31b      	add	r3, pc, #108	@ (adr r3, 8007cc0 <__ieee754_rem_pio2+0x318>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	4606      	mov	r6, r0
 8007c5a:	460f      	mov	r7, r1
 8007c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c60:	f7f8 fc76 	bl	8000550 <__aeabi_dmul>
 8007c64:	4632      	mov	r2, r6
 8007c66:	463b      	mov	r3, r7
 8007c68:	f7f8 faba 	bl	80001e0 <__aeabi_dsub>
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	460f      	mov	r7, r1
 8007c70:	e764      	b.n	8007b3c <__ieee754_rem_pio2+0x194>
 8007c72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce0 <__ieee754_rem_pio2+0x338>)
 8007c74:	4598      	cmp	r8, r3
 8007c76:	d935      	bls.n	8007ce4 <__ieee754_rem_pio2+0x33c>
 8007c78:	4632      	mov	r2, r6
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 faae 	bl	80001e0 <__aeabi_dsub>
 8007c84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c88:	e9c4 0100 	strd	r0, r1, [r4]
 8007c8c:	e69e      	b.n	80079cc <__ieee754_rem_pio2+0x24>
 8007c8e:	bf00      	nop
 8007c90:	54400000 	.word	0x54400000
 8007c94:	3ff921fb 	.word	0x3ff921fb
 8007c98:	1a626331 	.word	0x1a626331
 8007c9c:	3dd0b461 	.word	0x3dd0b461
 8007ca0:	1a600000 	.word	0x1a600000
 8007ca4:	3dd0b461 	.word	0x3dd0b461
 8007ca8:	2e037073 	.word	0x2e037073
 8007cac:	3ba3198a 	.word	0x3ba3198a
 8007cb0:	6dc9c883 	.word	0x6dc9c883
 8007cb4:	3fe45f30 	.word	0x3fe45f30
 8007cb8:	2e000000 	.word	0x2e000000
 8007cbc:	3ba3198a 	.word	0x3ba3198a
 8007cc0:	252049c1 	.word	0x252049c1
 8007cc4:	397b839a 	.word	0x397b839a
 8007cc8:	3fe921fb 	.word	0x3fe921fb
 8007ccc:	4002d97b 	.word	0x4002d97b
 8007cd0:	3ff921fb 	.word	0x3ff921fb
 8007cd4:	413921fb 	.word	0x413921fb
 8007cd8:	3fe00000 	.word	0x3fe00000
 8007cdc:	08008a98 	.word	0x08008a98
 8007ce0:	7fefffff 	.word	0x7fefffff
 8007ce4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007ce8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007cec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	f7f8 fedc 	bl	8000ab0 <__aeabi_d2iz>
 8007cf8:	f7f8 fbc0 	bl	800047c <__aeabi_i2d>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4630      	mov	r0, r6
 8007d02:	4639      	mov	r1, r7
 8007d04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d08:	f7f8 fa6a 	bl	80001e0 <__aeabi_dsub>
 8007d0c:	4b22      	ldr	r3, [pc, #136]	@ (8007d98 <__ieee754_rem_pio2+0x3f0>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f7f8 fc1e 	bl	8000550 <__aeabi_dmul>
 8007d14:	460f      	mov	r7, r1
 8007d16:	4606      	mov	r6, r0
 8007d18:	f7f8 feca 	bl	8000ab0 <__aeabi_d2iz>
 8007d1c:	f7f8 fbae 	bl	800047c <__aeabi_i2d>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4630      	mov	r0, r6
 8007d26:	4639      	mov	r1, r7
 8007d28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d2c:	f7f8 fa58 	bl	80001e0 <__aeabi_dsub>
 8007d30:	4b19      	ldr	r3, [pc, #100]	@ (8007d98 <__ieee754_rem_pio2+0x3f0>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	f7f8 fc0c 	bl	8000550 <__aeabi_dmul>
 8007d38:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007d3c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007d40:	f04f 0803 	mov.w	r8, #3
 8007d44:	2600      	movs	r6, #0
 8007d46:	2700      	movs	r7, #0
 8007d48:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	463b      	mov	r3, r7
 8007d50:	46c2      	mov	sl, r8
 8007d52:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d56:	f7f8 fe63 	bl	8000a20 <__aeabi_dcmpeq>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d1f4      	bne.n	8007d48 <__ieee754_rem_pio2+0x3a0>
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d9c <__ieee754_rem_pio2+0x3f4>)
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	2302      	movs	r3, #2
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	462a      	mov	r2, r5
 8007d68:	4653      	mov	r3, sl
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	a806      	add	r0, sp, #24
 8007d6e:	f000 fa73 	bl	8008258 <__kernel_rem_pio2>
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	4605      	mov	r5, r0
 8007d78:	f6bf ae53 	bge.w	8007a22 <__ieee754_rem_pio2+0x7a>
 8007d7c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007d80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d84:	e9c4 2300 	strd	r2, r3, [r4]
 8007d88:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007d8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d90:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007d94:	e740      	b.n	8007c18 <__ieee754_rem_pio2+0x270>
 8007d96:	bf00      	nop
 8007d98:	41700000 	.word	0x41700000
 8007d9c:	08008b18 	.word	0x08008b18

08007da0 <atan>:
 8007da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	ec55 4b10 	vmov	r4, r5, d0
 8007da8:	4bbf      	ldr	r3, [pc, #764]	@ (80080a8 <atan+0x308>)
 8007daa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007dae:	429e      	cmp	r6, r3
 8007db0:	46ab      	mov	fp, r5
 8007db2:	d918      	bls.n	8007de6 <atan+0x46>
 8007db4:	4bbd      	ldr	r3, [pc, #756]	@ (80080ac <atan+0x30c>)
 8007db6:	429e      	cmp	r6, r3
 8007db8:	d801      	bhi.n	8007dbe <atan+0x1e>
 8007dba:	d109      	bne.n	8007dd0 <atan+0x30>
 8007dbc:	b144      	cbz	r4, 8007dd0 <atan+0x30>
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7f8 fa0d 	bl	80001e4 <__adddf3>
 8007dca:	4604      	mov	r4, r0
 8007dcc:	460d      	mov	r5, r1
 8007dce:	e006      	b.n	8007dde <atan+0x3e>
 8007dd0:	f1bb 0f00 	cmp.w	fp, #0
 8007dd4:	f340 812b 	ble.w	800802e <atan+0x28e>
 8007dd8:	a597      	add	r5, pc, #604	@ (adr r5, 8008038 <atan+0x298>)
 8007dda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007dde:	ec45 4b10 	vmov	d0, r4, r5
 8007de2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de6:	4bb2      	ldr	r3, [pc, #712]	@ (80080b0 <atan+0x310>)
 8007de8:	429e      	cmp	r6, r3
 8007dea:	d813      	bhi.n	8007e14 <atan+0x74>
 8007dec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007df0:	429e      	cmp	r6, r3
 8007df2:	d80c      	bhi.n	8007e0e <atan+0x6e>
 8007df4:	a392      	add	r3, pc, #584	@ (adr r3, 8008040 <atan+0x2a0>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	f7f8 f9f1 	bl	80001e4 <__adddf3>
 8007e02:	4bac      	ldr	r3, [pc, #688]	@ (80080b4 <atan+0x314>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	f7f8 fe33 	bl	8000a70 <__aeabi_dcmpgt>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d1e7      	bne.n	8007dde <atan+0x3e>
 8007e0e:	f04f 3aff 	mov.w	sl, #4294967295
 8007e12:	e029      	b.n	8007e68 <atan+0xc8>
 8007e14:	f000 f95c 	bl	80080d0 <fabs>
 8007e18:	4ba7      	ldr	r3, [pc, #668]	@ (80080b8 <atan+0x318>)
 8007e1a:	429e      	cmp	r6, r3
 8007e1c:	ec55 4b10 	vmov	r4, r5, d0
 8007e20:	f200 80bc 	bhi.w	8007f9c <atan+0x1fc>
 8007e24:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007e28:	429e      	cmp	r6, r3
 8007e2a:	f200 809e 	bhi.w	8007f6a <atan+0x1ca>
 8007e2e:	4622      	mov	r2, r4
 8007e30:	462b      	mov	r3, r5
 8007e32:	4620      	mov	r0, r4
 8007e34:	4629      	mov	r1, r5
 8007e36:	f7f8 f9d5 	bl	80001e4 <__adddf3>
 8007e3a:	4b9e      	ldr	r3, [pc, #632]	@ (80080b4 <atan+0x314>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f7f8 f9cf 	bl	80001e0 <__aeabi_dsub>
 8007e42:	2200      	movs	r2, #0
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f7f8 f9c8 	bl	80001e4 <__adddf3>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4630      	mov	r0, r6
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	f7f8 fca2 	bl	80007a4 <__aeabi_ddiv>
 8007e60:	f04f 0a00 	mov.w	sl, #0
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	4622      	mov	r2, r4
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f7f8 fb6e 	bl	8000550 <__aeabi_dmul>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4680      	mov	r8, r0
 8007e7a:	4689      	mov	r9, r1
 8007e7c:	f7f8 fb68 	bl	8000550 <__aeabi_dmul>
 8007e80:	a371      	add	r3, pc, #452	@ (adr r3, 8008048 <atan+0x2a8>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	4606      	mov	r6, r0
 8007e88:	460f      	mov	r7, r1
 8007e8a:	f7f8 fb61 	bl	8000550 <__aeabi_dmul>
 8007e8e:	a370      	add	r3, pc, #448	@ (adr r3, 8008050 <atan+0x2b0>)
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f7f8 f9a6 	bl	80001e4 <__adddf3>
 8007e98:	4632      	mov	r2, r6
 8007e9a:	463b      	mov	r3, r7
 8007e9c:	f7f8 fb58 	bl	8000550 <__aeabi_dmul>
 8007ea0:	a36d      	add	r3, pc, #436	@ (adr r3, 8008058 <atan+0x2b8>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f7f8 f99d 	bl	80001e4 <__adddf3>
 8007eaa:	4632      	mov	r2, r6
 8007eac:	463b      	mov	r3, r7
 8007eae:	f7f8 fb4f 	bl	8000550 <__aeabi_dmul>
 8007eb2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008060 <atan+0x2c0>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 f994 	bl	80001e4 <__adddf3>
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	f7f8 fb46 	bl	8000550 <__aeabi_dmul>
 8007ec4:	a368      	add	r3, pc, #416	@ (adr r3, 8008068 <atan+0x2c8>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f7f8 f98b 	bl	80001e4 <__adddf3>
 8007ece:	4632      	mov	r2, r6
 8007ed0:	463b      	mov	r3, r7
 8007ed2:	f7f8 fb3d 	bl	8000550 <__aeabi_dmul>
 8007ed6:	a366      	add	r3, pc, #408	@ (adr r3, 8008070 <atan+0x2d0>)
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	f7f8 f982 	bl	80001e4 <__adddf3>
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	f7f8 fb34 	bl	8000550 <__aeabi_dmul>
 8007ee8:	a363      	add	r3, pc, #396	@ (adr r3, 8008078 <atan+0x2d8>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	4680      	mov	r8, r0
 8007ef0:	4689      	mov	r9, r1
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	f7f8 fb2b 	bl	8000550 <__aeabi_dmul>
 8007efa:	a361      	add	r3, pc, #388	@ (adr r3, 8008080 <atan+0x2e0>)
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	f7f8 f96e 	bl	80001e0 <__aeabi_dsub>
 8007f04:	4632      	mov	r2, r6
 8007f06:	463b      	mov	r3, r7
 8007f08:	f7f8 fb22 	bl	8000550 <__aeabi_dmul>
 8007f0c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008088 <atan+0x2e8>)
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	f7f8 f965 	bl	80001e0 <__aeabi_dsub>
 8007f16:	4632      	mov	r2, r6
 8007f18:	463b      	mov	r3, r7
 8007f1a:	f7f8 fb19 	bl	8000550 <__aeabi_dmul>
 8007f1e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008090 <atan+0x2f0>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f7f8 f95c 	bl	80001e0 <__aeabi_dsub>
 8007f28:	4632      	mov	r2, r6
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	f7f8 fb10 	bl	8000550 <__aeabi_dmul>
 8007f30:	a359      	add	r3, pc, #356	@ (adr r3, 8008098 <atan+0x2f8>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 f953 	bl	80001e0 <__aeabi_dsub>
 8007f3a:	4632      	mov	r2, r6
 8007f3c:	463b      	mov	r3, r7
 8007f3e:	f7f8 fb07 	bl	8000550 <__aeabi_dmul>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4640      	mov	r0, r8
 8007f48:	4649      	mov	r1, r9
 8007f4a:	f7f8 f94b 	bl	80001e4 <__adddf3>
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	f7f8 fafd 	bl	8000550 <__aeabi_dmul>
 8007f56:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	d148      	bne.n	8007ff2 <atan+0x252>
 8007f60:	4620      	mov	r0, r4
 8007f62:	4629      	mov	r1, r5
 8007f64:	f7f8 f93c 	bl	80001e0 <__aeabi_dsub>
 8007f68:	e72f      	b.n	8007dca <atan+0x2a>
 8007f6a:	4b52      	ldr	r3, [pc, #328]	@ (80080b4 <atan+0x314>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 f935 	bl	80001e0 <__aeabi_dsub>
 8007f76:	4b4f      	ldr	r3, [pc, #316]	@ (80080b4 <atan+0x314>)
 8007f78:	4606      	mov	r6, r0
 8007f7a:	460f      	mov	r7, r1
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 f92f 	bl	80001e4 <__adddf3>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	f7f8 fc09 	bl	80007a4 <__aeabi_ddiv>
 8007f92:	f04f 0a01 	mov.w	sl, #1
 8007f96:	4604      	mov	r4, r0
 8007f98:	460d      	mov	r5, r1
 8007f9a:	e765      	b.n	8007e68 <atan+0xc8>
 8007f9c:	4b47      	ldr	r3, [pc, #284]	@ (80080bc <atan+0x31c>)
 8007f9e:	429e      	cmp	r6, r3
 8007fa0:	d21c      	bcs.n	8007fdc <atan+0x23c>
 8007fa2:	4b47      	ldr	r3, [pc, #284]	@ (80080c0 <atan+0x320>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 f919 	bl	80001e0 <__aeabi_dsub>
 8007fae:	4b44      	ldr	r3, [pc, #272]	@ (80080c0 <atan+0x320>)
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	460f      	mov	r7, r1
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	4629      	mov	r1, r5
 8007fba:	f7f8 fac9 	bl	8000550 <__aeabi_dmul>
 8007fbe:	4b3d      	ldr	r3, [pc, #244]	@ (80080b4 <atan+0x314>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f7f8 f90f 	bl	80001e4 <__adddf3>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4630      	mov	r0, r6
 8007fcc:	4639      	mov	r1, r7
 8007fce:	f7f8 fbe9 	bl	80007a4 <__aeabi_ddiv>
 8007fd2:	f04f 0a02 	mov.w	sl, #2
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	460d      	mov	r5, r1
 8007fda:	e745      	b.n	8007e68 <atan+0xc8>
 8007fdc:	4622      	mov	r2, r4
 8007fde:	462b      	mov	r3, r5
 8007fe0:	4938      	ldr	r1, [pc, #224]	@ (80080c4 <atan+0x324>)
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	f7f8 fbde 	bl	80007a4 <__aeabi_ddiv>
 8007fe8:	f04f 0a03 	mov.w	sl, #3
 8007fec:	4604      	mov	r4, r0
 8007fee:	460d      	mov	r5, r1
 8007ff0:	e73a      	b.n	8007e68 <atan+0xc8>
 8007ff2:	4b35      	ldr	r3, [pc, #212]	@ (80080c8 <atan+0x328>)
 8007ff4:	4e35      	ldr	r6, [pc, #212]	@ (80080cc <atan+0x32c>)
 8007ff6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f7f8 f8ef 	bl	80001e0 <__aeabi_dsub>
 8008002:	4622      	mov	r2, r4
 8008004:	462b      	mov	r3, r5
 8008006:	f7f8 f8eb 	bl	80001e0 <__aeabi_dsub>
 800800a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008016:	f7f8 f8e3 	bl	80001e0 <__aeabi_dsub>
 800801a:	f1bb 0f00 	cmp.w	fp, #0
 800801e:	4604      	mov	r4, r0
 8008020:	460d      	mov	r5, r1
 8008022:	f6bf aedc 	bge.w	8007dde <atan+0x3e>
 8008026:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800802a:	461d      	mov	r5, r3
 800802c:	e6d7      	b.n	8007dde <atan+0x3e>
 800802e:	a51c      	add	r5, pc, #112	@ (adr r5, 80080a0 <atan+0x300>)
 8008030:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008034:	e6d3      	b.n	8007dde <atan+0x3e>
 8008036:	bf00      	nop
 8008038:	54442d18 	.word	0x54442d18
 800803c:	3ff921fb 	.word	0x3ff921fb
 8008040:	8800759c 	.word	0x8800759c
 8008044:	7e37e43c 	.word	0x7e37e43c
 8008048:	e322da11 	.word	0xe322da11
 800804c:	3f90ad3a 	.word	0x3f90ad3a
 8008050:	24760deb 	.word	0x24760deb
 8008054:	3fa97b4b 	.word	0x3fa97b4b
 8008058:	a0d03d51 	.word	0xa0d03d51
 800805c:	3fb10d66 	.word	0x3fb10d66
 8008060:	c54c206e 	.word	0xc54c206e
 8008064:	3fb745cd 	.word	0x3fb745cd
 8008068:	920083ff 	.word	0x920083ff
 800806c:	3fc24924 	.word	0x3fc24924
 8008070:	5555550d 	.word	0x5555550d
 8008074:	3fd55555 	.word	0x3fd55555
 8008078:	2c6a6c2f 	.word	0x2c6a6c2f
 800807c:	bfa2b444 	.word	0xbfa2b444
 8008080:	52defd9a 	.word	0x52defd9a
 8008084:	3fadde2d 	.word	0x3fadde2d
 8008088:	af749a6d 	.word	0xaf749a6d
 800808c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008090:	fe231671 	.word	0xfe231671
 8008094:	3fbc71c6 	.word	0x3fbc71c6
 8008098:	9998ebc4 	.word	0x9998ebc4
 800809c:	3fc99999 	.word	0x3fc99999
 80080a0:	54442d18 	.word	0x54442d18
 80080a4:	bff921fb 	.word	0xbff921fb
 80080a8:	440fffff 	.word	0x440fffff
 80080ac:	7ff00000 	.word	0x7ff00000
 80080b0:	3fdbffff 	.word	0x3fdbffff
 80080b4:	3ff00000 	.word	0x3ff00000
 80080b8:	3ff2ffff 	.word	0x3ff2ffff
 80080bc:	40038000 	.word	0x40038000
 80080c0:	3ff80000 	.word	0x3ff80000
 80080c4:	bff00000 	.word	0xbff00000
 80080c8:	08008c20 	.word	0x08008c20
 80080cc:	08008c40 	.word	0x08008c40

080080d0 <fabs>:
 80080d0:	ec51 0b10 	vmov	r0, r1, d0
 80080d4:	4602      	mov	r2, r0
 80080d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80080da:	ec43 2b10 	vmov	d0, r2, r3
 80080de:	4770      	bx	lr

080080e0 <scalbn>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	ec55 4b10 	vmov	r4, r5, d0
 80080e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80080ea:	4606      	mov	r6, r0
 80080ec:	462b      	mov	r3, r5
 80080ee:	b991      	cbnz	r1, 8008116 <scalbn+0x36>
 80080f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80080f4:	4323      	orrs	r3, r4
 80080f6:	d03d      	beq.n	8008174 <scalbn+0x94>
 80080f8:	4b35      	ldr	r3, [pc, #212]	@ (80081d0 <scalbn+0xf0>)
 80080fa:	4620      	mov	r0, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	2200      	movs	r2, #0
 8008100:	f7f8 fa26 	bl	8000550 <__aeabi_dmul>
 8008104:	4b33      	ldr	r3, [pc, #204]	@ (80081d4 <scalbn+0xf4>)
 8008106:	429e      	cmp	r6, r3
 8008108:	4604      	mov	r4, r0
 800810a:	460d      	mov	r5, r1
 800810c:	da0f      	bge.n	800812e <scalbn+0x4e>
 800810e:	a328      	add	r3, pc, #160	@ (adr r3, 80081b0 <scalbn+0xd0>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	e01e      	b.n	8008154 <scalbn+0x74>
 8008116:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800811a:	4291      	cmp	r1, r2
 800811c:	d10b      	bne.n	8008136 <scalbn+0x56>
 800811e:	4622      	mov	r2, r4
 8008120:	4620      	mov	r0, r4
 8008122:	4629      	mov	r1, r5
 8008124:	f7f8 f85e 	bl	80001e4 <__adddf3>
 8008128:	4604      	mov	r4, r0
 800812a:	460d      	mov	r5, r1
 800812c:	e022      	b.n	8008174 <scalbn+0x94>
 800812e:	460b      	mov	r3, r1
 8008130:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008134:	3936      	subs	r1, #54	@ 0x36
 8008136:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800813a:	4296      	cmp	r6, r2
 800813c:	dd0d      	ble.n	800815a <scalbn+0x7a>
 800813e:	2d00      	cmp	r5, #0
 8008140:	a11d      	add	r1, pc, #116	@ (adr r1, 80081b8 <scalbn+0xd8>)
 8008142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008146:	da02      	bge.n	800814e <scalbn+0x6e>
 8008148:	a11d      	add	r1, pc, #116	@ (adr r1, 80081c0 <scalbn+0xe0>)
 800814a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800814e:	a31a      	add	r3, pc, #104	@ (adr r3, 80081b8 <scalbn+0xd8>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f9fc 	bl	8000550 <__aeabi_dmul>
 8008158:	e7e6      	b.n	8008128 <scalbn+0x48>
 800815a:	1872      	adds	r2, r6, r1
 800815c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008160:	428a      	cmp	r2, r1
 8008162:	dcec      	bgt.n	800813e <scalbn+0x5e>
 8008164:	2a00      	cmp	r2, #0
 8008166:	dd08      	ble.n	800817a <scalbn+0x9a>
 8008168:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800816c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008170:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008174:	ec45 4b10 	vmov	d0, r4, r5
 8008178:	bd70      	pop	{r4, r5, r6, pc}
 800817a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800817e:	da08      	bge.n	8008192 <scalbn+0xb2>
 8008180:	2d00      	cmp	r5, #0
 8008182:	a10b      	add	r1, pc, #44	@ (adr r1, 80081b0 <scalbn+0xd0>)
 8008184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008188:	dac1      	bge.n	800810e <scalbn+0x2e>
 800818a:	a10f      	add	r1, pc, #60	@ (adr r1, 80081c8 <scalbn+0xe8>)
 800818c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008190:	e7bd      	b.n	800810e <scalbn+0x2e>
 8008192:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008196:	3236      	adds	r2, #54	@ 0x36
 8008198:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800819c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081a0:	4620      	mov	r0, r4
 80081a2:	4b0d      	ldr	r3, [pc, #52]	@ (80081d8 <scalbn+0xf8>)
 80081a4:	4629      	mov	r1, r5
 80081a6:	2200      	movs	r2, #0
 80081a8:	e7d4      	b.n	8008154 <scalbn+0x74>
 80081aa:	bf00      	nop
 80081ac:	f3af 8000 	nop.w
 80081b0:	c2f8f359 	.word	0xc2f8f359
 80081b4:	01a56e1f 	.word	0x01a56e1f
 80081b8:	8800759c 	.word	0x8800759c
 80081bc:	7e37e43c 	.word	0x7e37e43c
 80081c0:	8800759c 	.word	0x8800759c
 80081c4:	fe37e43c 	.word	0xfe37e43c
 80081c8:	c2f8f359 	.word	0xc2f8f359
 80081cc:	81a56e1f 	.word	0x81a56e1f
 80081d0:	43500000 	.word	0x43500000
 80081d4:	ffff3cb0 	.word	0xffff3cb0
 80081d8:	3c900000 	.word	0x3c900000

080081dc <with_errno>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	ed2d 8b02 	vpush	{d8}
 80081e2:	eeb0 8a40 	vmov.f32	s16, s0
 80081e6:	eef0 8a60 	vmov.f32	s17, s1
 80081ea:	4604      	mov	r4, r0
 80081ec:	f7fe f9e4 	bl	80065b8 <__errno>
 80081f0:	eeb0 0a48 	vmov.f32	s0, s16
 80081f4:	eef0 0a68 	vmov.f32	s1, s17
 80081f8:	ecbd 8b02 	vpop	{d8}
 80081fc:	6004      	str	r4, [r0, #0]
 80081fe:	bd10      	pop	{r4, pc}

08008200 <xflow>:
 8008200:	4603      	mov	r3, r0
 8008202:	b507      	push	{r0, r1, r2, lr}
 8008204:	ec51 0b10 	vmov	r0, r1, d0
 8008208:	b183      	cbz	r3, 800822c <xflow+0x2c>
 800820a:	4602      	mov	r2, r0
 800820c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008210:	e9cd 2300 	strd	r2, r3, [sp]
 8008214:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008218:	f7f8 f99a 	bl	8000550 <__aeabi_dmul>
 800821c:	ec41 0b10 	vmov	d0, r0, r1
 8008220:	2022      	movs	r0, #34	@ 0x22
 8008222:	b003      	add	sp, #12
 8008224:	f85d eb04 	ldr.w	lr, [sp], #4
 8008228:	f7ff bfd8 	b.w	80081dc <with_errno>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	e7ee      	b.n	8008210 <xflow+0x10>
 8008232:	0000      	movs	r0, r0
 8008234:	0000      	movs	r0, r0
	...

08008238 <__math_uflow>:
 8008238:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008240 <__math_uflow+0x8>
 800823c:	f7ff bfe0 	b.w	8008200 <xflow>
 8008240:	00000000 	.word	0x00000000
 8008244:	10000000 	.word	0x10000000

08008248 <__math_oflow>:
 8008248:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008250 <__math_oflow+0x8>
 800824c:	f7ff bfd8 	b.w	8008200 <xflow>
 8008250:	00000000 	.word	0x00000000
 8008254:	70000000 	.word	0x70000000

08008258 <__kernel_rem_pio2>:
 8008258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	ed2d 8b02 	vpush	{d8}
 8008260:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008264:	f112 0f14 	cmn.w	r2, #20
 8008268:	9306      	str	r3, [sp, #24]
 800826a:	9104      	str	r1, [sp, #16]
 800826c:	4bbe      	ldr	r3, [pc, #760]	@ (8008568 <__kernel_rem_pio2+0x310>)
 800826e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008270:	9008      	str	r0, [sp, #32]
 8008272:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	9b06      	ldr	r3, [sp, #24]
 800827a:	f103 33ff 	add.w	r3, r3, #4294967295
 800827e:	bfa8      	it	ge
 8008280:	1ed4      	subge	r4, r2, #3
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	bfb2      	itee	lt
 8008286:	2400      	movlt	r4, #0
 8008288:	2318      	movge	r3, #24
 800828a:	fb94 f4f3 	sdivge	r4, r4, r3
 800828e:	f06f 0317 	mvn.w	r3, #23
 8008292:	fb04 3303 	mla	r3, r4, r3, r3
 8008296:	eb03 0b02 	add.w	fp, r3, r2
 800829a:	9b00      	ldr	r3, [sp, #0]
 800829c:	9a05      	ldr	r2, [sp, #20]
 800829e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8008558 <__kernel_rem_pio2+0x300>
 80082a2:	eb03 0802 	add.w	r8, r3, r2
 80082a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80082a8:	1aa7      	subs	r7, r4, r2
 80082aa:	ae20      	add	r6, sp, #128	@ 0x80
 80082ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80082b0:	2500      	movs	r5, #0
 80082b2:	4545      	cmp	r5, r8
 80082b4:	dd13      	ble.n	80082de <__kernel_rem_pio2+0x86>
 80082b6:	9b06      	ldr	r3, [sp, #24]
 80082b8:	aa20      	add	r2, sp, #128	@ 0x80
 80082ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80082be:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80082c2:	f04f 0800 	mov.w	r8, #0
 80082c6:	9b00      	ldr	r3, [sp, #0]
 80082c8:	4598      	cmp	r8, r3
 80082ca:	dc31      	bgt.n	8008330 <__kernel_rem_pio2+0xd8>
 80082cc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8008558 <__kernel_rem_pio2+0x300>
 80082d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082d8:	462f      	mov	r7, r5
 80082da:	2600      	movs	r6, #0
 80082dc:	e01b      	b.n	8008316 <__kernel_rem_pio2+0xbe>
 80082de:	42ef      	cmn	r7, r5
 80082e0:	d407      	bmi.n	80082f2 <__kernel_rem_pio2+0x9a>
 80082e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80082e6:	f7f8 f8c9 	bl	800047c <__aeabi_i2d>
 80082ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80082ee:	3501      	adds	r5, #1
 80082f0:	e7df      	b.n	80082b2 <__kernel_rem_pio2+0x5a>
 80082f2:	ec51 0b18 	vmov	r0, r1, d8
 80082f6:	e7f8      	b.n	80082ea <__kernel_rem_pio2+0x92>
 80082f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008300:	f7f8 f926 	bl	8000550 <__aeabi_dmul>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800830c:	f7f7 ff6a 	bl	80001e4 <__adddf3>
 8008310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008314:	3601      	adds	r6, #1
 8008316:	9b05      	ldr	r3, [sp, #20]
 8008318:	429e      	cmp	r6, r3
 800831a:	f1a7 0708 	sub.w	r7, r7, #8
 800831e:	ddeb      	ble.n	80082f8 <__kernel_rem_pio2+0xa0>
 8008320:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008324:	f108 0801 	add.w	r8, r8, #1
 8008328:	ecaa 7b02 	vstmia	sl!, {d7}
 800832c:	3508      	adds	r5, #8
 800832e:	e7ca      	b.n	80082c6 <__kernel_rem_pio2+0x6e>
 8008330:	9b00      	ldr	r3, [sp, #0]
 8008332:	f8dd 8000 	ldr.w	r8, [sp]
 8008336:	aa0c      	add	r2, sp, #48	@ 0x30
 8008338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800833c:	930a      	str	r3, [sp, #40]	@ 0x28
 800833e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008340:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008344:	9309      	str	r3, [sp, #36]	@ 0x24
 8008346:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800834a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800834c:	ab98      	add	r3, sp, #608	@ 0x260
 800834e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008352:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008356:	ed8d 7b02 	vstr	d7, [sp, #8]
 800835a:	ac0c      	add	r4, sp, #48	@ 0x30
 800835c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800835e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008362:	46a1      	mov	r9, r4
 8008364:	46c2      	mov	sl, r8
 8008366:	f1ba 0f00 	cmp.w	sl, #0
 800836a:	f1a5 0508 	sub.w	r5, r5, #8
 800836e:	dc77      	bgt.n	8008460 <__kernel_rem_pio2+0x208>
 8008370:	4658      	mov	r0, fp
 8008372:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008376:	f7ff feb3 	bl	80080e0 <scalbn>
 800837a:	ec57 6b10 	vmov	r6, r7, d0
 800837e:	2200      	movs	r2, #0
 8008380:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f8 f8e2 	bl	8000550 <__aeabi_dmul>
 800838c:	ec41 0b10 	vmov	d0, r0, r1
 8008390:	f000 faba 	bl	8008908 <floor>
 8008394:	4b75      	ldr	r3, [pc, #468]	@ (800856c <__kernel_rem_pio2+0x314>)
 8008396:	ec51 0b10 	vmov	r0, r1, d0
 800839a:	2200      	movs	r2, #0
 800839c:	f7f8 f8d8 	bl	8000550 <__aeabi_dmul>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f7 ff1a 	bl	80001e0 <__aeabi_dsub>
 80083ac:	460f      	mov	r7, r1
 80083ae:	4606      	mov	r6, r0
 80083b0:	f7f8 fb7e 	bl	8000ab0 <__aeabi_d2iz>
 80083b4:	9002      	str	r0, [sp, #8]
 80083b6:	f7f8 f861 	bl	800047c <__aeabi_i2d>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4630      	mov	r0, r6
 80083c0:	4639      	mov	r1, r7
 80083c2:	f7f7 ff0d 	bl	80001e0 <__aeabi_dsub>
 80083c6:	f1bb 0f00 	cmp.w	fp, #0
 80083ca:	4606      	mov	r6, r0
 80083cc:	460f      	mov	r7, r1
 80083ce:	dd6c      	ble.n	80084aa <__kernel_rem_pio2+0x252>
 80083d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80083d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80083d6:	9d02      	ldr	r5, [sp, #8]
 80083d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083dc:	f1cb 0018 	rsb	r0, fp, #24
 80083e0:	fa43 f200 	asr.w	r2, r3, r0
 80083e4:	4415      	add	r5, r2
 80083e6:	4082      	lsls	r2, r0
 80083e8:	1a9b      	subs	r3, r3, r2
 80083ea:	aa0c      	add	r2, sp, #48	@ 0x30
 80083ec:	9502      	str	r5, [sp, #8]
 80083ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80083f2:	f1cb 0217 	rsb	r2, fp, #23
 80083f6:	fa43 f902 	asr.w	r9, r3, r2
 80083fa:	f1b9 0f00 	cmp.w	r9, #0
 80083fe:	dd64      	ble.n	80084ca <__kernel_rem_pio2+0x272>
 8008400:	9b02      	ldr	r3, [sp, #8]
 8008402:	2200      	movs	r2, #0
 8008404:	3301      	adds	r3, #1
 8008406:	9302      	str	r3, [sp, #8]
 8008408:	4615      	mov	r5, r2
 800840a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800840e:	4590      	cmp	r8, r2
 8008410:	f300 80b8 	bgt.w	8008584 <__kernel_rem_pio2+0x32c>
 8008414:	f1bb 0f00 	cmp.w	fp, #0
 8008418:	dd07      	ble.n	800842a <__kernel_rem_pio2+0x1d2>
 800841a:	f1bb 0f01 	cmp.w	fp, #1
 800841e:	f000 80bf 	beq.w	80085a0 <__kernel_rem_pio2+0x348>
 8008422:	f1bb 0f02 	cmp.w	fp, #2
 8008426:	f000 80c6 	beq.w	80085b6 <__kernel_rem_pio2+0x35e>
 800842a:	f1b9 0f02 	cmp.w	r9, #2
 800842e:	d14c      	bne.n	80084ca <__kernel_rem_pio2+0x272>
 8008430:	4632      	mov	r2, r6
 8008432:	463b      	mov	r3, r7
 8008434:	494e      	ldr	r1, [pc, #312]	@ (8008570 <__kernel_rem_pio2+0x318>)
 8008436:	2000      	movs	r0, #0
 8008438:	f7f7 fed2 	bl	80001e0 <__aeabi_dsub>
 800843c:	4606      	mov	r6, r0
 800843e:	460f      	mov	r7, r1
 8008440:	2d00      	cmp	r5, #0
 8008442:	d042      	beq.n	80084ca <__kernel_rem_pio2+0x272>
 8008444:	4658      	mov	r0, fp
 8008446:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8008560 <__kernel_rem_pio2+0x308>
 800844a:	f7ff fe49 	bl	80080e0 <scalbn>
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	ec53 2b10 	vmov	r2, r3, d0
 8008456:	f7f7 fec3 	bl	80001e0 <__aeabi_dsub>
 800845a:	4606      	mov	r6, r0
 800845c:	460f      	mov	r7, r1
 800845e:	e034      	b.n	80084ca <__kernel_rem_pio2+0x272>
 8008460:	4b44      	ldr	r3, [pc, #272]	@ (8008574 <__kernel_rem_pio2+0x31c>)
 8008462:	2200      	movs	r2, #0
 8008464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008468:	f7f8 f872 	bl	8000550 <__aeabi_dmul>
 800846c:	f7f8 fb20 	bl	8000ab0 <__aeabi_d2iz>
 8008470:	f7f8 f804 	bl	800047c <__aeabi_i2d>
 8008474:	4b40      	ldr	r3, [pc, #256]	@ (8008578 <__kernel_rem_pio2+0x320>)
 8008476:	2200      	movs	r2, #0
 8008478:	4606      	mov	r6, r0
 800847a:	460f      	mov	r7, r1
 800847c:	f7f8 f868 	bl	8000550 <__aeabi_dmul>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008488:	f7f7 feaa 	bl	80001e0 <__aeabi_dsub>
 800848c:	f7f8 fb10 	bl	8000ab0 <__aeabi_d2iz>
 8008490:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008494:	f849 0b04 	str.w	r0, [r9], #4
 8008498:	4639      	mov	r1, r7
 800849a:	4630      	mov	r0, r6
 800849c:	f7f7 fea2 	bl	80001e4 <__adddf3>
 80084a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a8:	e75d      	b.n	8008366 <__kernel_rem_pio2+0x10e>
 80084aa:	d107      	bne.n	80084bc <__kernel_rem_pio2+0x264>
 80084ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80084b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80084b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80084ba:	e79e      	b.n	80083fa <__kernel_rem_pio2+0x1a2>
 80084bc:	4b2f      	ldr	r3, [pc, #188]	@ (800857c <__kernel_rem_pio2+0x324>)
 80084be:	2200      	movs	r2, #0
 80084c0:	f7f8 facc 	bl	8000a5c <__aeabi_dcmpge>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d143      	bne.n	8008550 <__kernel_rem_pio2+0x2f8>
 80084c8:	4681      	mov	r9, r0
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4630      	mov	r0, r6
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7f8 faa5 	bl	8000a20 <__aeabi_dcmpeq>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	f000 80bf 	beq.w	800865a <__kernel_rem_pio2+0x402>
 80084dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80084e0:	2200      	movs	r2, #0
 80084e2:	9900      	ldr	r1, [sp, #0]
 80084e4:	428b      	cmp	r3, r1
 80084e6:	da6e      	bge.n	80085c6 <__kernel_rem_pio2+0x36e>
 80084e8:	2a00      	cmp	r2, #0
 80084ea:	f000 8089 	beq.w	8008600 <__kernel_rem_pio2+0x3a8>
 80084ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80084f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80084f4:	f1ab 0b18 	sub.w	fp, fp, #24
 80084f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0f6      	beq.n	80084ee <__kernel_rem_pio2+0x296>
 8008500:	4658      	mov	r0, fp
 8008502:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8008560 <__kernel_rem_pio2+0x308>
 8008506:	f7ff fdeb 	bl	80080e0 <scalbn>
 800850a:	f108 0301 	add.w	r3, r8, #1
 800850e:	00da      	lsls	r2, r3, #3
 8008510:	9205      	str	r2, [sp, #20]
 8008512:	ec55 4b10 	vmov	r4, r5, d0
 8008516:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008518:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8008574 <__kernel_rem_pio2+0x31c>
 800851c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008520:	4646      	mov	r6, r8
 8008522:	f04f 0a00 	mov.w	sl, #0
 8008526:	2e00      	cmp	r6, #0
 8008528:	f280 80cf 	bge.w	80086ca <__kernel_rem_pio2+0x472>
 800852c:	4644      	mov	r4, r8
 800852e:	2c00      	cmp	r4, #0
 8008530:	f2c0 80fd 	blt.w	800872e <__kernel_rem_pio2+0x4d6>
 8008534:	4b12      	ldr	r3, [pc, #72]	@ (8008580 <__kernel_rem_pio2+0x328>)
 8008536:	461f      	mov	r7, r3
 8008538:	ab70      	add	r3, sp, #448	@ 0x1c0
 800853a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800853e:	9306      	str	r3, [sp, #24]
 8008540:	f04f 0a00 	mov.w	sl, #0
 8008544:	f04f 0b00 	mov.w	fp, #0
 8008548:	2600      	movs	r6, #0
 800854a:	eba8 0504 	sub.w	r5, r8, r4
 800854e:	e0e2      	b.n	8008716 <__kernel_rem_pio2+0x4be>
 8008550:	f04f 0902 	mov.w	r9, #2
 8008554:	e754      	b.n	8008400 <__kernel_rem_pio2+0x1a8>
 8008556:	bf00      	nop
	...
 8008564:	3ff00000 	.word	0x3ff00000
 8008568:	08008ca0 	.word	0x08008ca0
 800856c:	40200000 	.word	0x40200000
 8008570:	3ff00000 	.word	0x3ff00000
 8008574:	3e700000 	.word	0x3e700000
 8008578:	41700000 	.word	0x41700000
 800857c:	3fe00000 	.word	0x3fe00000
 8008580:	08008c60 	.word	0x08008c60
 8008584:	f854 3b04 	ldr.w	r3, [r4], #4
 8008588:	b945      	cbnz	r5, 800859c <__kernel_rem_pio2+0x344>
 800858a:	b123      	cbz	r3, 8008596 <__kernel_rem_pio2+0x33e>
 800858c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008590:	f844 3c04 	str.w	r3, [r4, #-4]
 8008594:	2301      	movs	r3, #1
 8008596:	3201      	adds	r2, #1
 8008598:	461d      	mov	r5, r3
 800859a:	e738      	b.n	800840e <__kernel_rem_pio2+0x1b6>
 800859c:	1acb      	subs	r3, r1, r3
 800859e:	e7f7      	b.n	8008590 <__kernel_rem_pio2+0x338>
 80085a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80085a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80085a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80085ae:	a90c      	add	r1, sp, #48	@ 0x30
 80085b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80085b4:	e739      	b.n	800842a <__kernel_rem_pio2+0x1d2>
 80085b6:	f108 32ff 	add.w	r2, r8, #4294967295
 80085ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80085bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80085c4:	e7f3      	b.n	80085ae <__kernel_rem_pio2+0x356>
 80085c6:	a90c      	add	r1, sp, #48	@ 0x30
 80085c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	430a      	orrs	r2, r1
 80085d0:	e787      	b.n	80084e2 <__kernel_rem_pio2+0x28a>
 80085d2:	3401      	adds	r4, #1
 80085d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80085d8:	2a00      	cmp	r2, #0
 80085da:	d0fa      	beq.n	80085d2 <__kernel_rem_pio2+0x37a>
 80085dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80085e2:	eb0d 0503 	add.w	r5, sp, r3
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	aa20      	add	r2, sp, #128	@ 0x80
 80085ea:	4443      	add	r3, r8
 80085ec:	f108 0701 	add.w	r7, r8, #1
 80085f0:	3d98      	subs	r5, #152	@ 0x98
 80085f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80085f6:	4444      	add	r4, r8
 80085f8:	42bc      	cmp	r4, r7
 80085fa:	da04      	bge.n	8008606 <__kernel_rem_pio2+0x3ae>
 80085fc:	46a0      	mov	r8, r4
 80085fe:	e6a2      	b.n	8008346 <__kernel_rem_pio2+0xee>
 8008600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008602:	2401      	movs	r4, #1
 8008604:	e7e6      	b.n	80085d4 <__kernel_rem_pio2+0x37c>
 8008606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008608:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800860c:	f7f7 ff36 	bl	800047c <__aeabi_i2d>
 8008610:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80088d8 <__kernel_rem_pio2+0x680>
 8008614:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008618:	ed8d 7b02 	vstr	d7, [sp, #8]
 800861c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008620:	46b2      	mov	sl, r6
 8008622:	f04f 0800 	mov.w	r8, #0
 8008626:	9b05      	ldr	r3, [sp, #20]
 8008628:	4598      	cmp	r8, r3
 800862a:	dd05      	ble.n	8008638 <__kernel_rem_pio2+0x3e0>
 800862c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008630:	3701      	adds	r7, #1
 8008632:	eca5 7b02 	vstmia	r5!, {d7}
 8008636:	e7df      	b.n	80085f8 <__kernel_rem_pio2+0x3a0>
 8008638:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800863c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008640:	f7f7 ff86 	bl	8000550 <__aeabi_dmul>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800864c:	f7f7 fdca 	bl	80001e4 <__adddf3>
 8008650:	f108 0801 	add.w	r8, r8, #1
 8008654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008658:	e7e5      	b.n	8008626 <__kernel_rem_pio2+0x3ce>
 800865a:	f1cb 0000 	rsb	r0, fp, #0
 800865e:	ec47 6b10 	vmov	d0, r6, r7
 8008662:	f7ff fd3d 	bl	80080e0 <scalbn>
 8008666:	ec55 4b10 	vmov	r4, r5, d0
 800866a:	4b9d      	ldr	r3, [pc, #628]	@ (80088e0 <__kernel_rem_pio2+0x688>)
 800866c:	2200      	movs	r2, #0
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f8 f9f3 	bl	8000a5c <__aeabi_dcmpge>
 8008676:	b300      	cbz	r0, 80086ba <__kernel_rem_pio2+0x462>
 8008678:	4b9a      	ldr	r3, [pc, #616]	@ (80088e4 <__kernel_rem_pio2+0x68c>)
 800867a:	2200      	movs	r2, #0
 800867c:	4620      	mov	r0, r4
 800867e:	4629      	mov	r1, r5
 8008680:	f7f7 ff66 	bl	8000550 <__aeabi_dmul>
 8008684:	f7f8 fa14 	bl	8000ab0 <__aeabi_d2iz>
 8008688:	4606      	mov	r6, r0
 800868a:	f7f7 fef7 	bl	800047c <__aeabi_i2d>
 800868e:	4b94      	ldr	r3, [pc, #592]	@ (80088e0 <__kernel_rem_pio2+0x688>)
 8008690:	2200      	movs	r2, #0
 8008692:	f7f7 ff5d 	bl	8000550 <__aeabi_dmul>
 8008696:	460b      	mov	r3, r1
 8008698:	4602      	mov	r2, r0
 800869a:	4629      	mov	r1, r5
 800869c:	4620      	mov	r0, r4
 800869e:	f7f7 fd9f 	bl	80001e0 <__aeabi_dsub>
 80086a2:	f7f8 fa05 	bl	8000ab0 <__aeabi_d2iz>
 80086a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80086a8:	f10b 0b18 	add.w	fp, fp, #24
 80086ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80086b0:	f108 0801 	add.w	r8, r8, #1
 80086b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80086b8:	e722      	b.n	8008500 <__kernel_rem_pio2+0x2a8>
 80086ba:	4620      	mov	r0, r4
 80086bc:	4629      	mov	r1, r5
 80086be:	f7f8 f9f7 	bl	8000ab0 <__aeabi_d2iz>
 80086c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80086c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80086c8:	e71a      	b.n	8008500 <__kernel_rem_pio2+0x2a8>
 80086ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80086cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80086d0:	f7f7 fed4 	bl	800047c <__aeabi_i2d>
 80086d4:	4622      	mov	r2, r4
 80086d6:	462b      	mov	r3, r5
 80086d8:	f7f7 ff3a 	bl	8000550 <__aeabi_dmul>
 80086dc:	4652      	mov	r2, sl
 80086de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80086e2:	465b      	mov	r3, fp
 80086e4:	4620      	mov	r0, r4
 80086e6:	4629      	mov	r1, r5
 80086e8:	f7f7 ff32 	bl	8000550 <__aeabi_dmul>
 80086ec:	3e01      	subs	r6, #1
 80086ee:	4604      	mov	r4, r0
 80086f0:	460d      	mov	r5, r1
 80086f2:	e718      	b.n	8008526 <__kernel_rem_pio2+0x2ce>
 80086f4:	9906      	ldr	r1, [sp, #24]
 80086f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80086fa:	9106      	str	r1, [sp, #24]
 80086fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008700:	f7f7 ff26 	bl	8000550 <__aeabi_dmul>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4650      	mov	r0, sl
 800870a:	4659      	mov	r1, fp
 800870c:	f7f7 fd6a 	bl	80001e4 <__adddf3>
 8008710:	3601      	adds	r6, #1
 8008712:	4682      	mov	sl, r0
 8008714:	468b      	mov	fp, r1
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	429e      	cmp	r6, r3
 800871a:	dc01      	bgt.n	8008720 <__kernel_rem_pio2+0x4c8>
 800871c:	42b5      	cmp	r5, r6
 800871e:	dae9      	bge.n	80086f4 <__kernel_rem_pio2+0x49c>
 8008720:	ab48      	add	r3, sp, #288	@ 0x120
 8008722:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008726:	e9c5 ab00 	strd	sl, fp, [r5]
 800872a:	3c01      	subs	r4, #1
 800872c:	e6ff      	b.n	800852e <__kernel_rem_pio2+0x2d6>
 800872e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008730:	2b02      	cmp	r3, #2
 8008732:	dc0b      	bgt.n	800874c <__kernel_rem_pio2+0x4f4>
 8008734:	2b00      	cmp	r3, #0
 8008736:	dc39      	bgt.n	80087ac <__kernel_rem_pio2+0x554>
 8008738:	d05d      	beq.n	80087f6 <__kernel_rem_pio2+0x59e>
 800873a:	9b02      	ldr	r3, [sp, #8]
 800873c:	f003 0007 	and.w	r0, r3, #7
 8008740:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8008744:	ecbd 8b02 	vpop	{d8}
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800874e:	2b03      	cmp	r3, #3
 8008750:	d1f3      	bne.n	800873a <__kernel_rem_pio2+0x4e2>
 8008752:	9b05      	ldr	r3, [sp, #20]
 8008754:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008758:	eb0d 0403 	add.w	r4, sp, r3
 800875c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008760:	4625      	mov	r5, r4
 8008762:	46c2      	mov	sl, r8
 8008764:	f1ba 0f00 	cmp.w	sl, #0
 8008768:	f1a5 0508 	sub.w	r5, r5, #8
 800876c:	dc6b      	bgt.n	8008846 <__kernel_rem_pio2+0x5ee>
 800876e:	4645      	mov	r5, r8
 8008770:	2d01      	cmp	r5, #1
 8008772:	f1a4 0408 	sub.w	r4, r4, #8
 8008776:	f300 8087 	bgt.w	8008888 <__kernel_rem_pio2+0x630>
 800877a:	9c05      	ldr	r4, [sp, #20]
 800877c:	ab48      	add	r3, sp, #288	@ 0x120
 800877e:	441c      	add	r4, r3
 8008780:	2000      	movs	r0, #0
 8008782:	2100      	movs	r1, #0
 8008784:	f1b8 0f01 	cmp.w	r8, #1
 8008788:	f300 809c 	bgt.w	80088c4 <__kernel_rem_pio2+0x66c>
 800878c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8008790:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8008794:	f1b9 0f00 	cmp.w	r9, #0
 8008798:	f040 80a6 	bne.w	80088e8 <__kernel_rem_pio2+0x690>
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	e9c3 7800 	strd	r7, r8, [r3]
 80087a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80087a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80087aa:	e7c6      	b.n	800873a <__kernel_rem_pio2+0x4e2>
 80087ac:	9d05      	ldr	r5, [sp, #20]
 80087ae:	ab48      	add	r3, sp, #288	@ 0x120
 80087b0:	441d      	add	r5, r3
 80087b2:	4644      	mov	r4, r8
 80087b4:	2000      	movs	r0, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	2c00      	cmp	r4, #0
 80087ba:	da35      	bge.n	8008828 <__kernel_rem_pio2+0x5d0>
 80087bc:	f1b9 0f00 	cmp.w	r9, #0
 80087c0:	d038      	beq.n	8008834 <__kernel_rem_pio2+0x5dc>
 80087c2:	4602      	mov	r2, r0
 80087c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087c8:	9c04      	ldr	r4, [sp, #16]
 80087ca:	e9c4 2300 	strd	r2, r3, [r4]
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80087d6:	f7f7 fd03 	bl	80001e0 <__aeabi_dsub>
 80087da:	ad4a      	add	r5, sp, #296	@ 0x128
 80087dc:	2401      	movs	r4, #1
 80087de:	45a0      	cmp	r8, r4
 80087e0:	da2b      	bge.n	800883a <__kernel_rem_pio2+0x5e2>
 80087e2:	f1b9 0f00 	cmp.w	r9, #0
 80087e6:	d002      	beq.n	80087ee <__kernel_rem_pio2+0x596>
 80087e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087ec:	4619      	mov	r1, r3
 80087ee:	9b04      	ldr	r3, [sp, #16]
 80087f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80087f4:	e7a1      	b.n	800873a <__kernel_rem_pio2+0x4e2>
 80087f6:	9c05      	ldr	r4, [sp, #20]
 80087f8:	ab48      	add	r3, sp, #288	@ 0x120
 80087fa:	441c      	add	r4, r3
 80087fc:	2000      	movs	r0, #0
 80087fe:	2100      	movs	r1, #0
 8008800:	f1b8 0f00 	cmp.w	r8, #0
 8008804:	da09      	bge.n	800881a <__kernel_rem_pio2+0x5c2>
 8008806:	f1b9 0f00 	cmp.w	r9, #0
 800880a:	d002      	beq.n	8008812 <__kernel_rem_pio2+0x5ba>
 800880c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008810:	4619      	mov	r1, r3
 8008812:	9b04      	ldr	r3, [sp, #16]
 8008814:	e9c3 0100 	strd	r0, r1, [r3]
 8008818:	e78f      	b.n	800873a <__kernel_rem_pio2+0x4e2>
 800881a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800881e:	f7f7 fce1 	bl	80001e4 <__adddf3>
 8008822:	f108 38ff 	add.w	r8, r8, #4294967295
 8008826:	e7eb      	b.n	8008800 <__kernel_rem_pio2+0x5a8>
 8008828:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800882c:	f7f7 fcda 	bl	80001e4 <__adddf3>
 8008830:	3c01      	subs	r4, #1
 8008832:	e7c1      	b.n	80087b8 <__kernel_rem_pio2+0x560>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	e7c6      	b.n	80087c8 <__kernel_rem_pio2+0x570>
 800883a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800883e:	f7f7 fcd1 	bl	80001e4 <__adddf3>
 8008842:	3401      	adds	r4, #1
 8008844:	e7cb      	b.n	80087de <__kernel_rem_pio2+0x586>
 8008846:	ed95 7b00 	vldr	d7, [r5]
 800884a:	ed8d 7b00 	vstr	d7, [sp]
 800884e:	ed95 7b02 	vldr	d7, [r5, #8]
 8008852:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008856:	ec53 2b17 	vmov	r2, r3, d7
 800885a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800885e:	f7f7 fcc1 	bl	80001e4 <__adddf3>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4606      	mov	r6, r0
 8008868:	460f      	mov	r7, r1
 800886a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800886e:	f7f7 fcb7 	bl	80001e0 <__aeabi_dsub>
 8008872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008876:	f7f7 fcb5 	bl	80001e4 <__adddf3>
 800887a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800887e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008882:	e9c5 6700 	strd	r6, r7, [r5]
 8008886:	e76d      	b.n	8008764 <__kernel_rem_pio2+0x50c>
 8008888:	ed94 7b00 	vldr	d7, [r4]
 800888c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008890:	ec51 0b17 	vmov	r0, r1, d7
 8008894:	4652      	mov	r2, sl
 8008896:	465b      	mov	r3, fp
 8008898:	ed8d 7b00 	vstr	d7, [sp]
 800889c:	f7f7 fca2 	bl	80001e4 <__adddf3>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4606      	mov	r6, r0
 80088a6:	460f      	mov	r7, r1
 80088a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088ac:	f7f7 fc98 	bl	80001e0 <__aeabi_dsub>
 80088b0:	4652      	mov	r2, sl
 80088b2:	465b      	mov	r3, fp
 80088b4:	f7f7 fc96 	bl	80001e4 <__adddf3>
 80088b8:	3d01      	subs	r5, #1
 80088ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088be:	e9c4 6700 	strd	r6, r7, [r4]
 80088c2:	e755      	b.n	8008770 <__kernel_rem_pio2+0x518>
 80088c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80088c8:	f7f7 fc8c 	bl	80001e4 <__adddf3>
 80088cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80088d0:	e758      	b.n	8008784 <__kernel_rem_pio2+0x52c>
 80088d2:	bf00      	nop
 80088d4:	f3af 8000 	nop.w
	...
 80088e0:	41700000 	.word	0x41700000
 80088e4:	3e700000 	.word	0x3e700000
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	9a04      	ldr	r2, [sp, #16]
 80088ec:	601f      	str	r7, [r3, #0]
 80088ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80088f2:	605c      	str	r4, [r3, #4]
 80088f4:	609d      	str	r5, [r3, #8]
 80088f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088fa:	60d3      	str	r3, [r2, #12]
 80088fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008900:	6110      	str	r0, [r2, #16]
 8008902:	6153      	str	r3, [r2, #20]
 8008904:	e719      	b.n	800873a <__kernel_rem_pio2+0x4e2>
 8008906:	bf00      	nop

08008908 <floor>:
 8008908:	ec51 0b10 	vmov	r0, r1, d0
 800890c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008918:	2e13      	cmp	r6, #19
 800891a:	460c      	mov	r4, r1
 800891c:	4605      	mov	r5, r0
 800891e:	4680      	mov	r8, r0
 8008920:	dc34      	bgt.n	800898c <floor+0x84>
 8008922:	2e00      	cmp	r6, #0
 8008924:	da17      	bge.n	8008956 <floor+0x4e>
 8008926:	a332      	add	r3, pc, #200	@ (adr r3, 80089f0 <floor+0xe8>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fc5a 	bl	80001e4 <__adddf3>
 8008930:	2200      	movs	r2, #0
 8008932:	2300      	movs	r3, #0
 8008934:	f7f8 f89c 	bl	8000a70 <__aeabi_dcmpgt>
 8008938:	b150      	cbz	r0, 8008950 <floor+0x48>
 800893a:	2c00      	cmp	r4, #0
 800893c:	da55      	bge.n	80089ea <floor+0xe2>
 800893e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008942:	432c      	orrs	r4, r5
 8008944:	2500      	movs	r5, #0
 8008946:	42ac      	cmp	r4, r5
 8008948:	4c2b      	ldr	r4, [pc, #172]	@ (80089f8 <floor+0xf0>)
 800894a:	bf08      	it	eq
 800894c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008950:	4621      	mov	r1, r4
 8008952:	4628      	mov	r0, r5
 8008954:	e023      	b.n	800899e <floor+0x96>
 8008956:	4f29      	ldr	r7, [pc, #164]	@ (80089fc <floor+0xf4>)
 8008958:	4137      	asrs	r7, r6
 800895a:	ea01 0307 	and.w	r3, r1, r7
 800895e:	4303      	orrs	r3, r0
 8008960:	d01d      	beq.n	800899e <floor+0x96>
 8008962:	a323      	add	r3, pc, #140	@ (adr r3, 80089f0 <floor+0xe8>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f7 fc3c 	bl	80001e4 <__adddf3>
 800896c:	2200      	movs	r2, #0
 800896e:	2300      	movs	r3, #0
 8008970:	f7f8 f87e 	bl	8000a70 <__aeabi_dcmpgt>
 8008974:	2800      	cmp	r0, #0
 8008976:	d0eb      	beq.n	8008950 <floor+0x48>
 8008978:	2c00      	cmp	r4, #0
 800897a:	bfbe      	ittt	lt
 800897c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008980:	4133      	asrlt	r3, r6
 8008982:	18e4      	addlt	r4, r4, r3
 8008984:	ea24 0407 	bic.w	r4, r4, r7
 8008988:	2500      	movs	r5, #0
 800898a:	e7e1      	b.n	8008950 <floor+0x48>
 800898c:	2e33      	cmp	r6, #51	@ 0x33
 800898e:	dd0a      	ble.n	80089a6 <floor+0x9e>
 8008990:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008994:	d103      	bne.n	800899e <floor+0x96>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	f7f7 fc23 	bl	80001e4 <__adddf3>
 800899e:	ec41 0b10 	vmov	d0, r0, r1
 80089a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80089aa:	f04f 37ff 	mov.w	r7, #4294967295
 80089ae:	40df      	lsrs	r7, r3
 80089b0:	4207      	tst	r7, r0
 80089b2:	d0f4      	beq.n	800899e <floor+0x96>
 80089b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80089f0 <floor+0xe8>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f7f7 fc13 	bl	80001e4 <__adddf3>
 80089be:	2200      	movs	r2, #0
 80089c0:	2300      	movs	r3, #0
 80089c2:	f7f8 f855 	bl	8000a70 <__aeabi_dcmpgt>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d0c2      	beq.n	8008950 <floor+0x48>
 80089ca:	2c00      	cmp	r4, #0
 80089cc:	da0a      	bge.n	80089e4 <floor+0xdc>
 80089ce:	2e14      	cmp	r6, #20
 80089d0:	d101      	bne.n	80089d6 <floor+0xce>
 80089d2:	3401      	adds	r4, #1
 80089d4:	e006      	b.n	80089e4 <floor+0xdc>
 80089d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80089da:	2301      	movs	r3, #1
 80089dc:	40b3      	lsls	r3, r6
 80089de:	441d      	add	r5, r3
 80089e0:	4545      	cmp	r5, r8
 80089e2:	d3f6      	bcc.n	80089d2 <floor+0xca>
 80089e4:	ea25 0507 	bic.w	r5, r5, r7
 80089e8:	e7b2      	b.n	8008950 <floor+0x48>
 80089ea:	2500      	movs	r5, #0
 80089ec:	462c      	mov	r4, r5
 80089ee:	e7af      	b.n	8008950 <floor+0x48>
 80089f0:	8800759c 	.word	0x8800759c
 80089f4:	7e37e43c 	.word	0x7e37e43c
 80089f8:	bff00000 	.word	0xbff00000
 80089fc:	000fffff 	.word	0x000fffff

08008a00 <_init>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	bf00      	nop
 8008a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a06:	bc08      	pop	{r3}
 8008a08:	469e      	mov	lr, r3
 8008a0a:	4770      	bx	lr

08008a0c <_fini>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	bf00      	nop
 8008a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a12:	bc08      	pop	{r3}
 8008a14:	469e      	mov	lr, r3
 8008a16:	4770      	bx	lr
