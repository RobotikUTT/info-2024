
moving_tiik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08008670  08008670  00009670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d8  080088d8  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  080088d8  080088d8  000098d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088e0  080088e0  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e0  080088e0  000098e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088e4  080088e4  000098e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080088e8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000070  08008958  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08008958  0000a5bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e61e  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0c  00000000  00000000  000186be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0001a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aae  00000000  00000000  0001b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017617  00000000  00000000  0001be06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9d5  00000000  00000000  0003341d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099a43  00000000  00000000  00042df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004248  00000000  00000000  000dc878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000e0ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008658 	.word	0x08008658

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08008658 	.word	0x08008658

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96a 	b.w	8000e8c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14e      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bdc:	4694      	mov	ip, r2
 8000bde:	458c      	cmp	ip, r1
 8000be0:	4686      	mov	lr, r0
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	d962      	bls.n	8000cae <__udivmoddi4+0xde>
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0320 	rsb	r3, r2, #32
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f f68c 	uxth.w	r6, ip
 8000c06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb04 f106 	mul.w	r1, r4, r6
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c26:	f080 8112 	bcs.w	8000e4e <__udivmoddi4+0x27e>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 810f 	bls.w	8000e4e <__udivmoddi4+0x27e>
 8000c30:	3c02      	subs	r4, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	fa1f f38e 	uxth.w	r3, lr
 8000c3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f606 	mul.w	r6, r0, r6
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c56:	f080 80fc 	bcs.w	8000e52 <__udivmoddi4+0x282>
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	f240 80f9 	bls.w	8000e52 <__udivmoddi4+0x282>
 8000c60:	4463      	add	r3, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	1b9b      	subs	r3, r3, r6
 8000c66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11d      	cbz	r5, 8000c76 <__udivmoddi4+0xa6>
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	2200      	movs	r2, #0
 8000c72:	e9c5 3200 	strd	r3, r2, [r5]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d905      	bls.n	8000c8a <__udivmoddi4+0xba>
 8000c7e:	b10d      	cbz	r5, 8000c84 <__udivmoddi4+0xb4>
 8000c80:	e9c5 0100 	strd	r0, r1, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4608      	mov	r0, r1
 8000c88:	e7f5      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d146      	bne.n	8000d20 <__udivmoddi4+0x150>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xcc>
 8000c96:	4290      	cmp	r0, r2
 8000c98:	f0c0 80f0 	bcc.w	8000e7c <__udivmoddi4+0x2ac>
 8000c9c:	1a86      	subs	r6, r0, r2
 8000c9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d0e6      	beq.n	8000c76 <__udivmoddi4+0xa6>
 8000ca8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cac:	e7e3      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	f040 8090 	bne.w	8000dd4 <__udivmoddi4+0x204>
 8000cb4:	eba1 040c 	sub.w	r4, r1, ip
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb08 4416 	mls	r4, r8, r6, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb07 f006 	mul.w	r0, r7, r6
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x11c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x11a>
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cea:	4626      	mov	r6, r4
 8000cec:	1a1c      	subs	r4, r3, r0
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cf6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb00 f707 	mul.w	r7, r0, r7
 8000d02:	429f      	cmp	r7, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x148>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x146>
 8000d10:	429f      	cmp	r7, r3
 8000d12:	f200 80b0 	bhi.w	8000e76 <__udivmoddi4+0x2a6>
 8000d16:	4620      	mov	r0, r4
 8000d18:	1bdb      	subs	r3, r3, r7
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0x9c>
 8000d20:	f1c1 0620 	rsb	r6, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d30:	fa04 f301 	lsl.w	r3, r4, r1
 8000d34:	ea43 030c 	orr.w	r3, r3, ip
 8000d38:	40f4      	lsrs	r4, r6
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	0c38      	lsrs	r0, r7, #16
 8000d40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d44:	fbb4 fef0 	udiv	lr, r4, r0
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d54:	fb0e f90c 	mul.w	r9, lr, ip
 8000d58:	45a1      	cmp	r9, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x1a6>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d66:	f080 8084 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000d6a:	45a1      	cmp	r9, r4
 8000d6c:	f240 8081 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000d70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	eba4 0409 	sub.w	r4, r4, r9
 8000d7a:	fa1f f983 	uxth.w	r9, r3
 8000d7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d82:	fb00 4413 	mls	r4, r0, r3, r4
 8000d86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x1d2>
 8000d92:	193c      	adds	r4, r7, r4
 8000d94:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d98:	d267      	bcs.n	8000e6a <__udivmoddi4+0x29a>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d965      	bls.n	8000e6a <__udivmoddi4+0x29a>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000da6:	fba0 9302 	umull	r9, r3, r0, r2
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	429c      	cmp	r4, r3
 8000db0:	46ce      	mov	lr, r9
 8000db2:	469c      	mov	ip, r3
 8000db4:	d351      	bcc.n	8000e5a <__udivmoddi4+0x28a>
 8000db6:	d04e      	beq.n	8000e56 <__udivmoddi4+0x286>
 8000db8:	b155      	cbz	r5, 8000dd0 <__udivmoddi4+0x200>
 8000dba:	ebb8 030e 	subs.w	r3, r8, lr
 8000dbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e750      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000dd4:	f1c2 0320 	rsb	r3, r2, #32
 8000dd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa24 f303 	lsr.w	r3, r4, r3
 8000de4:	4094      	lsls	r4, r2
 8000de6:	430c      	orrs	r4, r1
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df0:	fa1f f78c 	uxth.w	r7, ip
 8000df4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dfc:	0c23      	lsrs	r3, r4, #16
 8000dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e02:	fb00 f107 	mul.w	r1, r0, r7
 8000e06:	4299      	cmp	r1, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x24c>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e12:	d22c      	bcs.n	8000e6e <__udivmoddi4+0x29e>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d92a      	bls.n	8000e6e <__udivmoddi4+0x29e>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e24:	fb08 3311 	mls	r3, r8, r1, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb01 f307 	mul.w	r3, r1, r7
 8000e30:	42a3      	cmp	r3, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x276>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e3c:	d213      	bcs.n	8000e66 <__udivmoddi4+0x296>
 8000e3e:	42a3      	cmp	r3, r4
 8000e40:	d911      	bls.n	8000e66 <__udivmoddi4+0x296>
 8000e42:	3902      	subs	r1, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	1ae4      	subs	r4, r4, r3
 8000e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e4c:	e739      	b.n	8000cc2 <__udivmoddi4+0xf2>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	e6f0      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e706      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e56:	45c8      	cmp	r8, r9
 8000e58:	d2ae      	bcs.n	8000db8 <__udivmoddi4+0x1e8>
 8000e5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e62:	3801      	subs	r0, #1
 8000e64:	e7a8      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e66:	4631      	mov	r1, r6
 8000e68:	e7ed      	b.n	8000e46 <__udivmoddi4+0x276>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	e799      	b.n	8000da2 <__udivmoddi4+0x1d2>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e7d4      	b.n	8000e1c <__udivmoddi4+0x24c>
 8000e72:	46d6      	mov	lr, sl
 8000e74:	e77f      	b.n	8000d76 <__udivmoddi4+0x1a6>
 8000e76:	4463      	add	r3, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e74d      	b.n	8000d18 <__udivmoddi4+0x148>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	4623      	mov	r3, r4
 8000e80:	4608      	mov	r0, r1
 8000e82:	e70f      	b.n	8000ca4 <__udivmoddi4+0xd4>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	e730      	b.n	8000cec <__udivmoddi4+0x11c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <initMotors>:
// WARNING :
// motorN c'est moteur avec condo C3
// motorS0 c'est moteur avec condo C4
// motorSE c'est moteur avec condo C2

void initMotors(){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

	motorN.timer = htim3;
 8000e94:	4a27      	ldr	r2, [pc, #156]	@ (8000f34 <initMotors+0xa4>)
 8000e96:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <initMotors+0xa8>)
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2348      	movs	r3, #72	@ 0x48
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f005 faac 	bl	80063fc <memcpy>
	motorN.dirPin = GPIO_PIN_3;
 8000ea4:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <initMotors+0xa4>)
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motorN.dirGPIO = GPIOB;
 8000eac:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <initMotors+0xa4>)
 8000eae:	4a23      	ldr	r2, [pc, #140]	@ (8000f3c <initMotors+0xac>)
 8000eb0:	64da      	str	r2, [r3, #76]	@ 0x4c
	motorN.currentSpeed = 0;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <initMotors+0xa4>)
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	651a      	str	r2, [r3, #80]	@ 0x50

	motorSO.timer = htim1;
 8000eba:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <initMotors+0xb0>)
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <initMotors+0xb4>)
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2348      	movs	r3, #72	@ 0x48
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f005 fa99 	bl	80063fc <memcpy>
	motorSO.dirPin = GPIO_PIN_10;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <initMotors+0xb0>)
 8000ecc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ed0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motorSO.dirGPIO = GPIOA;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <initMotors+0xb0>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <initMotors+0xb8>)
 8000ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
	motorSO.currentSpeed = 0;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <initMotors+0xb0>)
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	651a      	str	r2, [r3, #80]	@ 0x50

	motorSE.timer = htim4;
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f4c <initMotors+0xbc>)
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <initMotors+0xc0>)
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2348      	movs	r3, #72	@ 0x48
 8000eec:	461a      	mov	r2, r3
 8000eee:	f005 fa85 	bl	80063fc <memcpy>
	motorSE.dirPin = GPIO_PIN_5;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <initMotors+0xbc>)
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motorSE.dirGPIO = GPIOB;
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <initMotors+0xbc>)
 8000efc:	4a0f      	ldr	r2, [pc, #60]	@ (8000f3c <initMotors+0xac>)
 8000efe:	64da      	str	r2, [r3, #76]	@ 0x4c
	motorSE.currentSpeed = 0;
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <initMotors+0xbc>)
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	651a      	str	r2, [r3, #80]	@ 0x50

	motorX.timer = htim2;
 8000f08:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <initMotors+0xc4>)
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <initMotors+0xc8>)
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	2348      	movs	r3, #72	@ 0x48
 8000f12:	461a      	mov	r2, r3
 8000f14:	f005 fa72 	bl	80063fc <memcpy>
	motorX.dirPin = GPIO_PIN_4;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <initMotors+0xc4>)
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motorX.dirGPIO = GPIOB;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <initMotors+0xc4>)
 8000f22:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <initMotors+0xac>)
 8000f24:	64da      	str	r2, [r3, #76]	@ 0x4c
	motorX.currentSpeed = 0;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <initMotors+0xc4>)
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	651a      	str	r2, [r3, #80]	@ 0x50

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000308 	.word	0x20000308
 8000f38:	20000164 	.word	0x20000164
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	200003b0 	.word	0x200003b0
 8000f44:	200000d4 	.word	0x200000d4
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	2000035c 	.word	0x2000035c
 8000f50:	200001ac 	.word	0x200001ac
 8000f54:	20000404 	.word	0x20000404
 8000f58:	2000011c 	.word	0x2000011c

08000f5c <transformData>:

void transformData(uint32_t data, int start_index){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	txBuffer[start_index*4 + 4] = (data & 0xff);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	b2d1      	uxtb	r1, r2
 8000f70:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb0 <transformData+0x54>)
 8000f72:	54d1      	strb	r1, [r2, r3]
	txBuffer[start_index*4 + 3] = ((data >> 8) & 0xff);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	0a1a      	lsrs	r2, r3, #8
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	b2d1      	uxtb	r1, r2
 8000f80:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <transformData+0x54>)
 8000f82:	54d1      	strb	r1, [r2, r3]
	txBuffer[start_index*4 + 2] = ((data >> 16) & 0xff);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	0c1a      	lsrs	r2, r3, #16
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	b2d1      	uxtb	r1, r2
 8000f90:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <transformData+0x54>)
 8000f92:	54d1      	strb	r1, [r2, r3]
	txBuffer[start_index*4 + 1] = ((data >> 24) & 0xff);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	0e1a      	lsrs	r2, r3, #24
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b2d1      	uxtb	r1, r2
 8000fa0:	4a03      	ldr	r2, [pc, #12]	@ (8000fb0 <transformData+0x54>)
 8000fa2:	54d1      	strb	r1, [r2, r3]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	200002e8 	.word	0x200002e8

08000fb4 <setPosition>:


void setPosition(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
	float position_X = TiikPosition.x;
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <setPosition+0x4c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	60bb      	str	r3, [r7, #8]
	float position_Y = TiikPosition.y;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <setPosition+0x4c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	607b      	str	r3, [r7, #4]
	float position_angle = TiikPosition.angle;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <setPosition+0x4c>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	603b      	str	r3, [r7, #0]

	uint32_t position_X_to_send = *((uint32_t*) &position_X);
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	617b      	str	r3, [r7, #20]
	uint32_t position_Y_to_send = *((uint32_t*) &position_Y);
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	613b      	str	r3, [r7, #16]
	uint32_t position_angle_to_send = *((uint32_t*) &position_angle);
 8000fda:	463b      	mov	r3, r7
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	60fb      	str	r3, [r7, #12]

	transformData(position_X_to_send,0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ffba 	bl	8000f5c <transformData>
	transformData(position_Y_to_send,1);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	6938      	ldr	r0, [r7, #16]
 8000fec:	f7ff ffb6 	bl	8000f5c <transformData>
	transformData(position_angle_to_send,2);
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f7ff ffb2 	bl	8000f5c <transformData>

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000045c 	.word	0x2000045c

08001004 <calculPosition>:

void calculPosition(float distance, float cosTheta,float sinTheta){
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	ed87 0a03 	vstr	s0, [r7, #12]
 800100e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001012:	ed87 1a01 	vstr	s2, [r7, #4]
	float position_X = distance*cosTheta - TiikPosition.x;
 8001016:	ed97 7a03 	vldr	s14, [r7, #12]
 800101a:	edd7 7a02 	vldr	s15, [r7, #8]
 800101e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001022:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <calculPosition+0x98>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102c:	edc7 7a06 	vstr	s15, [r7, #24]
	float position_Y = distance*cosTheta - TiikPosition.y;
 8001030:	ed97 7a03 	vldr	s14, [r7, #12]
 8001034:	edd7 7a02 	vldr	s15, [r7, #8]
 8001038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <calculPosition+0x98>)
 800103e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001046:	edc7 7a05 	vstr	s15, [r7, #20]
	float position_angle = TiikPosition.angle;
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <calculPosition+0x98>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	613b      	str	r3, [r7, #16]

	uint32_t position_X_to_send = *((uint32_t*) &position_X);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t position_Y_to_send = *((uint32_t*) &position_Y);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	623b      	str	r3, [r7, #32]
	uint32_t position_angle_to_send = *((uint32_t*) &position_angle);
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	61fb      	str	r3, [r7, #28]

	TiikTemporaryPosition.x = position_X;
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <calculPosition+0x9c>)
 800106c:	6013      	str	r3, [r2, #0]
	TiikTemporaryPosition.y = position_Y;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	4a0b      	ldr	r2, [pc, #44]	@ (80010a0 <calculPosition+0x9c>)
 8001072:	6053      	str	r3, [r2, #4]
	TiikTemporaryPosition.angle = position_angle;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <calculPosition+0x9c>)
 8001078:	6093      	str	r3, [r2, #8]

	transformData(position_X_to_send,0);
 800107a:	2100      	movs	r1, #0
 800107c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800107e:	f7ff ff6d 	bl	8000f5c <transformData>
	transformData(position_Y_to_send,1);
 8001082:	2101      	movs	r1, #1
 8001084:	6a38      	ldr	r0, [r7, #32]
 8001086:	f7ff ff69 	bl	8000f5c <transformData>
	transformData(position_angle_to_send,2);
 800108a:	2102      	movs	r1, #2
 800108c:	69f8      	ldr	r0, [r7, #28]
 800108e:	f7ff ff65 	bl	8000f5c <transformData>

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000045c 	.word	0x2000045c
 80010a0:	2000046c 	.word	0x2000046c

080010a4 <calculPosition2>:

void calculPosition2(float angle,float way){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ae:	edc7 0a00 	vstr	s1, [r7]
	float position_X = TiikPosition.x;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <calculPosition2+0x80>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	613b      	str	r3, [r7, #16]
	float position_Y = TiikPosition.y;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <calculPosition2+0x80>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	60fb      	str	r3, [r7, #12]
	float position_angle = TiikPosition.angle + angle*way;
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <calculPosition2+0x80>)
 80010c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80010c4:	edd7 6a01 	vldr	s13, [r7, #4]
 80010c8:	edd7 7a00 	vldr	s15, [r7]
 80010cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d4:	edc7 7a02 	vstr	s15, [r7, #8]

	uint32_t position_X_to_send = *((uint32_t*) &position_X);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	61fb      	str	r3, [r7, #28]
	uint32_t position_Y_to_send = *((uint32_t*) &position_Y);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
	uint32_t position_angle_to_send = *((uint32_t*) &position_angle);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	617b      	str	r3, [r7, #20]

	TiikTemporaryPosition.x = position_X;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <calculPosition2+0x84>)
 80010f4:	6013      	str	r3, [r2, #0]
	TiikTemporaryPosition.y = position_Y;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <calculPosition2+0x84>)
 80010fa:	6053      	str	r3, [r2, #4]
	TiikTemporaryPosition.angle = position_angle;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <calculPosition2+0x84>)
 8001100:	6093      	str	r3, [r2, #8]

	transformData(position_X_to_send,0);
 8001102:	2100      	movs	r1, #0
 8001104:	69f8      	ldr	r0, [r7, #28]
 8001106:	f7ff ff29 	bl	8000f5c <transformData>
	transformData(position_Y_to_send,1);
 800110a:	2101      	movs	r1, #1
 800110c:	69b8      	ldr	r0, [r7, #24]
 800110e:	f7ff ff25 	bl	8000f5c <transformData>
	transformData(position_angle_to_send,2);
 8001112:	2102      	movs	r1, #2
 8001114:	6978      	ldr	r0, [r7, #20]
 8001116:	f7ff ff21 	bl	8000f5c <transformData>
}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000045c 	.word	0x2000045c
 8001128:	2000046c 	.word	0x2000046c

0800112c <updateTimerPeriod>:

void updateTimerPeriod(Motor motor, float speed){
 800112c:	b084      	sub	sp, #16
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	f107 0c18 	add.w	ip, r7, #24
 8001138:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800113c:	ed87 0a01 	vstr	s0, [r7, #4]
	float internalFrequency = 16000000;
 8001140:	4b29      	ldr	r3, [pc, #164]	@ (80011e8 <updateTimerPeriod+0xbc>)
 8001142:	60fb      	str	r3, [r7, #12]
	motor.currentSpeed = speed;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	66bb      	str	r3, [r7, #104]	@ 0x68
	if (speed > 0){
 8001148:	edd7 7a01 	vldr	s15, [r7, #4]
 800114c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001154:	dd18      	ble.n	8001188 <updateTimerPeriod+0x5c>
		HAL_GPIO_WritePin(motor.dirGPIO, motor.dirPin, GPIO_PIN_SET);
 8001156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001158:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 800115c:	2201      	movs	r2, #1
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fc80 	bl	8003a64 <HAL_GPIO_WritePin>
		motor.timer.Instance->ARR = (uint16_t) (internalFrequency/(speed*16));
 8001164:	edd7 7a01 	vldr	s15, [r7, #4]
 8001168:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800116c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001170:	edd7 6a03 	vldr	s13, [r7, #12]
 8001174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117c:	ee17 3a90 	vmov	r3, s15
 8001180:	b29a      	uxth	r2, r3
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001186:	e024      	b.n	80011d2 <updateTimerPeriod+0xa6>
	} else if (speed < 0) {
 8001188:	edd7 7a01 	vldr	s15, [r7, #4]
 800118c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d51a      	bpl.n	80011cc <updateTimerPeriod+0xa0>
		HAL_GPIO_WritePin(motor.dirGPIO, motor.dirPin, GPIO_PIN_RESET);
 8001196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001198:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 800119c:	2200      	movs	r2, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fc60 	bl	8003a64 <HAL_GPIO_WritePin>
		motor.timer.Instance->ARR = (uint16_t) -(internalFrequency/(speed*16));
 80011a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80011ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011b0:	edd7 6a03 	vldr	s13, [r7, #12]
 80011b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b8:	eef1 7a67 	vneg.f32	s15, s15
 80011bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c0:	ee17 3a90 	vmov	r3, s15
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011ca:	e002      	b.n	80011d2 <updateTimerPeriod+0xa6>
	} else {
		motor.timer.Instance->ARR = 0;
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2200      	movs	r2, #0
 80011d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	motor.timer.Instance->CNT = 0;
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011e2:	b004      	add	sp, #16
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	4b742400 	.word	0x4b742400
 80011ec:	00000000 	.word	0x00000000

080011f0 <turn3Wheel>:

void turn3Wheel(float speed,float angle){
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	ed2d 8b02 	vpush	{d8}
 80011f6:	b0a6      	sub	sp, #152	@ 0x98
 80011f8:	af12      	add	r7, sp, #72	@ 0x48
 80011fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80011fe:	edc7 0a00 	vstr	s1, [r7]

	float stepByTurn = 3200;
 8001202:	4b8d      	ldr	r3, [pc, #564]	@ (8001438 <turn3Wheel+0x248>)
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float stepToRadians = stepByTurn/(2*M_PI);
 8001206:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001208:	f7ff f94a 	bl	80004a0 <__aeabi_f2d>
 800120c:	a384      	add	r3, pc, #528	@ (adr r3, 8001420 <turn3Wheel+0x230>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fac7 	bl	80007a4 <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fc6f 	bl	8000b00 <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
	float way;

	TiikTemporaryPosition.x = TiikPosition.x;
 8001226:	4b85      	ldr	r3, [pc, #532]	@ (800143c <turn3Wheel+0x24c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a85      	ldr	r2, [pc, #532]	@ (8001440 <turn3Wheel+0x250>)
 800122c:	6013      	str	r3, [r2, #0]
	TiikTemporaryPosition.y = TiikPosition.y;
 800122e:	4b83      	ldr	r3, [pc, #524]	@ (800143c <turn3Wheel+0x24c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a83      	ldr	r2, [pc, #524]	@ (8001440 <turn3Wheel+0x250>)
 8001234:	6053      	str	r3, [r2, #4]
	TiikTemporaryPosition.angle = TiikPosition.angle;
 8001236:	4b81      	ldr	r3, [pc, #516]	@ (800143c <turn3Wheel+0x24c>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	4a81      	ldr	r2, [pc, #516]	@ (8001440 <turn3Wheel+0x250>)
 800123c:	6093      	str	r3, [r2, #8]

	float angleTiik;

	if (angle < 0){
 800123e:	edd7 7a00 	vldr	s15, [r7]
 8001242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	d508      	bpl.n	800125e <turn3Wheel+0x6e>
		way = -1;
 800124c:	4b7d      	ldr	r3, [pc, #500]	@ (8001444 <turn3Wheel+0x254>)
 800124e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		angleTiik = -angle;
 8001250:	edd7 7a00 	vldr	s15, [r7]
 8001254:	eef1 7a67 	vneg.f32	s15, s15
 8001258:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 800125c:	e004      	b.n	8001268 <turn3Wheel+0x78>
	} else {
		way = 1;
 800125e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
		angleTiik = angle;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	64bb      	str	r3, [r7, #72]	@ 0x48
	}

	if (angleTiik > M_PI){
 8001268:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800126a:	f7ff f919 	bl	80004a0 <__aeabi_f2d>
 800126e:	a36e      	add	r3, pc, #440	@ (adr r3, 8001428 <turn3Wheel+0x238>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff fbfc 	bl	8000a70 <__aeabi_dcmpgt>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d018      	beq.n	80012b0 <turn3Wheel+0xc0>
		angleTiik = 2*M_PI - angle;
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f7ff f90e 	bl	80004a0 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	a165      	add	r1, pc, #404	@ (adr r1, 8001420 <turn3Wheel+0x230>)
 800128a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800128e:	f7fe ffa7 	bl	80001e0 <__aeabi_dsub>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fc31 	bl	8000b00 <__aeabi_d2f>
 800129e:	4603      	mov	r3, r0
 80012a0:	64bb      	str	r3, [r7, #72]	@ 0x48
		way = -way;
 80012a2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80012a6:	eef1 7a67 	vneg.f32	s15, s15
 80012aa:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 80012ae:	e004      	b.n	80012ba <turn3Wheel+0xca>
	} else {
		angleTiik = angle;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	64bb      	str	r3, [r7, #72]	@ 0x48
		way = 1;
 80012b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

	float speedTiik = 10;
 80012ba:	4b63      	ldr	r3, [pc, #396]	@ (8001448 <turn3Wheel+0x258>)
 80012bc:	647b      	str	r3, [r7, #68]	@ 0x44
	float minSpeed = 10;
 80012be:	4b62      	ldr	r3, [pc, #392]	@ (8001448 <turn3Wheel+0x258>)
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24

	float radianAchieve = 0.0;
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	643b      	str	r3, [r7, #64]	@ 0x40
	float radianToAchieve = angleTiik;
 80012c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ca:	623b      	str	r3, [r7, #32]

	int task = 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

	float rampRadian = 0.5;
 80012d0:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80012d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	if (radianToAchieve < 2*rampRadian){
 80012d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80012da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012de:	ed97 7a08 	vldr	s14, [r7, #32]
 80012e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d507      	bpl.n	80012fc <turn3Wheel+0x10c>
		rampRadian = radianToAchieve/2;
 80012ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80012f0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80012f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

	float deltaT = 30;
 80012fc:	4b53      	ldr	r3, [pc, #332]	@ (800144c <turn3Wheel+0x25c>)
 80012fe:	61fb      	str	r3, [r7, #28]

	float deltaTn = 0.0;
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
	float tn = 0.0;
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
	float tn_1 = 0.0;
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	637b      	str	r3, [r7, #52]	@ 0x34
	float t0 = __HAL_TIM_GetCounter(&htim5)*pow(10,-6);
 8001312:	4b4f      	ldr	r3, [pc, #316]	@ (8001450 <turn3Wheel+0x260>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f89f 	bl	800045c <__aeabi_ui2d>
 800131e:	a344      	add	r3, pc, #272	@ (adr r3, 8001430 <turn3Wheel+0x240>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f914 	bl	8000550 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fbe6 	bl	8000b00 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	613b      	str	r3, [r7, #16]

	stop = 0;
 8001338:	4b46      	ldr	r3, [pc, #280]	@ (8001454 <turn3Wheel+0x264>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]

	float urgencyRamp = 0.25;
 800133e:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8001342:	60fb      	str	r3, [r7, #12]
	float urgencyRadian  = 0;
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30

	maxSpeed = speed;
 800134a:	4a43      	ldr	r2, [pc, #268]	@ (8001458 <turn3Wheel+0x268>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]

	while(task){
 8001350:	e137      	b.n	80015c2 <turn3Wheel+0x3d2>

		if (stop){
 8001352:	4b40      	ldr	r3, [pc, #256]	@ (8001454 <turn3Wheel+0x264>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d016      	beq.n	8001388 <turn3Wheel+0x198>
			speedTiik = maxSpeed  - ((maxSpeed - minSpeed)*urgencyRadian/urgencyRamp);
 800135a:	4b3f      	ldr	r3, [pc, #252]	@ (8001458 <turn3Wheel+0x268>)
 800135c:	ed93 7a00 	vldr	s14, [r3]
 8001360:	4b3d      	ldr	r3, [pc, #244]	@ (8001458 <turn3Wheel+0x268>)
 8001362:	edd3 6a00 	vldr	s13, [r3]
 8001366:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800136a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800136e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001372:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001376:	edd7 6a03 	vldr	s13, [r7, #12]
 800137a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800137e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001382:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8001386:	e06c      	b.n	8001462 <turn3Wheel+0x272>
		} else if (radianAchieve < rampRadian) {
 8001388:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800138c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	d515      	bpl.n	80013c6 <turn3Wheel+0x1d6>
		    speedTiik = ((maxSpeed - minSpeed)*radianAchieve/rampRadian) + minSpeed;
 800139a:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <turn3Wheel+0x268>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013a8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013b0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80013b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80013bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80013c4:	e04d      	b.n	8001462 <turn3Wheel+0x272>
		} else if (radianToAchieve - radianAchieve < rampRadian){
 80013c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80013ca:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80013d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	dd3d      	ble.n	800145c <turn3Wheel+0x26c>
			speedTiik = maxSpeed - ((maxSpeed-minSpeed)*(radianAchieve-radianToAchieve + rampRadian)/rampRadian);
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <turn3Wheel+0x268>)
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <turn3Wheel+0x268>)
 80013e8:	edd3 6a00 	vldr	s13, [r3]
 80013ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013f4:	ed97 6a10 	vldr	s12, [r7, #64]	@ 0x40
 80013f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80013fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001400:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001404:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001408:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800140c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001410:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001418:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800141c:	e021      	b.n	8001462 <turn3Wheel+0x272>
 800141e:	bf00      	nop
 8001420:	54442d18 	.word	0x54442d18
 8001424:	401921fb 	.word	0x401921fb
 8001428:	54442d18 	.word	0x54442d18
 800142c:	400921fb 	.word	0x400921fb
 8001430:	a0b5ed8d 	.word	0xa0b5ed8d
 8001434:	3eb0c6f7 	.word	0x3eb0c6f7
 8001438:	45480000 	.word	0x45480000
 800143c:	2000045c 	.word	0x2000045c
 8001440:	2000046c 	.word	0x2000046c
 8001444:	bf800000 	.word	0xbf800000
 8001448:	41200000 	.word	0x41200000
 800144c:	41f00000 	.word	0x41f00000
 8001450:	200001f4 	.word	0x200001f4
 8001454:	2000047d 	.word	0x2000047d
 8001458:	20000458 	.word	0x20000458
		} else {
			speedTiik = maxSpeed;
 800145c:	4b80      	ldr	r3, [pc, #512]	@ (8001660 <turn3Wheel+0x470>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		updateTimerPeriod(motorN,way*speedTiik*stepToRadians);
 8001462:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001466:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800146a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001472:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001476:	4c7b      	ldr	r4, [pc, #492]	@ (8001664 <turn3Wheel+0x474>)
 8001478:	4668      	mov	r0, sp
 800147a:	f104 0310 	add.w	r3, r4, #16
 800147e:	2244      	movs	r2, #68	@ 0x44
 8001480:	4619      	mov	r1, r3
 8001482:	f004 ffbb 	bl	80063fc <memcpy>
 8001486:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800148a:	eeb0 0a48 	vmov.f32	s0, s16
 800148e:	f7ff fe4d 	bl	800112c <updateTimerPeriod>
		updateTimerPeriod(motorSE,way*speedTiik*stepToRadians);
 8001492:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001496:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800149a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80014a2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80014a6:	4c70      	ldr	r4, [pc, #448]	@ (8001668 <turn3Wheel+0x478>)
 80014a8:	4668      	mov	r0, sp
 80014aa:	f104 0310 	add.w	r3, r4, #16
 80014ae:	2244      	movs	r2, #68	@ 0x44
 80014b0:	4619      	mov	r1, r3
 80014b2:	f004 ffa3 	bl	80063fc <memcpy>
 80014b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ba:	eeb0 0a48 	vmov.f32	s0, s16
 80014be:	f7ff fe35 	bl	800112c <updateTimerPeriod>
		updateTimerPeriod(motorSO,way*speedTiik*stepToRadians);
 80014c2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80014c6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80014ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80014d2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80014d6:	4c65      	ldr	r4, [pc, #404]	@ (800166c <turn3Wheel+0x47c>)
 80014d8:	4668      	mov	r0, sp
 80014da:	f104 0310 	add.w	r3, r4, #16
 80014de:	2244      	movs	r2, #68	@ 0x44
 80014e0:	4619      	mov	r1, r3
 80014e2:	f004 ff8b 	bl	80063fc <memcpy>
 80014e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ea:	eeb0 0a48 	vmov.f32	s0, s16
 80014ee:	f7ff fe1d 	bl	800112c <updateTimerPeriod>

		tn = (__HAL_TIM_GetCounter(&htim5)*pow(10,-6) - t0);
 80014f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001670 <turn3Wheel+0x480>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ffaf 	bl	800045c <__aeabi_ui2d>
 80014fe:	a356      	add	r3, pc, #344	@ (adr r3, 8001658 <turn3Wheel+0x468>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f824 	bl	8000550 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	6938      	ldr	r0, [r7, #16]
 8001512:	f7fe ffc5 	bl	80004a0 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe fe5f 	bl	80001e0 <__aeabi_dsub>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fae9 	bl	8000b00 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	617b      	str	r3, [r7, #20]
		deltaTn = tn - tn_1;
 8001532:	ed97 7a05 	vldr	s14, [r7, #20]
 8001536:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153e:	edc7 7a06 	vstr	s15, [r7, #24]
		tn_1 = tn;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	637b      	str	r3, [r7, #52]	@ 0x34
		radianAchieve += speedTiik * deltaTn;
 8001546:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800154a:	edd7 7a06 	vldr	s15, [r7, #24]
 800154e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001552:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

		if (radianAchieve > radianToAchieve || urgencyRadian > urgencyRamp){
 800155e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001562:	edd7 7a08 	vldr	s15, [r7, #32]
 8001566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	dc08      	bgt.n	8001582 <turn3Wheel+0x392>
 8001570:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001574:	edd7 7a03 	vldr	s15, [r7, #12]
 8001578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	dd01      	ble.n	8001586 <turn3Wheel+0x396>
			task = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		calculPosition2(radianAchieve,way);
 8001586:	edd7 0a13 	vldr	s1, [r7, #76]	@ 0x4c
 800158a:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 800158e:	f7ff fd89 	bl	80010a4 <calculPosition2>

		if (stop){
 8001592:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <turn3Wheel+0x484>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <turn3Wheel+0x3c2>
			urgencyRadian += speedTiik * deltaTn;
 800159a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800159e:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		}

		HAL_Delay(deltaT);
 80015b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80015b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ba:	ee17 0a90 	vmov	r0, s15
 80015be:	f001 fb43 	bl	8002c48 <HAL_Delay>
	while(task){
 80015c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f47f aec4 	bne.w	8001352 <turn3Wheel+0x162>
	}

	TiikPosition.x = TiikTemporaryPosition.x;
 80015ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <turn3Wheel+0x488>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2b      	ldr	r2, [pc, #172]	@ (800167c <turn3Wheel+0x48c>)
 80015d0:	6013      	str	r3, [r2, #0]
	TiikPosition.y = TiikTemporaryPosition.y;
 80015d2:	4b29      	ldr	r3, [pc, #164]	@ (8001678 <turn3Wheel+0x488>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4a29      	ldr	r2, [pc, #164]	@ (800167c <turn3Wheel+0x48c>)
 80015d8:	6053      	str	r3, [r2, #4]
	TiikPosition.angle = TiikTemporaryPosition.angle;
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <turn3Wheel+0x488>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	4a27      	ldr	r2, [pc, #156]	@ (800167c <turn3Wheel+0x48c>)
 80015e0:	6093      	str	r3, [r2, #8]

	updateTimerPeriod(motorN,0);
 80015e2:	4c20      	ldr	r4, [pc, #128]	@ (8001664 <turn3Wheel+0x474>)
 80015e4:	4668      	mov	r0, sp
 80015e6:	f104 0310 	add.w	r3, r4, #16
 80015ea:	2244      	movs	r2, #68	@ 0x44
 80015ec:	4619      	mov	r1, r3
 80015ee:	f004 ff05 	bl	80063fc <memcpy>
 80015f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015f6:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001680 <turn3Wheel+0x490>
 80015fa:	f7ff fd97 	bl	800112c <updateTimerPeriod>
	updateTimerPeriod(motorSE,0);
 80015fe:	4c1a      	ldr	r4, [pc, #104]	@ (8001668 <turn3Wheel+0x478>)
 8001600:	4668      	mov	r0, sp
 8001602:	f104 0310 	add.w	r3, r4, #16
 8001606:	2244      	movs	r2, #68	@ 0x44
 8001608:	4619      	mov	r1, r3
 800160a:	f004 fef7 	bl	80063fc <memcpy>
 800160e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001612:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001680 <turn3Wheel+0x490>
 8001616:	f7ff fd89 	bl	800112c <updateTimerPeriod>
	updateTimerPeriod(motorSO,0);
 800161a:	4c14      	ldr	r4, [pc, #80]	@ (800166c <turn3Wheel+0x47c>)
 800161c:	4668      	mov	r0, sp
 800161e:	f104 0310 	add.w	r3, r4, #16
 8001622:	2244      	movs	r2, #68	@ 0x44
 8001624:	4619      	mov	r1, r3
 8001626:	f004 fee9 	bl	80063fc <memcpy>
 800162a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800162e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001680 <turn3Wheel+0x490>
 8001632:	f7ff fd7b 	bl	800112c <updateTimerPeriod>

	HAL_Delay(deltaT);
 8001636:	edd7 7a07 	vldr	s15, [r7, #28]
 800163a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800163e:	ee17 0a90 	vmov	r0, s15
 8001642:	f001 fb01 	bl	8002c48 <HAL_Delay>

}
 8001646:	bf00      	nop
 8001648:	3750      	adds	r7, #80	@ 0x50
 800164a:	46bd      	mov	sp, r7
 800164c:	ecbd 8b02 	vpop	{d8}
 8001650:	bdb0      	pop	{r4, r5, r7, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	a0b5ed8d 	.word	0xa0b5ed8d
 800165c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001660:	20000458 	.word	0x20000458
 8001664:	20000308 	.word	0x20000308
 8001668:	2000035c 	.word	0x2000035c
 800166c:	200003b0 	.word	0x200003b0
 8001670:	200001f4 	.word	0x200001f4
 8001674:	2000047d 	.word	0x2000047d
 8001678:	2000046c 	.word	0x2000046c
 800167c:	2000045c 	.word	0x2000045c
	...

08001688 <moveForward3Wheel>:

void moveForward3Wheel(float speed, float angle, float distance){
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b0aa      	sub	sp, #168	@ 0xa8
 800168c:	af12      	add	r7, sp, #72	@ 0x48
 800168e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001692:	edc7 0a02 	vstr	s1, [r7, #8]
 8001696:	ed87 1a01 	vstr	s2, [r7, #4]


	float speedTiik = 10;
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <moveForward3Wheel+0x1b0>)
 800169c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	float distanceAchieve = 0.0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	65bb      	str	r3, [r7, #88]	@ 0x58
	float distanceToAchieve = distance;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	647b      	str	r3, [r7, #68]	@ 0x44

	int task = 1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	657b      	str	r3, [r7, #84]	@ 0x54

	float rampDistance = 100;
 80016ac:	4b63      	ldr	r3, [pc, #396]	@ (800183c <moveForward3Wheel+0x1b4>)
 80016ae:	653b      	str	r3, [r7, #80]	@ 0x50

	if (distanceToAchieve < 2*rampDistance){
 80016b0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80016b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016b8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80016bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	d507      	bpl.n	80016d6 <moveForward3Wheel+0x4e>
		rampDistance = distanceToAchieve/2;
 80016c6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80016ca:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80016ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	}

	float deltaT = 30;
 80016d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001840 <moveForward3Wheel+0x1b8>)
 80016d8:	643b      	str	r3, [r7, #64]	@ 0x40

	float deltaTn = 0.0;
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float tn = 0.0;
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	float tn_1 = 0.0;
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float t0 = __HAL_TIM_GetCounter(&htim5)*pow(10,-6);
 80016ec:	4b55      	ldr	r3, [pc, #340]	@ (8001844 <moveForward3Wheel+0x1bc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe feb2 	bl	800045c <__aeabi_ui2d>
 80016f8:	a34d      	add	r3, pc, #308	@ (adr r3, 8001830 <moveForward3Wheel+0x1a8>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe ff27 	bl	8000550 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff f9f9 	bl	8000b00 <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34

	stop = 0;
 8001712:	4b4d      	ldr	r3, [pc, #308]	@ (8001848 <moveForward3Wheel+0x1c0>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]

	float urgencyRamp = 50;
 8001718:	4b4c      	ldr	r3, [pc, #304]	@ (800184c <moveForward3Wheel+0x1c4>)
 800171a:	633b      	str	r3, [r7, #48]	@ 0x30
	float urgencyDistance  = 0;
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	64bb      	str	r3, [r7, #72]	@ 0x48

	float maxSpeed = speed;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	62fb      	str	r3, [r7, #44]	@ 0x2c

	float cosTheta = cos(angle);
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f7fe feba 	bl	80004a0 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	ec43 2b10 	vmov	d0, r2, r3
 8001734:	f005 f8a4 	bl	8006880 <cos>
 8001738:	ec53 2b10 	vmov	r2, r3, d0
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff f9de 	bl	8000b00 <__aeabi_d2f>
 8001744:	4603      	mov	r3, r0
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
	float sinTheta = sin(angle);
 8001748:	68b8      	ldr	r0, [r7, #8]
 800174a:	f7fe fea9 	bl	80004a0 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	ec43 2b10 	vmov	d0, r2, r3
 8001756:	f005 f8ef 	bl	8006938 <sin>
 800175a:	ec53 2b10 	vmov	r2, r3, d0
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9cd 	bl	8000b00 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24

	while(task){
 800176a:	e175      	b.n	8001a58 <moveForward3Wheel+0x3d0>

		if (stop){
 800176c:	4b36      	ldr	r3, [pc, #216]	@ (8001848 <moveForward3Wheel+0x1c0>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d014      	beq.n	800179e <moveForward3Wheel+0x116>
			speedTiik = maxSpeed  - ((maxSpeed -10)*urgencyDistance/urgencyRamp);
 8001774:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001778:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800177c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001780:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001784:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001788:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800178c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001790:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001798:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 800179c:	e05a      	b.n	8001854 <moveForward3Wheel+0x1cc>
		} else if (distanceAchieve < rampDistance) {
 800179e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80017a2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80017a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	d514      	bpl.n	80017da <moveForward3Wheel+0x152>
		    speedTiik = ((maxSpeed - 10)*distanceAchieve/rampDistance) + 10;
 80017b0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017b4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80017b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017bc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017c4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80017c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017cc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80017d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 80017d8:	e03c      	b.n	8001854 <moveForward3Wheel+0x1cc>
		} else if (distanceToAchieve - distanceAchieve < rampDistance){
 80017da:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80017de:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80017ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	dd2d      	ble.n	8001850 <moveForward3Wheel+0x1c8>
			speedTiik = maxSpeed - ((speed-10)*(distanceAchieve-distanceToAchieve + rampDistance)/rampDistance);
 80017f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80017fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001800:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001804:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001808:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800180c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001814:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001818:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800181c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001820:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 800182c:	e012      	b.n	8001854 <moveForward3Wheel+0x1cc>
 800182e:	bf00      	nop
 8001830:	a0b5ed8d 	.word	0xa0b5ed8d
 8001834:	3eb0c6f7 	.word	0x3eb0c6f7
 8001838:	41200000 	.word	0x41200000
 800183c:	42c80000 	.word	0x42c80000
 8001840:	41f00000 	.word	0x41f00000
 8001844:	200001f4 	.word	0x200001f4
 8001848:	2000047d 	.word	0x2000047d
 800184c:	42480000 	.word	0x42480000
		} else {
			speedTiik = maxSpeed;
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		float sqrt3 = sqrt(3);
 8001854:	4ba6      	ldr	r3, [pc, #664]	@ (8001af0 <moveForward3Wheel+0x468>)
 8001856:	623b      	str	r3, [r7, #32]
		float speedN = speedTiik*cosTheta;
 8001858:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800185c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001864:	edc7 7a07 	vstr	s15, [r7, #28]
		float speedSE = ( speedTiik*((-cosTheta/2)-(sqrt3*sinTheta/2)));
 8001868:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800186c:	eef1 7a67 	vneg.f32	s15, s15
 8001870:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001874:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001878:	edd7 6a08 	vldr	s13, [r7, #32]
 800187c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001880:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001884:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001888:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800188c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001890:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001898:	edc7 7a06 	vstr	s15, [r7, #24]
		float speedSO = ( speedTiik*((-cosTheta/2)+(sqrt3*sinTheta/2)));
 800189c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018a0:	eef1 7a67 	vneg.f32	s15, s15
 80018a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018ac:	edd7 6a08 	vldr	s13, [r7, #32]
 80018b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80018b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018b8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80018bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a05 	vstr	s15, [r7, #20]

		updateTimerPeriod(motorN,speedN);
 80018d0:	4c88      	ldr	r4, [pc, #544]	@ (8001af4 <moveForward3Wheel+0x46c>)
 80018d2:	4668      	mov	r0, sp
 80018d4:	f104 0310 	add.w	r3, r4, #16
 80018d8:	2244      	movs	r2, #68	@ 0x44
 80018da:	4619      	mov	r1, r3
 80018dc:	f004 fd8e 	bl	80063fc <memcpy>
 80018e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018e4:	ed97 0a07 	vldr	s0, [r7, #28]
 80018e8:	f7ff fc20 	bl	800112c <updateTimerPeriod>
		updateTimerPeriod(motorSE,speedSE);
 80018ec:	4c82      	ldr	r4, [pc, #520]	@ (8001af8 <moveForward3Wheel+0x470>)
 80018ee:	4668      	mov	r0, sp
 80018f0:	f104 0310 	add.w	r3, r4, #16
 80018f4:	2244      	movs	r2, #68	@ 0x44
 80018f6:	4619      	mov	r1, r3
 80018f8:	f004 fd80 	bl	80063fc <memcpy>
 80018fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001900:	ed97 0a06 	vldr	s0, [r7, #24]
 8001904:	f7ff fc12 	bl	800112c <updateTimerPeriod>
		updateTimerPeriod(motorSO,speedSO);
 8001908:	4c7c      	ldr	r4, [pc, #496]	@ (8001afc <moveForward3Wheel+0x474>)
 800190a:	4668      	mov	r0, sp
 800190c:	f104 0310 	add.w	r3, r4, #16
 8001910:	2244      	movs	r2, #68	@ 0x44
 8001912:	4619      	mov	r1, r3
 8001914:	f004 fd72 	bl	80063fc <memcpy>
 8001918:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800191c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001920:	f7ff fc04 	bl	800112c <updateTimerPeriod>

		tn = (__HAL_TIM_GetCounter(&htim5)*pow(10,-6) - t0);
 8001924:	4b76      	ldr	r3, [pc, #472]	@ (8001b00 <moveForward3Wheel+0x478>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fd96 	bl	800045c <__aeabi_ui2d>
 8001930:	a36d      	add	r3, pc, #436	@ (adr r3, 8001ae8 <moveForward3Wheel+0x460>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fe0b 	bl	8000550 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4614      	mov	r4, r2
 8001940:	461d      	mov	r5, r3
 8001942:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001944:	f7fe fdac 	bl	80004a0 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fc46 	bl	80001e0 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8d0 	bl	8000b00 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	63bb      	str	r3, [r7, #56]	@ 0x38
		deltaTn = tn - tn_1;
 8001964:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001968:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800196c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001970:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		tn_1 = tn;
 8001974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
		distanceAchieve += speedTiik * deltaTn;
 8001978:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800197c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001984:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

		if (distanceAchieve > distanceToAchieve || urgencyDistance > urgencyRamp){
 8001990:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001994:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	dc08      	bgt.n	80019b4 <moveForward3Wheel+0x32c>
 80019a2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80019a6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	dd01      	ble.n	80019b8 <moveForward3Wheel+0x330>
			task = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		calculPosition(distanceAchieve,cos(angle + TiikPosition.angle),cos(angle + TiikPosition.angle));
 80019b8:	4b52      	ldr	r3, [pc, #328]	@ (8001b04 <moveForward3Wheel+0x47c>)
 80019ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80019be:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	ee17 0a90 	vmov	r0, s15
 80019ca:	f7fe fd69 	bl	80004a0 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ec43 2b10 	vmov	d0, r2, r3
 80019d6:	f004 ff53 	bl	8006880 <cos>
 80019da:	ec53 2b10 	vmov	r2, r3, d0
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7ff f88d 	bl	8000b00 <__aeabi_d2f>
 80019e6:	4604      	mov	r4, r0
 80019e8:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <moveForward3Wheel+0x47c>)
 80019ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80019ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	ee17 0a90 	vmov	r0, s15
 80019fa:	f7fe fd51 	bl	80004a0 <__aeabi_f2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	ec43 2b10 	vmov	d0, r2, r3
 8001a06:	f004 ff3b 	bl	8006880 <cos>
 8001a0a:	ec53 2b10 	vmov	r2, r3, d0
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f875 	bl	8000b00 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	ee01 3a10 	vmov	s2, r3
 8001a1c:	ee00 4a90 	vmov	s1, r4
 8001a20:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8001a24:	f7ff faee 	bl	8001004 <calculPosition>

		if (stop){
 8001a28:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <moveForward3Wheel+0x480>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <moveForward3Wheel+0x3c0>
			urgencyDistance += speedTiik * deltaTn;
 8001a30:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001a34:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		}



		HAL_Delay(deltaT);
 8001a48:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a50:	ee17 0a90 	vmov	r0, s15
 8001a54:	f001 f8f8 	bl	8002c48 <HAL_Delay>
	while(task){
 8001a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f ae86 	bne.w	800176c <moveForward3Wheel+0xe4>
	}

	TiikPosition.x = TiikTemporaryPosition.x;
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <moveForward3Wheel+0x484>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a27      	ldr	r2, [pc, #156]	@ (8001b04 <moveForward3Wheel+0x47c>)
 8001a66:	6013      	str	r3, [r2, #0]
	TiikPosition.y = TiikTemporaryPosition.y;
 8001a68:	4b28      	ldr	r3, [pc, #160]	@ (8001b0c <moveForward3Wheel+0x484>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a25      	ldr	r2, [pc, #148]	@ (8001b04 <moveForward3Wheel+0x47c>)
 8001a6e:	6053      	str	r3, [r2, #4]
	TiikPosition.angle = TiikTemporaryPosition.angle;
 8001a70:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <moveForward3Wheel+0x484>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a23      	ldr	r2, [pc, #140]	@ (8001b04 <moveForward3Wheel+0x47c>)
 8001a76:	6093      	str	r3, [r2, #8]

	updateTimerPeriod(motorN,0);
 8001a78:	4c1e      	ldr	r4, [pc, #120]	@ (8001af4 <moveForward3Wheel+0x46c>)
 8001a7a:	4668      	mov	r0, sp
 8001a7c:	f104 0310 	add.w	r3, r4, #16
 8001a80:	2244      	movs	r2, #68	@ 0x44
 8001a82:	4619      	mov	r1, r3
 8001a84:	f004 fcba 	bl	80063fc <memcpy>
 8001a88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a8c:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001b10 <moveForward3Wheel+0x488>
 8001a90:	f7ff fb4c 	bl	800112c <updateTimerPeriod>
	updateTimerPeriod(motorSE,0);
 8001a94:	4c18      	ldr	r4, [pc, #96]	@ (8001af8 <moveForward3Wheel+0x470>)
 8001a96:	4668      	mov	r0, sp
 8001a98:	f104 0310 	add.w	r3, r4, #16
 8001a9c:	2244      	movs	r2, #68	@ 0x44
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f004 fcac 	bl	80063fc <memcpy>
 8001aa4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001aa8:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001b10 <moveForward3Wheel+0x488>
 8001aac:	f7ff fb3e 	bl	800112c <updateTimerPeriod>
	updateTimerPeriod(motorSO,0);
 8001ab0:	4c12      	ldr	r4, [pc, #72]	@ (8001afc <moveForward3Wheel+0x474>)
 8001ab2:	4668      	mov	r0, sp
 8001ab4:	f104 0310 	add.w	r3, r4, #16
 8001ab8:	2244      	movs	r2, #68	@ 0x44
 8001aba:	4619      	mov	r1, r3
 8001abc:	f004 fc9e 	bl	80063fc <memcpy>
 8001ac0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ac4:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001b10 <moveForward3Wheel+0x488>
 8001ac8:	f7ff fb30 	bl	800112c <updateTimerPeriod>

	HAL_Delay(deltaT);
 8001acc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad4:	ee17 0a90 	vmov	r0, s15
 8001ad8:	f001 f8b6 	bl	8002c48 <HAL_Delay>

}
 8001adc:	bf00      	nop
 8001ade:	3760      	adds	r7, #96	@ 0x60
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	a0b5ed8d 	.word	0xa0b5ed8d
 8001aec:	3eb0c6f7 	.word	0x3eb0c6f7
 8001af0:	3fddb3d7 	.word	0x3fddb3d7
 8001af4:	20000308 	.word	0x20000308
 8001af8:	2000035c 	.word	0x2000035c
 8001afc:	200003b0 	.word	0x200003b0
 8001b00:	200001f4 	.word	0x200001f4
 8001b04:	2000045c 	.word	0x2000045c
 8001b08:	2000047d 	.word	0x2000047d
 8001b0c:	2000046c 	.word	0x2000046c
 8001b10:	00000000 	.word	0x00000000

08001b14 <initPosition>:


void initPosition(){
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  TiikPosition.x = 0.0;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <initPosition+0x28>)
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
  TiikPosition.y = 0.0;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <initPosition+0x28>)
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  TiikPosition.angle = 0.0;
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <initPosition+0x28>)
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	2000045c 	.word	0x2000045c

08001b40 <treatData>:

void treatData(){
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

	uint32_t position_X = (rxBuffer[0] << 24) + (rxBuffer[1] << 16) + (rxBuffer[2] << 8) + (rxBuffer[3]);
 8001b46:	4b78      	ldr	r3, [pc, #480]	@ (8001d28 <treatData+0x1e8>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	061a      	lsls	r2, r3, #24
 8001b4c:	4b76      	ldr	r3, [pc, #472]	@ (8001d28 <treatData+0x1e8>)
 8001b4e:	785b      	ldrb	r3, [r3, #1]
 8001b50:	041b      	lsls	r3, r3, #16
 8001b52:	441a      	add	r2, r3
 8001b54:	4b74      	ldr	r3, [pc, #464]	@ (8001d28 <treatData+0x1e8>)
 8001b56:	789b      	ldrb	r3, [r3, #2]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a72      	ldr	r2, [pc, #456]	@ (8001d28 <treatData+0x1e8>)
 8001b5e:	78d2      	ldrb	r2, [r2, #3]
 8001b60:	4413      	add	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
	uint32_t position_Y = (rxBuffer[4] << 24) + (rxBuffer[5] << 16) + (rxBuffer[6] << 8) + (rxBuffer[7]);
 8001b64:	4b70      	ldr	r3, [pc, #448]	@ (8001d28 <treatData+0x1e8>)
 8001b66:	791b      	ldrb	r3, [r3, #4]
 8001b68:	061a      	lsls	r2, r3, #24
 8001b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001d28 <treatData+0x1e8>)
 8001b6c:	795b      	ldrb	r3, [r3, #5]
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	441a      	add	r2, r3
 8001b72:	4b6d      	ldr	r3, [pc, #436]	@ (8001d28 <treatData+0x1e8>)
 8001b74:	799b      	ldrb	r3, [r3, #6]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8001d28 <treatData+0x1e8>)
 8001b7c:	79d2      	ldrb	r2, [r2, #7]
 8001b7e:	4413      	add	r3, r2
 8001b80:	607b      	str	r3, [r7, #4]
	uint32_t position_angle = (rxBuffer[8] << 24) + (rxBuffer[9] << 16) + (rxBuffer[10] << 8) + (rxBuffer[11]);
 8001b82:	4b69      	ldr	r3, [pc, #420]	@ (8001d28 <treatData+0x1e8>)
 8001b84:	7a1b      	ldrb	r3, [r3, #8]
 8001b86:	061a      	lsls	r2, r3, #24
 8001b88:	4b67      	ldr	r3, [pc, #412]	@ (8001d28 <treatData+0x1e8>)
 8001b8a:	7a5b      	ldrb	r3, [r3, #9]
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	441a      	add	r2, r3
 8001b90:	4b65      	ldr	r3, [pc, #404]	@ (8001d28 <treatData+0x1e8>)
 8001b92:	7a9b      	ldrb	r3, [r3, #10]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	4413      	add	r3, r2
 8001b98:	4a63      	ldr	r2, [pc, #396]	@ (8001d28 <treatData+0x1e8>)
 8001b9a:	7ad2      	ldrb	r2, [r2, #11]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	603b      	str	r3, [r7, #0]

	float position_X_to_use = *((float*) &position_X);
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	61fb      	str	r3, [r7, #28]
	float position_Y_to_use = *((float*) &position_Y);
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
	float position_angle_to_use = *((float*) &position_angle);
 8001bae:	463b      	mov	r3, r7
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	617b      	str	r3, [r7, #20]

	if ((position_angle_to_use == 0xffffffff ) && (stop != 0)){
 8001bb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001d2c <treatData+0x1ec>
 8001bbc:	eef4 7a47 	vcmp.f32	s15, s14
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d110      	bne.n	8001be8 <treatData+0xa8>
 8001bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d30 <treatData+0x1f0>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00c      	beq.n	8001be8 <treatData+0xa8>
		turn3Wheel(100,position_angle_to_use - TiikPosition.angle);
 8001bce:	4b59      	ldr	r3, [pc, #356]	@ (8001d34 <treatData+0x1f4>)
 8001bd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bdc:	eef0 0a67 	vmov.f32	s1, s15
 8001be0:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8001d38 <treatData+0x1f8>
 8001be4:	f7ff fb04 	bl	80011f0 <turn3Wheel>
	}

	if (((position_X_to_use == 0xffffffff) || (position_Y_to_use == 0xfffffff)) && (stop != 0)){
 8001be8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bec:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001d2c <treatData+0x1ec>
 8001bf0:	eef4 7a47 	vcmp.f32	s15, s14
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	d008      	beq.n	8001c0c <treatData+0xcc>
 8001bfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfe:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001d3c <treatData+0x1fc>
 8001c02:	eef4 7a47 	vcmp.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d176      	bne.n	8001cfa <treatData+0x1ba>
 8001c0c:	4b48      	ldr	r3, [pc, #288]	@ (8001d30 <treatData+0x1f0>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d072      	beq.n	8001cfa <treatData+0x1ba>
		float distance = sqrt(pow(position_X_to_use - TiikPosition.x ,2)+pow(position_Y_to_use - TiikPosition.y ,2));
 8001c14:	4b47      	ldr	r3, [pc, #284]	@ (8001d34 <treatData+0x1f4>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f7fe fc3b 	bl	80004a0 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001d20 <treatData+0x1e0>
 8001c32:	ec43 2b10 	vmov	d0, r2, r3
 8001c36:	f004 fbef 	bl	8006418 <pow>
 8001c3a:	ec55 4b10 	vmov	r4, r5, d0
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d34 <treatData+0x1f4>)
 8001c40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c44:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4c:	ee17 0a90 	vmov	r0, s15
 8001c50:	f7fe fc26 	bl	80004a0 <__aeabi_f2d>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	ed9f 1b31 	vldr	d1, [pc, #196]	@ 8001d20 <treatData+0x1e0>
 8001c5c:	ec43 2b10 	vmov	d0, r2, r3
 8001c60:	f004 fbda 	bl	8006418 <pow>
 8001c64:	ec53 2b10 	vmov	r2, r3, d0
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe faba 	bl	80001e4 <__adddf3>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	ec43 2b17 	vmov	d7, r2, r3
 8001c78:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7c:	eef0 0a67 	vmov.f32	s1, s15
 8001c80:	f004 fc3a 	bl	80064f8 <sqrt>
 8001c84:	ec53 2b10 	vmov	r2, r3, d0
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f7fe ff38 	bl	8000b00 <__aeabi_d2f>
 8001c90:	4603      	mov	r3, r0
 8001c92:	613b      	str	r3, [r7, #16]
		float angle = atan(position_Y_to_use - TiikPosition.y / position_X_to_use - TiikPosition.x);
 8001c94:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <treatData+0x1f4>)
 8001c96:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ca6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <treatData+0x1f4>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb4:	ee17 0a90 	vmov	r0, s15
 8001cb8:	f7fe fbf2 	bl	80004a0 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	ec43 2b10 	vmov	d0, r2, r3
 8001cc4:	f004 fc44 	bl	8006550 <atan>
 8001cc8:	ec53 2b10 	vmov	r2, r3, d0
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff16 	bl	8000b00 <__aeabi_d2f>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60fb      	str	r3, [r7, #12]
		angle = angle - TiikPosition.angle;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <treatData+0x1f4>)
 8001cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cde:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce6:	edc7 7a03 	vstr	s15, [r7, #12]
		moveForward3Wheel(300,distance,angle);
 8001cea:	ed97 1a03 	vldr	s2, [r7, #12]
 8001cee:	edd7 0a04 	vldr	s1, [r7, #16]
 8001cf2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001d40 <treatData+0x200>
 8001cf6:	f7ff fcc7 	bl	8001688 <moveForward3Wheel>
	}

	robotState = 0x00;
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <treatData+0x204>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
	txBuffer[0] = robotState;
 8001d00:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <treatData+0x204>)
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <treatData+0x208>)
 8001d06:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, txBuffer, 13, HAL_MAX_DELAY);
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	220d      	movs	r2, #13
 8001d0e:	490e      	ldr	r1, [pc, #56]	@ (8001d48 <treatData+0x208>)
 8001d10:	480e      	ldr	r0, [pc, #56]	@ (8001d4c <treatData+0x20c>)
 8001d12:	f003 fb3b 	bl	800538c <HAL_UART_Transmit>
}
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40000000 	.word	0x40000000
 8001d28:	200002e4 	.word	0x200002e4
 8001d2c:	4f800000 	.word	0x4f800000
 8001d30:	2000047d 	.word	0x2000047d
 8001d34:	2000045c 	.word	0x2000045c
 8001d38:	42c80000 	.word	0x42c80000
 8001d3c:	4d800000 	.word	0x4d800000
 8001d40:	43960000 	.word	0x43960000
 8001d44:	2000047c 	.word	0x2000047c
 8001d48:	200002e8 	.word	0x200002e8
 8001d4c:	2000023c 	.word	0x2000023c

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d54:	f000 ff06 	bl	8002b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d58:	f000 f876 	bl	8001e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5c:	f000 fbe8 	bl	8002530 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d60:	f000 fb9a 	bl	8002498 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d64:	f000 fb6e 	bl	8002444 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001d68:	f000 f920 	bl	8001fac <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d6c:	f000 f9be 	bl	80020ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d70:	f000 fa08 	bl	8002184 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d74:	f000 fa7c 	bl	8002270 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d78:	f000 faf0 	bl	800235c <MX_TIM5_Init>
  MX_ADC1_Init();
 8001d7c:	f000 f8c4 	bl	8001f08 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d86:	4824      	ldr	r0, [pc, #144]	@ (8001e18 <main+0xc8>)
 8001d88:	f001 fe6c 	bl	8003a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2180      	movs	r1, #128	@ 0x80
 8001d90:	4822      	ldr	r0, [pc, #136]	@ (8001e1c <main+0xcc>)
 8001d92:	f001 fe67 	bl	8003a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	2180      	movs	r1, #128	@ 0x80
 8001d9a:	481f      	ldr	r0, [pc, #124]	@ (8001e18 <main+0xc8>)
 8001d9c:	f001 fe62 	bl	8003a64 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001da0:	2100      	movs	r1, #0
 8001da2:	481f      	ldr	r0, [pc, #124]	@ (8001e20 <main+0xd0>)
 8001da4:	f002 fc74 	bl	8004690 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001da8:	2100      	movs	r1, #0
 8001daa:	481e      	ldr	r0, [pc, #120]	@ (8001e24 <main+0xd4>)
 8001dac:	f002 fc70 	bl	8004690 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001db0:	2100      	movs	r1, #0
 8001db2:	481d      	ldr	r0, [pc, #116]	@ (8001e28 <main+0xd8>)
 8001db4:	f002 fc6c 	bl	8004690 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001db8:	2104      	movs	r1, #4
 8001dba:	481c      	ldr	r0, [pc, #112]	@ (8001e2c <main+0xdc>)
 8001dbc:	f002 fc68 	bl	8004690 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8001dc0:	481b      	ldr	r0, [pc, #108]	@ (8001e30 <main+0xe0>)
 8001dc2:	f002 fb51 	bl	8004468 <HAL_TIM_Base_Start_IT>

  initMotors();
 8001dc6:	f7ff f863 	bl	8000e90 <initMotors>

  robotState = 0x00;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <main+0xe4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
  txBuffer[0] = robotState;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <main+0xe4>)
 8001dd2:	781a      	ldrb	r2, [r3, #0]
 8001dd4:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <main+0xe8>)
 8001dd6:	701a      	strb	r2, [r3, #0]

  initPosition(0.0,0.0,0.0);
 8001dd8:	ed9f 2b0d 	vldr	d2, [pc, #52]	@ 8001e10 <main+0xc0>
 8001ddc:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8001e10 <main+0xc0>
 8001de0:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8001e10 <main+0xc0>
 8001de4:	f7ff fe96 	bl	8001b14 <initPosition>
  setPosition();
 8001de8:	f7ff f8e4 	bl	8000fb4 <setPosition>
  dataArrived = 0;
 8001dec:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <main+0xec>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, rxBufferData, 13);
 8001df2:	220d      	movs	r2, #13
 8001df4:	4912      	ldr	r1, [pc, #72]	@ (8001e40 <main+0xf0>)
 8001df6:	4813      	ldr	r0, [pc, #76]	@ (8001e44 <main+0xf4>)
 8001df8:	f003 fb53 	bl	80054a2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dataArrived){
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <main+0xec>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0fb      	beq.n	8001dfc <main+0xac>
		  treatData();
 8001e04:	f7ff fe9c 	bl	8001b40 <treatData>
	  if (dataArrived){
 8001e08:	e7f8      	b.n	8001dfc <main+0xac>
 8001e0a:	bf00      	nop
 8001e0c:	f3af 8000 	nop.w
	...
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	200000d4 	.word	0x200000d4
 8001e24:	2000011c 	.word	0x2000011c
 8001e28:	20000164 	.word	0x20000164
 8001e2c:	200001ac 	.word	0x200001ac
 8001e30:	200001f4 	.word	0x200001f4
 8001e34:	2000047c 	.word	0x2000047c
 8001e38:	200002e8 	.word	0x200002e8
 8001e3c:	2000047e 	.word	0x2000047e
 8001e40:	200002f8 	.word	0x200002f8
 8001e44:	2000023c 	.word	0x2000023c

08001e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b094      	sub	sp, #80	@ 0x50
 8001e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2230      	movs	r2, #48	@ 0x30
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 fa9e 	bl	8006398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <SystemClock_Config+0xb8>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <SystemClock_Config+0xb8>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7c:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <SystemClock_Config+0xb8>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <SystemClock_Config+0xbc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e94:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <SystemClock_Config+0xbc>)
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <SystemClock_Config+0xbc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eac:	2301      	movs	r3, #1
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb0:	2310      	movs	r3, #16
 8001eb2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fdeb 	bl	8003a98 <HAL_RCC_OscConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ec8:	f000 fc04 	bl	80026d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	230f      	movs	r3, #15
 8001ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 f84d 	bl	8003f88 <HAL_RCC_ClockConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001ef4:	f000 fbee 	bl	80026d4 <Error_Handler>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3750      	adds	r7, #80	@ 0x50
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000

08001f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f1a:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f1c:	4a21      	ldr	r2, [pc, #132]	@ (8001fa4 <MX_ADC1_Init+0x9c>)
 8001f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f32:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f40:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f48:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <MX_ADC1_Init+0xa0>)
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f52:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f66:	480e      	ldr	r0, [pc, #56]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f68:	f000 fe92 	bl	8002c90 <HAL_ADC_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f72:	f000 fbaf 	bl	80026d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f82:	463b      	mov	r3, r7
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	@ (8001fa0 <MX_ADC1_Init+0x98>)
 8001f88:	f000 fec6 	bl	8002d18 <HAL_ADC_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f92:	f000 fb9f 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000008c 	.word	0x2000008c
 8001fa4:	40012000 	.word	0x40012000
 8001fa8:	0f000001 	.word	0x0f000001

08001fac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b096      	sub	sp, #88	@ 0x58
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	611a      	str	r2, [r3, #16]
 8001fda:	615a      	str	r2, [r3, #20]
 8001fdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 f9d7 	bl	8006398 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fea:	4b3e      	ldr	r3, [pc, #248]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8001fec:	4a3e      	ldr	r2, [pc, #248]	@ (80020e8 <MX_TIM1_Init+0x13c>)
 8001fee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000;
 8001ffc:	4b39      	ldr	r3, [pc, #228]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8001ffe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002002:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002004:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800200a:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <MX_TIM1_Init+0x138>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002016:	4833      	ldr	r0, [pc, #204]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8002018:	f002 f9d6 	bl	80043c8 <HAL_TIM_Base_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002022:	f000 fb57 	bl	80026d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800202a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800202c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002030:	4619      	mov	r1, r3
 8002032:	482c      	ldr	r0, [pc, #176]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8002034:	f002 fcfa 	bl	8004a2c <HAL_TIM_ConfigClockSource>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800203e:	f000 fb49 	bl	80026d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002042:	4828      	ldr	r0, [pc, #160]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8002044:	f002 facb 	bl	80045de <HAL_TIM_PWM_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800204e:	f000 fb41 	bl	80026d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800205a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800205e:	4619      	mov	r1, r3
 8002060:	4820      	ldr	r0, [pc, #128]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8002062:	f003 f883 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800206c:	f000 fb32 	bl	80026d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002070:	2360      	movs	r3, #96	@ 0x60
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1;
 8002074:	2301      	movs	r3, #1
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800208c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002090:	2200      	movs	r2, #0
 8002092:	4619      	mov	r1, r3
 8002094:	4813      	ldr	r0, [pc, #76]	@ (80020e4 <MX_TIM1_Init+0x138>)
 8002096:	f002 fc07 	bl	80048a8 <HAL_TIM_PWM_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80020a0:	f000 fb18 	bl	80026d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <MX_TIM1_Init+0x138>)
 80020c8:	f003 f8be 	bl	8005248 <HAL_TIMEx_ConfigBreakDeadTime>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80020d2:	f000 faff 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020d6:	4803      	ldr	r0, [pc, #12]	@ (80020e4 <MX_TIM1_Init+0x138>)
 80020d8:	f000 fbe6 	bl	80028a8 <HAL_TIM_MspPostInit>

}
 80020dc:	bf00      	nop
 80020de:	3758      	adds	r7, #88	@ 0x58
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200000d4 	.word	0x200000d4
 80020e8:	40010000 	.word	0x40010000

080020ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	463b      	mov	r3, r7
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002108:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <MX_TIM2_Init+0x94>)
 800210a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800210e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002110:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <MX_TIM2_Init+0x94>)
 8002112:	220f      	movs	r2, #15
 8002114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <MX_TIM2_Init+0x94>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 800211c:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <MX_TIM2_Init+0x94>)
 800211e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002122:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <MX_TIM2_Init+0x94>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <MX_TIM2_Init+0x94>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002130:	4813      	ldr	r0, [pc, #76]	@ (8002180 <MX_TIM2_Init+0x94>)
 8002132:	f002 f949 	bl	80043c8 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800213c:	f000 faca 	bl	80026d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	@ (8002180 <MX_TIM2_Init+0x94>)
 800214e:	f002 fc6d 	bl	8004a2c <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002158:	f000 fabc 	bl	80026d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	@ (8002180 <MX_TIM2_Init+0x94>)
 800216a:	f002 ffff 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002174:	f000 faae 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000011c 	.word	0x2000011c

08002184 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	@ 0x38
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	f107 0320 	add.w	r3, r7, #32
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
 80021b0:	615a      	str	r2, [r3, #20]
 80021b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002268 <MX_TIM3_Init+0xe4>)
 80021b6:	4a2d      	ldr	r2, [pc, #180]	@ (800226c <MX_TIM3_Init+0xe8>)
 80021b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80021ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002268 <MX_TIM3_Init+0xe4>)
 80021bc:	220f      	movs	r2, #15
 80021be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c0:	4b29      	ldr	r3, [pc, #164]	@ (8002268 <MX_TIM3_Init+0xe4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000;
 80021c6:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <MX_TIM3_Init+0xe4>)
 80021c8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80021cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ce:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <MX_TIM3_Init+0xe4>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d4:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <MX_TIM3_Init+0xe4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021da:	4823      	ldr	r0, [pc, #140]	@ (8002268 <MX_TIM3_Init+0xe4>)
 80021dc:	f002 f8f4 	bl	80043c8 <HAL_TIM_Base_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80021e6:	f000 fa75 	bl	80026d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021f4:	4619      	mov	r1, r3
 80021f6:	481c      	ldr	r0, [pc, #112]	@ (8002268 <MX_TIM3_Init+0xe4>)
 80021f8:	f002 fc18 	bl	8004a2c <HAL_TIM_ConfigClockSource>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002202:	f000 fa67 	bl	80026d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002206:	4818      	ldr	r0, [pc, #96]	@ (8002268 <MX_TIM3_Init+0xe4>)
 8002208:	f002 f9e9 	bl	80045de <HAL_TIM_PWM_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002212:	f000 fa5f 	bl	80026d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800221e:	f107 0320 	add.w	r3, r7, #32
 8002222:	4619      	mov	r1, r3
 8002224:	4810      	ldr	r0, [pc, #64]	@ (8002268 <MX_TIM3_Init+0xe4>)
 8002226:	f002 ffa1 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002230:	f000 fa50 	bl	80026d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002234:	2360      	movs	r3, #96	@ 0x60
 8002236:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	4619      	mov	r1, r3
 800224a:	4807      	ldr	r0, [pc, #28]	@ (8002268 <MX_TIM3_Init+0xe4>)
 800224c:	f002 fb2c 	bl	80048a8 <HAL_TIM_PWM_ConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002256:	f000 fa3d 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800225a:	4803      	ldr	r0, [pc, #12]	@ (8002268 <MX_TIM3_Init+0xe4>)
 800225c:	f000 fb24 	bl	80028a8 <HAL_TIM_MspPostInit>

}
 8002260:	bf00      	nop
 8002262:	3738      	adds	r7, #56	@ 0x38
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000164 	.word	0x20000164
 800226c:	40000400 	.word	0x40000400

08002270 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08e      	sub	sp, #56	@ 0x38
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002284:	f107 0320 	add.w	r3, r7, #32
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <MX_TIM4_Init+0xe4>)
 80022a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002358 <MX_TIM4_Init+0xe8>)
 80022a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80022a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <MX_TIM4_Init+0xe4>)
 80022a8:	220f      	movs	r2, #15
 80022aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b29      	ldr	r3, [pc, #164]	@ (8002354 <MX_TIM4_Init+0xe4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 80022b2:	4b28      	ldr	r3, [pc, #160]	@ (8002354 <MX_TIM4_Init+0xe4>)
 80022b4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80022b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ba:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <MX_TIM4_Init+0xe4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c0:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <MX_TIM4_Init+0xe4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022c6:	4823      	ldr	r0, [pc, #140]	@ (8002354 <MX_TIM4_Init+0xe4>)
 80022c8:	f002 f87e 	bl	80043c8 <HAL_TIM_Base_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80022d2:	f000 f9ff 	bl	80026d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022e0:	4619      	mov	r1, r3
 80022e2:	481c      	ldr	r0, [pc, #112]	@ (8002354 <MX_TIM4_Init+0xe4>)
 80022e4:	f002 fba2 	bl	8004a2c <HAL_TIM_ConfigClockSource>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80022ee:	f000 f9f1 	bl	80026d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022f2:	4818      	ldr	r0, [pc, #96]	@ (8002354 <MX_TIM4_Init+0xe4>)
 80022f4:	f002 f973 	bl	80045de <HAL_TIM_PWM_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80022fe:	f000 f9e9 	bl	80026d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800230a:	f107 0320 	add.w	r3, r7, #32
 800230e:	4619      	mov	r1, r3
 8002310:	4810      	ldr	r0, [pc, #64]	@ (8002354 <MX_TIM4_Init+0xe4>)
 8002312:	f002 ff2b 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800231c:	f000 f9da 	bl	80026d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002320:	2360      	movs	r3, #96	@ 0x60
 8002322:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2204      	movs	r2, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4807      	ldr	r0, [pc, #28]	@ (8002354 <MX_TIM4_Init+0xe4>)
 8002338:	f002 fab6 	bl	80048a8 <HAL_TIM_PWM_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002342:	f000 f9c7 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002346:	4803      	ldr	r0, [pc, #12]	@ (8002354 <MX_TIM4_Init+0xe4>)
 8002348:	f000 faae 	bl	80028a8 <HAL_TIM_MspPostInit>

}
 800234c:	bf00      	nop
 800234e:	3738      	adds	r7, #56	@ 0x38
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200001ac 	.word	0x200001ac
 8002358:	40000800 	.word	0x40000800

0800235c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	@ 0x38
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002370:	f107 0320 	add.w	r3, r7, #32
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
 8002388:	615a      	str	r2, [r3, #20]
 800238a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800238c:	4b2b      	ldr	r3, [pc, #172]	@ (800243c <MX_TIM5_Init+0xe0>)
 800238e:	4a2c      	ldr	r2, [pc, #176]	@ (8002440 <MX_TIM5_Init+0xe4>)
 8002390:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8002392:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <MX_TIM5_Init+0xe0>)
 8002394:	220f      	movs	r2, #15
 8002396:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002398:	4b28      	ldr	r3, [pc, #160]	@ (800243c <MX_TIM5_Init+0xe0>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800239e:	4b27      	ldr	r3, [pc, #156]	@ (800243c <MX_TIM5_Init+0xe0>)
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a6:	4b25      	ldr	r3, [pc, #148]	@ (800243c <MX_TIM5_Init+0xe0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ac:	4b23      	ldr	r3, [pc, #140]	@ (800243c <MX_TIM5_Init+0xe0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023b2:	4822      	ldr	r0, [pc, #136]	@ (800243c <MX_TIM5_Init+0xe0>)
 80023b4:	f002 f808 	bl	80043c8 <HAL_TIM_Base_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80023be:	f000 f989 	bl	80026d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023cc:	4619      	mov	r1, r3
 80023ce:	481b      	ldr	r0, [pc, #108]	@ (800243c <MX_TIM5_Init+0xe0>)
 80023d0:	f002 fb2c 	bl	8004a2c <HAL_TIM_ConfigClockSource>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80023da:	f000 f97b 	bl	80026d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80023de:	4817      	ldr	r0, [pc, #92]	@ (800243c <MX_TIM5_Init+0xe0>)
 80023e0:	f002 f8a4 	bl	800452c <HAL_TIM_OC_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80023ea:	f000 f973 	bl	80026d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023f6:	f107 0320 	add.w	r3, r7, #32
 80023fa:	4619      	mov	r1, r3
 80023fc:	480f      	ldr	r0, [pc, #60]	@ (800243c <MX_TIM5_Init+0xe0>)
 80023fe:	f002 feb5 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002408:	f000 f964 	bl	80026d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800240c:	2300      	movs	r3, #0
 800240e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	@ (800243c <MX_TIM5_Init+0xe0>)
 8002424:	f002 f9e4 	bl	80047f0 <HAL_TIM_OC_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800242e:	f000 f951 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	3738      	adds	r7, #56	@ 0x38
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200001f4 	.word	0x200001f4
 8002440:	40000c00 	.word	0x40000c00

08002444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 800244a:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <MX_USART2_UART_Init+0x50>)
 800244c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002450:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002462:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 800246e:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002470:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002474:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800247c:	4804      	ldr	r0, [pc, #16]	@ (8002490 <MX_USART2_UART_Init+0x4c>)
 800247e:	f002 ff35 	bl	80052ec <HAL_UART_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002488:	f000 f924 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	2000023c 	.word	0x2000023c
 8002494:	40004400 	.word	0x40004400

08002498 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <MX_DMA_Init+0x8c>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002524 <MX_DMA_Init+0x8c>)
 80024a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <MX_DMA_Init+0x8c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80024ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <MX_DMA_Init+0x90>)
 80024bc:	4a1b      	ldr	r2, [pc, #108]	@ (800252c <MX_DMA_Init+0x94>)
 80024be:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80024c0:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <MX_DMA_Init+0x90>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80024c6:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <MX_DMA_Init+0x90>)
 80024c8:	2280      	movs	r2, #128	@ 0x80
 80024ca:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <MX_DMA_Init+0x90>)
 80024ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <MX_DMA_Init+0x90>)
 80024d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024da:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024dc:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <MX_DMA_Init+0x90>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <MX_DMA_Init+0x90>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <MX_DMA_Init+0x90>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <MX_DMA_Init+0x90>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <MX_DMA_Init+0x90>)
 80024f6:	2204      	movs	r2, #4
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <MX_DMA_Init+0x90>)
 80024fc:	2203      	movs	r2, #3
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002500:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <MX_DMA_Init+0x90>)
 8002502:	2200      	movs	r2, #0
 8002504:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002506:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <MX_DMA_Init+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800250c:	4806      	ldr	r0, [pc, #24]	@ (8002528 <MX_DMA_Init+0x90>)
 800250e:	f000 ff33 	bl	8003378 <HAL_DMA_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_DMA_Init+0x84>
  {
    Error_Handler( );
 8002518:	f000 f8dc 	bl	80026d4 <Error_Handler>
  }

}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	20000284 	.word	0x20000284
 800252c:	40026410 	.word	0x40026410

08002530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
 8002544:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b41      	ldr	r3, [pc, #260]	@ (8002650 <MX_GPIO_Init+0x120>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a40      	ldr	r2, [pc, #256]	@ (8002650 <MX_GPIO_Init+0x120>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b3e      	ldr	r3, [pc, #248]	@ (8002650 <MX_GPIO_Init+0x120>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b3a      	ldr	r3, [pc, #232]	@ (8002650 <MX_GPIO_Init+0x120>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a39      	ldr	r2, [pc, #228]	@ (8002650 <MX_GPIO_Init+0x120>)
 800256c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b37      	ldr	r3, [pc, #220]	@ (8002650 <MX_GPIO_Init+0x120>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	4b33      	ldr	r3, [pc, #204]	@ (8002650 <MX_GPIO_Init+0x120>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4a32      	ldr	r2, [pc, #200]	@ (8002650 <MX_GPIO_Init+0x120>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6313      	str	r3, [r2, #48]	@ 0x30
 800258e:	4b30      	ldr	r3, [pc, #192]	@ (8002650 <MX_GPIO_Init+0x120>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	4b2c      	ldr	r3, [pc, #176]	@ (8002650 <MX_GPIO_Init+0x120>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002650 <MX_GPIO_Init+0x120>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025aa:	4b29      	ldr	r3, [pc, #164]	@ (8002650 <MX_GPIO_Init+0x120>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
 80025bc:	4825      	ldr	r0, [pc, #148]	@ (8002654 <MX_GPIO_Init+0x124>)
 80025be:	f001 fa51 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2139      	movs	r1, #57	@ 0x39
 80025c6:	4824      	ldr	r0, [pc, #144]	@ (8002658 <MX_GPIO_Init+0x128>)
 80025c8:	f001 fa4c 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2180      	movs	r1, #128	@ 0x80
 80025d0:	4822      	ldr	r0, [pc, #136]	@ (800265c <MX_GPIO_Init+0x12c>)
 80025d2:	f001 fa47 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80025e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	481b      	ldr	r0, [pc, #108]	@ (800265c <MX_GPIO_Init+0x12c>)
 80025ee:	f001 f8b5 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80025f2:	f44f 63d4 	mov.w	r3, #1696	@ 0x6a0
 80025f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	4812      	ldr	r0, [pc, #72]	@ (8002654 <MX_GPIO_Init+0x124>)
 800260c:	f001 f8a6 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002610:	2339      	movs	r3, #57	@ 0x39
 8002612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002614:	2301      	movs	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	480c      	ldr	r0, [pc, #48]	@ (8002658 <MX_GPIO_Init+0x128>)
 8002628:	f001 f898 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002630:	2301      	movs	r3, #1
 8002632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4619      	mov	r1, r3
 8002642:	4806      	ldr	r0, [pc, #24]	@ (800265c <MX_GPIO_Init+0x12c>)
 8002644:	f001 f88a 	bl	800375c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002648:	bf00      	nop
 800264a:	3728      	adds	r7, #40	@ 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800

08002660 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

	if (rxBufferData[0] == 0x01){
 8002668:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <HAL_UART_RxCpltCallback+0x5c>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d103      	bne.n	8002678 <HAL_UART_RxCpltCallback+0x18>
		stop = 1;
 8002670:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <HAL_UART_RxCpltCallback+0x60>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e011      	b.n	800269c <HAL_UART_RxCpltCallback+0x3c>
	} else if (rxBufferData[0] == 0x02){
 8002678:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <HAL_UART_RxCpltCallback+0x5c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d10d      	bne.n	800269c <HAL_UART_RxCpltCallback+0x3c>
		if (txBuffer[0] == 0x00){
 8002680:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <HAL_UART_RxCpltCallback+0x64>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_UART_RxCpltCallback+0x3c>
			robotState = 0x01;
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <HAL_UART_RxCpltCallback+0x68>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
			txBuffer[0] = robotState;
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <HAL_UART_RxCpltCallback+0x68>)
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <HAL_UART_RxCpltCallback+0x64>)
 8002694:	701a      	strb	r2, [r3, #0]
			dataArrived = 1;
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <HAL_UART_RxCpltCallback+0x6c>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Transmit(&huart2, rxBufferData, 13, HAL_MAX_DELAY);
 800269c:	f04f 33ff 	mov.w	r3, #4294967295
 80026a0:	220d      	movs	r2, #13
 80026a2:	4906      	ldr	r1, [pc, #24]	@ (80026bc <HAL_UART_RxCpltCallback+0x5c>)
 80026a4:	480a      	ldr	r0, [pc, #40]	@ (80026d0 <HAL_UART_RxCpltCallback+0x70>)
 80026a6:	f002 fe71 	bl	800538c <HAL_UART_Transmit>


	HAL_UART_Receive_IT(&huart2, rxBufferData, 13);
 80026aa:	220d      	movs	r2, #13
 80026ac:	4903      	ldr	r1, [pc, #12]	@ (80026bc <HAL_UART_RxCpltCallback+0x5c>)
 80026ae:	4808      	ldr	r0, [pc, #32]	@ (80026d0 <HAL_UART_RxCpltCallback+0x70>)
 80026b0:	f002 fef7 	bl	80054a2 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, rxBufferData, 13);
	*/



}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200002f8 	.word	0x200002f8
 80026c0:	2000047d 	.word	0x2000047d
 80026c4:	200002e8 	.word	0x200002e8
 80026c8:	2000047c 	.word	0x2000047c
 80026cc:	2000047e 	.word	0x2000047e
 80026d0:	2000023c 	.word	0x2000023c

080026d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d8:	b672      	cpsid	i
}
 80026da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <Error_Handler+0x8>

080026e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	4b10      	ldr	r3, [pc, #64]	@ (800272c <HAL_MspInit+0x4c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	4a0f      	ldr	r2, [pc, #60]	@ (800272c <HAL_MspInit+0x4c>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f6:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <HAL_MspInit+0x4c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_MspInit+0x4c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	4a08      	ldr	r2, [pc, #32]	@ (800272c <HAL_MspInit+0x4c>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	@ 0x40
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_MspInit+0x4c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800271e:	2007      	movs	r0, #7
 8002720:	f000 fde8 	bl	80032f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800

08002730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	@ 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <HAL_ADC_MspInit+0x7c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d127      	bne.n	80027a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	4b16      	ldr	r3, [pc, #88]	@ (80027b0 <HAL_ADC_MspInit+0x80>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	4a15      	ldr	r2, [pc, #84]	@ (80027b0 <HAL_ADC_MspInit+0x80>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002760:	6453      	str	r3, [r2, #68]	@ 0x44
 8002762:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <HAL_ADC_MspInit+0x80>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b0f      	ldr	r3, [pc, #60]	@ (80027b0 <HAL_ADC_MspInit+0x80>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	4a0e      	ldr	r2, [pc, #56]	@ (80027b0 <HAL_ADC_MspInit+0x80>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	@ 0x30
 800277e:	4b0c      	ldr	r3, [pc, #48]	@ (80027b0 <HAL_ADC_MspInit+0x80>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800278a:	2301      	movs	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278e:	2303      	movs	r3, #3
 8002790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <HAL_ADC_MspInit+0x84>)
 800279e:	f000 ffdd 	bl	800375c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027a2:	bf00      	nop
 80027a4:	3728      	adds	r7, #40	@ 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40012000 	.word	0x40012000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000

080027b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	@ 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a33      	ldr	r2, [pc, #204]	@ (8002894 <HAL_TIM_Base_MspInit+0xdc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	4b32      	ldr	r3, [pc, #200]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a31      	ldr	r2, [pc, #196]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b2f      	ldr	r3, [pc, #188]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80027e6:	e04e      	b.n	8002886 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f0:	d10e      	bne.n	8002810 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	4b28      	ldr	r3, [pc, #160]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	4a27      	ldr	r2, [pc, #156]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6413      	str	r3, [r2, #64]	@ 0x40
 8002802:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	69bb      	ldr	r3, [r7, #24]
}
 800280e:	e03a      	b.n	8002886 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a21      	ldr	r2, [pc, #132]	@ (800289c <HAL_TIM_Base_MspInit+0xe4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
}
 8002836:	e026      	b.n	8002886 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a18      	ldr	r2, [pc, #96]	@ (80028a0 <HAL_TIM_Base_MspInit+0xe8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6413      	str	r3, [r2, #64]	@ 0x40
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
}
 800285e:	e012      	b.n	8002886 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0f      	ldr	r2, [pc, #60]	@ (80028a4 <HAL_TIM_Base_MspInit+0xec>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10d      	bne.n	8002886 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	4a09      	ldr	r2, [pc, #36]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	6413      	str	r3, [r2, #64]	@ 0x40
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <HAL_TIM_Base_MspInit+0xe0>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
}
 8002886:	bf00      	nop
 8002888:	3724      	adds	r7, #36	@ 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40010000 	.word	0x40010000
 8002898:	40023800 	.word	0x40023800
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00

080028a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	@ 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a36      	ldr	r2, [pc, #216]	@ (80029a0 <HAL_TIM_MspPostInit+0xf8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d11f      	bne.n	800290a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4b35      	ldr	r3, [pc, #212]	@ (80029a4 <HAL_TIM_MspPostInit+0xfc>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a34      	ldr	r2, [pc, #208]	@ (80029a4 <HAL_TIM_MspPostInit+0xfc>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <HAL_TIM_MspPostInit+0xfc>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4619      	mov	r1, r3
 8002902:	4829      	ldr	r0, [pc, #164]	@ (80029a8 <HAL_TIM_MspPostInit+0x100>)
 8002904:	f000 ff2a 	bl	800375c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002908:	e046      	b.n	8002998 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a27      	ldr	r2, [pc, #156]	@ (80029ac <HAL_TIM_MspPostInit+0x104>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d11e      	bne.n	8002952 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	4b22      	ldr	r3, [pc, #136]	@ (80029a4 <HAL_TIM_MspPostInit+0xfc>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291c:	4a21      	ldr	r2, [pc, #132]	@ (80029a4 <HAL_TIM_MspPostInit+0xfc>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6313      	str	r3, [r2, #48]	@ 0x30
 8002924:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <HAL_TIM_MspPostInit+0xfc>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002930:	2340      	movs	r3, #64	@ 0x40
 8002932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002940:	2302      	movs	r3, #2
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4619      	mov	r1, r3
 800294a:	4817      	ldr	r0, [pc, #92]	@ (80029a8 <HAL_TIM_MspPostInit+0x100>)
 800294c:	f000 ff06 	bl	800375c <HAL_GPIO_Init>
}
 8002950:	e022      	b.n	8002998 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a16      	ldr	r2, [pc, #88]	@ (80029b0 <HAL_TIM_MspPostInit+0x108>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d11d      	bne.n	8002998 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <HAL_TIM_MspPostInit+0xfc>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <HAL_TIM_MspPostInit+0xfc>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	6313      	str	r3, [r2, #48]	@ 0x30
 800296c:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <HAL_TIM_MspPostInit+0xfc>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002988:	2302      	movs	r3, #2
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	4808      	ldr	r0, [pc, #32]	@ (80029b4 <HAL_TIM_MspPostInit+0x10c>)
 8002994:	f000 fee2 	bl	800375c <HAL_GPIO_Init>
}
 8002998:	bf00      	nop
 800299a:	3728      	adds	r7, #40	@ 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40020400 	.word	0x40020400

080029b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	@ 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a25      	ldr	r2, [pc, #148]	@ (8002a6c <HAL_UART_MspInit+0xb4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d143      	bne.n	8002a62 <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_UART_MspInit+0xb8>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	4a23      	ldr	r2, [pc, #140]	@ (8002a70 <HAL_UART_MspInit+0xb8>)
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ea:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <HAL_UART_MspInit+0xb8>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <HAL_UART_MspInit+0xb8>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002a70 <HAL_UART_MspInit+0xb8>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a06:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <HAL_UART_MspInit+0xb8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a12:	2302      	movs	r3, #2
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a22:	2307      	movs	r3, #7
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4811      	ldr	r0, [pc, #68]	@ (8002a74 <HAL_UART_MspInit+0xbc>)
 8002a2e:	f000 fe95 	bl	800375c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a32:	230c      	movs	r3, #12
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a42:	2307      	movs	r3, #7
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4809      	ldr	r0, [pc, #36]	@ (8002a74 <HAL_UART_MspInit+0xbc>)
 8002a4e:	f000 fe85 	bl	800375c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	2026      	movs	r0, #38	@ 0x26
 8002a58:	f000 fc57 	bl	800330a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a5c:	2026      	movs	r0, #38	@ 0x26
 8002a5e:	f000 fc70 	bl	8003342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	@ 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40004400 	.word	0x40004400
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020000 	.word	0x40020000

08002a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <NMI_Handler+0x4>

08002a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <HardFault_Handler+0x4>

08002a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <MemManage_Handler+0x4>

08002a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <BusFault_Handler+0x4>

08002a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <UsageFault_Handler+0x4>

08002aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ace:	f000 f89b 	bl	8002c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002adc:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <USART2_IRQHandler+0x10>)
 8002ade:	f002 fd05 	bl	80054ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000023c 	.word	0x2000023c

08002aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <SystemInit+0x20>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <SystemInit+0x20>)
 8002af8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002afc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b14:	f7ff ffea 	bl	8002aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b18:	480c      	ldr	r0, [pc, #48]	@ (8002b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b1a:	490d      	ldr	r1, [pc, #52]	@ (8002b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b20:	e002      	b.n	8002b28 <LoopCopyDataInit>

08002b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b26:	3304      	adds	r3, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b2c:	d3f9      	bcc.n	8002b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b30:	4c0a      	ldr	r4, [pc, #40]	@ (8002b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b34:	e001      	b.n	8002b3a <LoopFillZerobss>

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b38:	3204      	adds	r2, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002b3e:	f003 fc39 	bl	80063b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b42:	f7ff f905 	bl	8001d50 <main>
  bx  lr    
 8002b46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002b54:	080088e8 	.word	0x080088e8
  ldr r2, =_sbss
 8002b58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002b5c:	200005bc 	.word	0x200005bc

08002b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <ADC_IRQHandler>
	...

08002b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <HAL_Init+0x40>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba4 <HAL_Init+0x40>)
 8002b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba4 <HAL_Init+0x40>)
 8002b7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b80:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a07      	ldr	r2, [pc, #28]	@ (8002ba4 <HAL_Init+0x40>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	f000 fbb1 	bl	80032f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f000 f808 	bl	8002ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b98:	f7ff fda2 	bl	80026e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023c00 	.word	0x40023c00

08002ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb0:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <HAL_InitTick+0x54>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <HAL_InitTick+0x58>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fbc9 	bl	800335e <HAL_SYSTICK_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00e      	b.n	8002bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d80a      	bhi.n	8002bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f000 fb91 	bl	800330a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be8:	4a06      	ldr	r2, [pc, #24]	@ (8002c04 <HAL_InitTick+0x5c>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000008 	.word	0x20000008
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <HAL_IncTick+0x20>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_IncTick+0x24>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	4a04      	ldr	r2, [pc, #16]	@ (8002c2c <HAL_IncTick+0x24>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000008 	.word	0x20000008
 8002c2c:	20000480 	.word	0x20000480

08002c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return uwTick;
 8002c34:	4b03      	ldr	r3, [pc, #12]	@ (8002c44 <HAL_GetTick+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000480 	.word	0x20000480

08002c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff ffee 	bl	8002c30 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d005      	beq.n	8002c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c62:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <HAL_Delay+0x44>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c6e:	bf00      	nop
 8002c70:	f7ff ffde 	bl	8002c30 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d8f7      	bhi.n	8002c70 <HAL_Delay+0x28>
  {
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000008 	.word	0x20000008

08002c90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e033      	b.n	8002d0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff fd3e 	bl	8002730 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d118      	bne.n	8002d00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cd6:	f023 0302 	bic.w	r3, r3, #2
 8002cda:	f043 0202 	orr.w	r2, r3, #2
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f93a 	bl	8002f5c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cfe:	e001      	b.n	8002d04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x1c>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e105      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x228>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	d925      	bls.n	8002d90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68d9      	ldr	r1, [r3, #12]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	3b1e      	subs	r3, #30
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43da      	mvns	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	400a      	ands	r2, r1
 8002d68:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68d9      	ldr	r1, [r3, #12]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4403      	add	r3, r0
 8002d82:	3b1e      	subs	r3, #30
 8002d84:	409a      	lsls	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	e022      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6919      	ldr	r1, [r3, #16]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	2207      	movs	r2, #7
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	400a      	ands	r2, r1
 8002db2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6919      	ldr	r1, [r3, #16]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4403      	add	r3, r0
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d824      	bhi.n	8002e28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	3b05      	subs	r3, #5
 8002df0:	221f      	movs	r2, #31
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	3b05      	subs	r3, #5
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e26:	e04c      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d824      	bhi.n	8002e7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b23      	subs	r3, #35	@ 0x23
 8002e42:	221f      	movs	r2, #31
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	400a      	ands	r2, r1
 8002e50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b23      	subs	r3, #35	@ 0x23
 8002e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e78:	e023      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b41      	subs	r3, #65	@ 0x41
 8002e8c:	221f      	movs	r2, #31
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	400a      	ands	r2, r1
 8002e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b41      	subs	r3, #65	@ 0x41
 8002eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec2:	4b22      	ldr	r3, [pc, #136]	@ (8002f4c <HAL_ADC_ConfigChannel+0x234>)
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a21      	ldr	r2, [pc, #132]	@ (8002f50 <HAL_ADC_ConfigChannel+0x238>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d109      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1cc>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b12      	cmp	r3, #18
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	@ (8002f50 <HAL_ADC_ConfigChannel+0x238>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d123      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x21e>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d003      	beq.n	8002efe <HAL_ADC_ConfigChannel+0x1e6>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b11      	cmp	r3, #17
 8002efc:	d11b      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d111      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f12:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <HAL_ADC_ConfigChannel+0x23c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a10      	ldr	r2, [pc, #64]	@ (8002f58 <HAL_ADC_ConfigChannel+0x240>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	0c9a      	lsrs	r2, r3, #18
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f28:	e002      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f9      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40012300 	.word	0x40012300
 8002f50:	40012000 	.word	0x40012000
 8002f54:	20000000 	.word	0x20000000
 8002f58:	431bde83 	.word	0x431bde83

08002f5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f64:	4b79      	ldr	r3, [pc, #484]	@ (800314c <ADC_Init+0x1f0>)
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	021a      	lsls	r2, r3, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	4a58      	ldr	r2, [pc, #352]	@ (8003150 <ADC_Init+0x1f4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003002:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6899      	ldr	r1, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	e00f      	b.n	800305a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003058:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0202 	bic.w	r2, r2, #2
 8003068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7e1b      	ldrb	r3, [r3, #24]
 8003074:	005a      	lsls	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01b      	beq.n	80030c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003096:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	3b01      	subs	r3, #1
 80030b4:	035a      	lsls	r2, r3, #13
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	e007      	b.n	80030d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80030de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	051a      	lsls	r2, r3, #20
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003112:	025a      	lsls	r2, r3, #9
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800312a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	029a      	lsls	r2, r3, #10
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40012300 	.word	0x40012300
 8003150:	0f000001 	.word	0x0f000001

08003154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <__NVIC_SetPriorityGrouping+0x44>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003170:	4013      	ands	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800317c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003186:	4a04      	ldr	r2, [pc, #16]	@ (8003198 <__NVIC_SetPriorityGrouping+0x44>)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	60d3      	str	r3, [r2, #12]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a0:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <__NVIC_GetPriorityGrouping+0x18>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	f003 0307 	and.w	r3, r3, #7
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db0b      	blt.n	80031e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	4907      	ldr	r1, [pc, #28]	@ (80031f0 <__NVIC_EnableIRQ+0x38>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2001      	movs	r0, #1
 80031da:	fa00 f202 	lsl.w	r2, r0, r2
 80031de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000e100 	.word	0xe000e100

080031f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	6039      	str	r1, [r7, #0]
 80031fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003204:	2b00      	cmp	r3, #0
 8003206:	db0a      	blt.n	800321e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	490c      	ldr	r1, [pc, #48]	@ (8003240 <__NVIC_SetPriority+0x4c>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	0112      	lsls	r2, r2, #4
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	440b      	add	r3, r1
 8003218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800321c:	e00a      	b.n	8003234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4908      	ldr	r1, [pc, #32]	@ (8003244 <__NVIC_SetPriority+0x50>)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	3b04      	subs	r3, #4
 800322c:	0112      	lsls	r2, r2, #4
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	440b      	add	r3, r1
 8003232:	761a      	strb	r2, [r3, #24]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003248:	b480      	push	{r7}
 800324a:	b089      	sub	sp, #36	@ 0x24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f1c3 0307 	rsb	r3, r3, #7
 8003262:	2b04      	cmp	r3, #4
 8003264:	bf28      	it	cs
 8003266:	2304      	movcs	r3, #4
 8003268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3304      	adds	r3, #4
 800326e:	2b06      	cmp	r3, #6
 8003270:	d902      	bls.n	8003278 <NVIC_EncodePriority+0x30>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3b03      	subs	r3, #3
 8003276:	e000      	b.n	800327a <NVIC_EncodePriority+0x32>
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43da      	mvns	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	401a      	ands	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003290:	f04f 31ff 	mov.w	r1, #4294967295
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	43d9      	mvns	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	4313      	orrs	r3, r2
         );
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3724      	adds	r7, #36	@ 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032c0:	d301      	bcc.n	80032c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00f      	b.n	80032e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c6:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <SysTick_Config+0x40>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ce:	210f      	movs	r1, #15
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	f7ff ff8e 	bl	80031f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <SysTick_Config+0x40>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032de:	4b04      	ldr	r3, [pc, #16]	@ (80032f0 <SysTick_Config+0x40>)
 80032e0:	2207      	movs	r2, #7
 80032e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	e000e010 	.word	0xe000e010

080032f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff29 	bl	8003154 <__NVIC_SetPriorityGrouping>
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800331c:	f7ff ff3e 	bl	800319c <__NVIC_GetPriorityGrouping>
 8003320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	6978      	ldr	r0, [r7, #20]
 8003328:	f7ff ff8e 	bl	8003248 <NVIC_EncodePriority>
 800332c:	4602      	mov	r2, r0
 800332e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff5d 	bl	80031f4 <__NVIC_SetPriority>
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800334c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff31 	bl	80031b8 <__NVIC_EnableIRQ>
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffa2 	bl	80032b0 <SysTick_Config>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff fc54 	bl	8002c30 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e099      	b.n	80034c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b4:	e00f      	b.n	80033d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033b6:	f7ff fc3b 	bl	8002c30 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d908      	bls.n	80033d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e078      	b.n	80034c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e8      	bne.n	80033b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4b38      	ldr	r3, [pc, #224]	@ (80034d0 <HAL_DMA_Init+0x158>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003402:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	2b04      	cmp	r3, #4
 800342e:	d107      	bne.n	8003440 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	4313      	orrs	r3, r2
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0307 	bic.w	r3, r3, #7
 8003456:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	2b04      	cmp	r3, #4
 8003468:	d117      	bne.n	800349a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8f1 	bl	8003664 <DMA_CheckFifoParam>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2240      	movs	r2, #64	@ 0x40
 800348c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003496:	2301      	movs	r3, #1
 8003498:	e016      	b.n	80034c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8a8 	bl	80035f8 <DMA_CalcBaseAndBitshift>
 80034a8:	4603      	mov	r3, r0
 80034aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	223f      	movs	r2, #63	@ 0x3f
 80034b2:	409a      	lsls	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	f010803f 	.word	0xf010803f

080034d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034e2:	f7ff fba5 	bl	8002c30 <HAL_GetTick>
 80034e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d008      	beq.n	8003506 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2280      	movs	r2, #128	@ 0x80
 80034f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e052      	b.n	80035ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0216 	bic.w	r2, r2, #22
 8003514:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003524:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_DMA_Abort+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0208 	bic.w	r2, r2, #8
 8003544:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003556:	e013      	b.n	8003580 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003558:	f7ff fb6a 	bl	8002c30 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b05      	cmp	r3, #5
 8003564:	d90c      	bls.n	8003580 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2203      	movs	r2, #3
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e015      	b.n	80035ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e4      	bne.n	8003558 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003592:	223f      	movs	r2, #63	@ 0x3f
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d004      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2280      	movs	r2, #128	@ 0x80
 80035cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00c      	b.n	80035ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2205      	movs	r2, #5
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3b10      	subs	r3, #16
 8003608:	4a14      	ldr	r2, [pc, #80]	@ (800365c <DMA_CalcBaseAndBitshift+0x64>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003612:	4a13      	ldr	r2, [pc, #76]	@ (8003660 <DMA_CalcBaseAndBitshift+0x68>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d909      	bls.n	800363a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	1d1a      	adds	r2, r3, #4
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	659a      	str	r2, [r3, #88]	@ 0x58
 8003638:	e007      	b.n	800364a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	aaaaaaab 	.word	0xaaaaaaab
 8003660:	08008688 	.word	0x08008688

08003664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d856      	bhi.n	8003732 <DMA_CheckFifoParam+0xce>
 8003684:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <DMA_CheckFifoParam+0x28>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036af 	.word	0x080036af
 8003694:	0800369d 	.word	0x0800369d
 8003698:	08003733 	.word	0x08003733
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d046      	beq.n	8003736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ac:	e043      	b.n	8003736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036b6:	d140      	bne.n	800373a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036bc:	e03d      	b.n	800373a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c6:	d121      	bne.n	800370c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d837      	bhi.n	800373e <DMA_CheckFifoParam+0xda>
 80036ce:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <DMA_CheckFifoParam+0x70>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036eb 	.word	0x080036eb
 80036dc:	080036e5 	.word	0x080036e5
 80036e0:	080036fd 	.word	0x080036fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	e030      	b.n	800374c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d025      	beq.n	8003742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fa:	e022      	b.n	8003742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003704:	d11f      	bne.n	8003746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800370a:	e01c      	b.n	8003746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d903      	bls.n	800371a <DMA_CheckFifoParam+0xb6>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d003      	beq.n	8003720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003718:	e018      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      break;
 800371e:	e015      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      break;
 8003730:	e00b      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;
 8003732:	bf00      	nop
 8003734:	e00a      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e008      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e006      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
 8003740:	e004      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;   
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800374a:	bf00      	nop
    }
  } 
  
  return status; 
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	@ 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	e159      	b.n	8003a2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003778:	2201      	movs	r2, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	f040 8148 	bne.w	8003a26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d005      	beq.n	80037ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d130      	bne.n	8003810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2203      	movs	r2, #3
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e4:	2201      	movs	r2, #1
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 0201 	and.w	r2, r3, #1
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	2b03      	cmp	r3, #3
 800381a:	d017      	beq.n	800384c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d123      	bne.n	80038a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	08da      	lsrs	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	220f      	movs	r2, #15
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	08da      	lsrs	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3208      	adds	r2, #8
 800389a:	69b9      	ldr	r1, [r7, #24]
 800389c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0203 	and.w	r2, r3, #3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80a2 	beq.w	8003a26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	4b57      	ldr	r3, [pc, #348]	@ (8003a44 <HAL_GPIO_Init+0x2e8>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	4a56      	ldr	r2, [pc, #344]	@ (8003a44 <HAL_GPIO_Init+0x2e8>)
 80038ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038f2:	4b54      	ldr	r3, [pc, #336]	@ (8003a44 <HAL_GPIO_Init+0x2e8>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038fe:	4a52      	ldr	r2, [pc, #328]	@ (8003a48 <HAL_GPIO_Init+0x2ec>)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	3302      	adds	r3, #2
 8003906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	220f      	movs	r2, #15
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a49      	ldr	r2, [pc, #292]	@ (8003a4c <HAL_GPIO_Init+0x2f0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d019      	beq.n	800395e <HAL_GPIO_Init+0x202>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a48      	ldr	r2, [pc, #288]	@ (8003a50 <HAL_GPIO_Init+0x2f4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_GPIO_Init+0x1fe>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a47      	ldr	r2, [pc, #284]	@ (8003a54 <HAL_GPIO_Init+0x2f8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00d      	beq.n	8003956 <HAL_GPIO_Init+0x1fa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a46      	ldr	r2, [pc, #280]	@ (8003a58 <HAL_GPIO_Init+0x2fc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <HAL_GPIO_Init+0x1f6>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a45      	ldr	r2, [pc, #276]	@ (8003a5c <HAL_GPIO_Init+0x300>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_GPIO_Init+0x1f2>
 800394a:	2304      	movs	r3, #4
 800394c:	e008      	b.n	8003960 <HAL_GPIO_Init+0x204>
 800394e:	2307      	movs	r3, #7
 8003950:	e006      	b.n	8003960 <HAL_GPIO_Init+0x204>
 8003952:	2303      	movs	r3, #3
 8003954:	e004      	b.n	8003960 <HAL_GPIO_Init+0x204>
 8003956:	2302      	movs	r3, #2
 8003958:	e002      	b.n	8003960 <HAL_GPIO_Init+0x204>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_GPIO_Init+0x204>
 800395e:	2300      	movs	r3, #0
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	f002 0203 	and.w	r2, r2, #3
 8003966:	0092      	lsls	r2, r2, #2
 8003968:	4093      	lsls	r3, r2
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003970:	4935      	ldr	r1, [pc, #212]	@ (8003a48 <HAL_GPIO_Init+0x2ec>)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	3302      	adds	r3, #2
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800397e:	4b38      	ldr	r3, [pc, #224]	@ (8003a60 <HAL_GPIO_Init+0x304>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a60 <HAL_GPIO_Init+0x304>)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <HAL_GPIO_Init+0x304>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039cc:	4a24      	ldr	r2, [pc, #144]	@ (8003a60 <HAL_GPIO_Init+0x304>)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039d2:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <HAL_GPIO_Init+0x304>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a60 <HAL_GPIO_Init+0x304>)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039fc:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <HAL_GPIO_Init+0x304>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a20:	4a0f      	ldr	r2, [pc, #60]	@ (8003a60 <HAL_GPIO_Init+0x304>)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b0f      	cmp	r3, #15
 8003a30:	f67f aea2 	bls.w	8003778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	3724      	adds	r7, #36	@ 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40013800 	.word	0x40013800
 8003a4c:	40020000 	.word	0x40020000
 8003a50:	40020400 	.word	0x40020400
 8003a54:	40020800 	.word	0x40020800
 8003a58:	40020c00 	.word	0x40020c00
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40013c00 	.word	0x40013c00

08003a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
 8003a70:	4613      	mov	r3, r2
 8003a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a74:	787b      	ldrb	r3, [r7, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a80:	e003      	b.n	8003a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	041a      	lsls	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	619a      	str	r2, [r3, #24]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e267      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d075      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab6:	4b88      	ldr	r3, [pc, #544]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d00c      	beq.n	8003adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4b85      	ldr	r3, [pc, #532]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d112      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4b82      	ldr	r3, [pc, #520]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d05b      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x108>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d157      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e242      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afc:	d106      	bne.n	8003b0c <HAL_RCC_OscConfig+0x74>
 8003afe:	4b76      	ldr	r3, [pc, #472]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a75      	ldr	r2, [pc, #468]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e01d      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x98>
 8003b16:	4b70      	ldr	r3, [pc, #448]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b6d      	ldr	r3, [pc, #436]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6c      	ldr	r2, [pc, #432]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b30:	4b69      	ldr	r3, [pc, #420]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a68      	ldr	r2, [pc, #416]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a65      	ldr	r2, [pc, #404]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7ff f86e 	bl	8002c30 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7ff f86a 	bl	8002c30 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	@ 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e207      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xc0>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7ff f85a 	bl	8002c30 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b80:	f7ff f856 	bl	8002c30 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e1f3      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	4b51      	ldr	r3, [pc, #324]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0xe8>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d063      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bae:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bba:	4b47      	ldr	r3, [pc, #284]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d11c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b44      	ldr	r3, [pc, #272]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d116      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd2:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e1c7      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bea:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4937      	ldr	r1, [pc, #220]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	e03a      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c08:	4b34      	ldr	r3, [pc, #208]	@ (8003cdc <HAL_RCC_OscConfig+0x244>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7ff f80f 	bl	8002c30 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c16:	f7ff f80b 	bl	8002c30 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1a8      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c28:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4925      	ldr	r1, [pc, #148]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
 8003c48:	e015      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4a:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCC_OscConfig+0x244>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe ffee 	bl	8002c30 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fe ffea 	bl	8002c30 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e187      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d036      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_RCC_OscConfig+0x248>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fe ffce 	bl	8002c30 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fe ffca 	bl	8002c30 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e167      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x200>
 8003cb6:	e01b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb8:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <HAL_RCC_OscConfig+0x248>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe ffb7 	bl	8002c30 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	e00e      	b.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fe ffb3 	bl	8002c30 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d907      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e150      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	42470000 	.word	0x42470000
 8003ce0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	4b88      	ldr	r3, [pc, #544]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ea      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8097 	beq.w	8003e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d02:	4b81      	ldr	r3, [pc, #516]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	4b7d      	ldr	r3, [pc, #500]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	4a7c      	ldr	r2, [pc, #496]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2e:	4b77      	ldr	r3, [pc, #476]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d118      	bne.n	8003d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d3a:	4b74      	ldr	r3, [pc, #464]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a73      	ldr	r2, [pc, #460]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d46:	f7fe ff73 	bl	8002c30 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe ff6f 	bl	8002c30 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e10c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	4b6a      	ldr	r3, [pc, #424]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x2ea>
 8003d74:	4b64      	ldr	r3, [pc, #400]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d78:	4a63      	ldr	r2, [pc, #396]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d80:	e01c      	b.n	8003dbc <HAL_RCC_OscConfig+0x324>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x30c>
 8003d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d96:	4b5c      	ldr	r3, [pc, #368]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0x324>
 8003da4:	4b58      	ldr	r3, [pc, #352]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	4a57      	ldr	r2, [pc, #348]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db0:	4b55      	ldr	r3, [pc, #340]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db4:	4a54      	ldr	r2, [pc, #336]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f023 0304 	bic.w	r3, r3, #4
 8003dba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fe ff34 	bl	8002c30 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fe ff30 	bl	8002c30 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0cb      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de2:	4b49      	ldr	r3, [pc, #292]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0ee      	beq.n	8003dcc <HAL_RCC_OscConfig+0x334>
 8003dee:	e014      	b.n	8003e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7fe ff1e 	bl	8002c30 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fe ff1a 	bl	8002c30 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0b5      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ee      	bne.n	8003df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e20:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	4a38      	ldr	r2, [pc, #224]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a1 	beq.w	8003f78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e36:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d05c      	beq.n	8003efc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d141      	bne.n	8003ece <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4a:	4b31      	ldr	r3, [pc, #196]	@ (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe feee 	bl	8002c30 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fe feea 	bl	8002c30 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e087      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6a:	4b27      	ldr	r3, [pc, #156]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	491b      	ldr	r1, [pc, #108]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fe fec3 	bl	8002c30 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fe febf 	bl	8002c30 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e05c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec0:	4b11      	ldr	r3, [pc, #68]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x416>
 8003ecc:	e054      	b.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ece:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fe feac 	bl	8002c30 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe fea8 	bl	8002c30 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e045      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x444>
 8003efa:	e03d      	b.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e038      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f14:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCC_OscConfig+0x4ec>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d028      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d121      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d11a      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d111      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800

08003f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0cc      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b68      	ldr	r3, [pc, #416]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d90c      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b65      	ldr	r3, [pc, #404]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b63      	ldr	r3, [pc, #396]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0b8      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fdc:	4b59      	ldr	r3, [pc, #356]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff4:	4b53      	ldr	r3, [pc, #332]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b50      	ldr	r3, [pc, #320]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	494d      	ldr	r1, [pc, #308]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d044      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b47      	ldr	r3, [pc, #284]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d119      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d003      	beq.n	8004046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	2b03      	cmp	r3, #3
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b3f      	ldr	r3, [pc, #252]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	4b3b      	ldr	r3, [pc, #236]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e067      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4934      	ldr	r1, [pc, #208]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004078:	f7fe fdda 	bl	8002c30 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fe fdd6 	bl	8002c30 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e04f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b2b      	ldr	r3, [pc, #172]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d20c      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b20      	ldr	r3, [pc, #128]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e032      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040dc:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4916      	ldr	r1, [pc, #88]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040fa:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	490e      	ldr	r1, [pc, #56]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800410e:	f000 f821 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004112:	4602      	mov	r2, r0
 8004114:	4b0b      	ldr	r3, [pc, #44]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	490a      	ldr	r1, [pc, #40]	@ (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 8004120:	5ccb      	ldrb	r3, [r1, r3]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	4a09      	ldr	r2, [pc, #36]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fd3a 	bl	8002ba8 <HAL_InitTick>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023c00 	.word	0x40023c00
 8004144:	40023800 	.word	0x40023800
 8004148:	08008670 	.word	0x08008670
 800414c:	20000000 	.word	0x20000000
 8004150:	20000004 	.word	0x20000004

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b094      	sub	sp, #80	@ 0x50
 800415a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004160:	2300      	movs	r3, #0
 8004162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004164:	2300      	movs	r3, #0
 8004166:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800416c:	4b79      	ldr	r3, [pc, #484]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d00d      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x40>
 8004178:	2b08      	cmp	r3, #8
 800417a:	f200 80e1 	bhi.w	8004340 <HAL_RCC_GetSysClockFreq+0x1ec>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x34>
 8004182:	2b04      	cmp	r3, #4
 8004184:	d003      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x3a>
 8004186:	e0db      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b73      	ldr	r3, [pc, #460]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x204>)
 800418a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800418c:	e0db      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418e:	4b73      	ldr	r3, [pc, #460]	@ (800435c <HAL_RCC_GetSysClockFreq+0x208>)
 8004190:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004192:	e0d8      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004194:	4b6f      	ldr	r3, [pc, #444]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800419c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419e:	4b6d      	ldr	r3, [pc, #436]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d063      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	2200      	movs	r2, #0
 80041b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80041be:	2300      	movs	r3, #0
 80041c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041c6:	4622      	mov	r2, r4
 80041c8:	462b      	mov	r3, r5
 80041ca:	f04f 0000 	mov.w	r0, #0
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	0159      	lsls	r1, r3, #5
 80041d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d8:	0150      	lsls	r0, r2, #5
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4621      	mov	r1, r4
 80041e0:	1a51      	subs	r1, r2, r1
 80041e2:	6139      	str	r1, [r7, #16]
 80041e4:	4629      	mov	r1, r5
 80041e6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f8:	4659      	mov	r1, fp
 80041fa:	018b      	lsls	r3, r1, #6
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004202:	4651      	mov	r1, sl
 8004204:	018a      	lsls	r2, r1, #6
 8004206:	4651      	mov	r1, sl
 8004208:	ebb2 0801 	subs.w	r8, r2, r1
 800420c:	4659      	mov	r1, fp
 800420e:	eb63 0901 	sbc.w	r9, r3, r1
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004226:	4690      	mov	r8, r2
 8004228:	4699      	mov	r9, r3
 800422a:	4623      	mov	r3, r4
 800422c:	eb18 0303 	adds.w	r3, r8, r3
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	462b      	mov	r3, r5
 8004234:	eb49 0303 	adc.w	r3, r9, r3
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004246:	4629      	mov	r1, r5
 8004248:	024b      	lsls	r3, r1, #9
 800424a:	4621      	mov	r1, r4
 800424c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004250:	4621      	mov	r1, r4
 8004252:	024a      	lsls	r2, r1, #9
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800425a:	2200      	movs	r2, #0
 800425c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800425e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004264:	f7fc fc9c 	bl	8000ba0 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004270:	e058      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004272:	4b38      	ldr	r3, [pc, #224]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	2200      	movs	r2, #0
 800427a:	4618      	mov	r0, r3
 800427c:	4611      	mov	r1, r2
 800427e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	2300      	movs	r3, #0
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
 8004288:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	f04f 0000 	mov.w	r0, #0
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	0159      	lsls	r1, r3, #5
 800429a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429e:	0150      	lsls	r0, r2, #5
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4641      	mov	r1, r8
 80042a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80042aa:	4649      	mov	r1, r9
 80042ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042c4:	ebb2 040a 	subs.w	r4, r2, sl
 80042c8:	eb63 050b 	sbc.w	r5, r3, fp
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	00eb      	lsls	r3, r5, #3
 80042d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042da:	00e2      	lsls	r2, r4, #3
 80042dc:	4614      	mov	r4, r2
 80042de:	461d      	mov	r5, r3
 80042e0:	4643      	mov	r3, r8
 80042e2:	18e3      	adds	r3, r4, r3
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	464b      	mov	r3, r9
 80042e8:	eb45 0303 	adc.w	r3, r5, r3
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042fa:	4629      	mov	r1, r5
 80042fc:	028b      	lsls	r3, r1, #10
 80042fe:	4621      	mov	r1, r4
 8004300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004304:	4621      	mov	r1, r4
 8004306:	028a      	lsls	r2, r1, #10
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430e:	2200      	movs	r2, #0
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	61fa      	str	r2, [r7, #28]
 8004314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004318:	f7fc fc42 	bl	8000ba0 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4613      	mov	r3, r2
 8004322:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004334:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800433e:	e002      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x204>)
 8004342:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004348:	4618      	mov	r0, r3
 800434a:	3750      	adds	r7, #80	@ 0x50
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	00f42400 	.word	0x00f42400
 800435c:	007a1200 	.word	0x007a1200

08004360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004364:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <HAL_RCC_GetHCLKFreq+0x14>)
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000000 	.word	0x20000000

08004378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800437c:	f7ff fff0 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	0a9b      	lsrs	r3, r3, #10
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4903      	ldr	r1, [pc, #12]	@ (800439c <HAL_RCC_GetPCLK1Freq+0x24>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40023800 	.word	0x40023800
 800439c:	08008680 	.word	0x08008680

080043a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043a4:	f7ff ffdc 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	0b5b      	lsrs	r3, r3, #13
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4903      	ldr	r1, [pc, #12]	@ (80043c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40023800 	.word	0x40023800
 80043c4:	08008680 	.word	0x08008680

080043c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e041      	b.n	800445e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fe f9e2 	bl	80027b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f000 fbd8 	bl	8004bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d001      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e044      	b.n	800450a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1e      	ldr	r2, [pc, #120]	@ (8004518 <HAL_TIM_Base_Start_IT+0xb0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x6c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044aa:	d013      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x6c>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1a      	ldr	r2, [pc, #104]	@ (800451c <HAL_TIM_Base_Start_IT+0xb4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x6c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a19      	ldr	r2, [pc, #100]	@ (8004520 <HAL_TIM_Base_Start_IT+0xb8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x6c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a17      	ldr	r2, [pc, #92]	@ (8004524 <HAL_TIM_Base_Start_IT+0xbc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x6c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a16      	ldr	r2, [pc, #88]	@ (8004528 <HAL_TIM_Base_Start_IT+0xc0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d111      	bne.n	80044f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b06      	cmp	r3, #6
 80044e4:	d010      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f6:	e007      	b.n	8004508 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40014000 	.word	0x40014000

0800452c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e041      	b.n	80045c2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f839 	bl	80045ca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 fb26 	bl	8004bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e041      	b.n	8004674 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f839 	bl	800467c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f000 facd 	bl	8004bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_TIM_PWM_Start+0x24>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e022      	b.n	80046fa <HAL_TIM_PWM_Start+0x6a>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d109      	bne.n	80046ce <HAL_TIM_PWM_Start+0x3e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	bf14      	ite	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	2300      	moveq	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e015      	b.n	80046fa <HAL_TIM_PWM_Start+0x6a>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d109      	bne.n	80046e8 <HAL_TIM_PWM_Start+0x58>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e008      	b.n	80046fa <HAL_TIM_PWM_Start+0x6a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e068      	b.n	80047d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0x82>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004710:	e013      	b.n	800473a <HAL_TIM_PWM_Start+0xaa>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start+0x92>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004720:	e00b      	b.n	800473a <HAL_TIM_PWM_Start+0xaa>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Start+0xa2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004730:	e003      	b.n	800473a <HAL_TIM_PWM_Start+0xaa>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2201      	movs	r2, #1
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fcec 	bl	8005120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a23      	ldr	r2, [pc, #140]	@ (80047dc <HAL_TIM_PWM_Start+0x14c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d107      	bne.n	8004762 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <HAL_TIM_PWM_Start+0x14c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d018      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004774:	d013      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a19      	ldr	r2, [pc, #100]	@ (80047e0 <HAL_TIM_PWM_Start+0x150>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <HAL_TIM_PWM_Start+0x154>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a16      	ldr	r2, [pc, #88]	@ (80047e8 <HAL_TIM_PWM_Start+0x158>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <HAL_TIM_PWM_Start+0x10e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a14      	ldr	r2, [pc, #80]	@ (80047ec <HAL_TIM_PWM_Start+0x15c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d111      	bne.n	80047c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d010      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c0:	e007      	b.n	80047d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0201 	orr.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40014000 	.word	0x40014000

080047f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_TIM_OC_ConfigChannel+0x1e>
 800480a:	2302      	movs	r3, #2
 800480c:	e048      	b.n	80048a0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b0c      	cmp	r3, #12
 800481a:	d839      	bhi.n	8004890 <HAL_TIM_OC_ConfigChannel+0xa0>
 800481c:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <HAL_TIM_OC_ConfigChannel+0x34>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004859 	.word	0x08004859
 8004828:	08004891 	.word	0x08004891
 800482c:	08004891 	.word	0x08004891
 8004830:	08004891 	.word	0x08004891
 8004834:	08004867 	.word	0x08004867
 8004838:	08004891 	.word	0x08004891
 800483c:	08004891 	.word	0x08004891
 8004840:	08004891 	.word	0x08004891
 8004844:	08004875 	.word	0x08004875
 8004848:	08004891 	.word	0x08004891
 800484c:	08004891 	.word	0x08004891
 8004850:	08004891 	.word	0x08004891
 8004854:	08004883 	.word	0x08004883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fa38 	bl	8004cd4 <TIM_OC1_SetConfig>
      break;
 8004864:	e017      	b.n	8004896 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fa97 	bl	8004da0 <TIM_OC2_SetConfig>
      break;
 8004872:	e010      	b.n	8004896 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fafc 	bl	8004e78 <TIM_OC3_SetConfig>
      break;
 8004880:	e009      	b.n	8004896 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fb5f 	bl	8004f4c <TIM_OC4_SetConfig>
      break;
 800488e:	e002      	b.n	8004896 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	75fb      	strb	r3, [r7, #23]
      break;
 8004894:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800489e:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e0ae      	b.n	8004a24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	f200 809f 	bhi.w	8004a14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004a15 	.word	0x08004a15
 80048e4:	08004a15 	.word	0x08004a15
 80048e8:	08004a15 	.word	0x08004a15
 80048ec:	08004951 	.word	0x08004951
 80048f0:	08004a15 	.word	0x08004a15
 80048f4:	08004a15 	.word	0x08004a15
 80048f8:	08004a15 	.word	0x08004a15
 80048fc:	08004993 	.word	0x08004993
 8004900:	08004a15 	.word	0x08004a15
 8004904:	08004a15 	.word	0x08004a15
 8004908:	08004a15 	.word	0x08004a15
 800490c:	080049d3 	.word	0x080049d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f9dc 	bl	8004cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0208 	orr.w	r2, r2, #8
 800492a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0204 	bic.w	r2, r2, #4
 800493a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6999      	ldr	r1, [r3, #24]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	619a      	str	r2, [r3, #24]
      break;
 800494e:	e064      	b.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fa22 	bl	8004da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800496a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800497a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6999      	ldr	r1, [r3, #24]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	021a      	lsls	r2, r3, #8
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	619a      	str	r2, [r3, #24]
      break;
 8004990:	e043      	b.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fa6d 	bl	8004e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0208 	orr.w	r2, r2, #8
 80049ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0204 	bic.w	r2, r2, #4
 80049bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69d9      	ldr	r1, [r3, #28]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	61da      	str	r2, [r3, #28]
      break;
 80049d0:	e023      	b.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fab7 	bl	8004f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69d9      	ldr	r1, [r3, #28]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	021a      	lsls	r2, r3, #8
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	61da      	str	r2, [r3, #28]
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
      break;
 8004a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIM_ConfigClockSource+0x1c>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e0b4      	b.n	8004bb2 <HAL_TIM_ConfigClockSource+0x186>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a80:	d03e      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0xd4>
 8004a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a86:	f200 8087 	bhi.w	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a8e:	f000 8086 	beq.w	8004b9e <HAL_TIM_ConfigClockSource+0x172>
 8004a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a96:	d87f      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b70      	cmp	r3, #112	@ 0x70
 8004a9a:	d01a      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0xa6>
 8004a9c:	2b70      	cmp	r3, #112	@ 0x70
 8004a9e:	d87b      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b60      	cmp	r3, #96	@ 0x60
 8004aa2:	d050      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x11a>
 8004aa4:	2b60      	cmp	r3, #96	@ 0x60
 8004aa6:	d877      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b50      	cmp	r3, #80	@ 0x50
 8004aaa:	d03c      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0xfa>
 8004aac:	2b50      	cmp	r3, #80	@ 0x50
 8004aae:	d873      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab0:	2b40      	cmp	r3, #64	@ 0x40
 8004ab2:	d058      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x13a>
 8004ab4:	2b40      	cmp	r3, #64	@ 0x40
 8004ab6:	d86f      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b30      	cmp	r3, #48	@ 0x30
 8004aba:	d064      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x15a>
 8004abc:	2b30      	cmp	r3, #48	@ 0x30
 8004abe:	d86b      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d060      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d867      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d05c      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x15a>
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d05a      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ad0:	e062      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ae2:	f000 fafd 	bl	80050e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004af4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	609a      	str	r2, [r3, #8]
      break;
 8004afe:	e04f      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b10:	f000 fae6 	bl	80050e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b22:	609a      	str	r2, [r3, #8]
      break;
 8004b24:	e03c      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 fa5a 	bl	8004fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2150      	movs	r1, #80	@ 0x50
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fab3 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b44:	e02c      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fa79 	bl	800504a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2160      	movs	r1, #96	@ 0x60
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 faa3 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b64:	e01c      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b72:	461a      	mov	r2, r3
 8004b74:	f000 fa3a 	bl	8004fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2140      	movs	r1, #64	@ 0x40
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fa93 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b84:	e00c      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f000 fa8a 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b96:	e003      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b9c:	e000      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a3a      	ldr	r2, [pc, #232]	@ (8004cb8 <TIM_Base_SetConfig+0xfc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00f      	beq.n	8004bf4 <TIM_Base_SetConfig+0x38>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bda:	d00b      	beq.n	8004bf4 <TIM_Base_SetConfig+0x38>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a37      	ldr	r2, [pc, #220]	@ (8004cbc <TIM_Base_SetConfig+0x100>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d007      	beq.n	8004bf4 <TIM_Base_SetConfig+0x38>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a36      	ldr	r2, [pc, #216]	@ (8004cc0 <TIM_Base_SetConfig+0x104>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_Base_SetConfig+0x38>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a35      	ldr	r2, [pc, #212]	@ (8004cc4 <TIM_Base_SetConfig+0x108>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d108      	bne.n	8004c06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a2b      	ldr	r2, [pc, #172]	@ (8004cb8 <TIM_Base_SetConfig+0xfc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01b      	beq.n	8004c46 <TIM_Base_SetConfig+0x8a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c14:	d017      	beq.n	8004c46 <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a28      	ldr	r2, [pc, #160]	@ (8004cbc <TIM_Base_SetConfig+0x100>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <TIM_Base_SetConfig+0x8a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a27      	ldr	r2, [pc, #156]	@ (8004cc0 <TIM_Base_SetConfig+0x104>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a26      	ldr	r2, [pc, #152]	@ (8004cc4 <TIM_Base_SetConfig+0x108>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a25      	ldr	r2, [pc, #148]	@ (8004cc8 <TIM_Base_SetConfig+0x10c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a24      	ldr	r2, [pc, #144]	@ (8004ccc <TIM_Base_SetConfig+0x110>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a23      	ldr	r2, [pc, #140]	@ (8004cd0 <TIM_Base_SetConfig+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d108      	bne.n	8004c58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004cb8 <TIM_Base_SetConfig+0xfc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d103      	bne.n	8004c8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d105      	bne.n	8004caa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	611a      	str	r2, [r3, #16]
  }
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f023 0201 	bic.w	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 0302 	bic.w	r3, r3, #2
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d9c <TIM_OC1_SetConfig+0xc8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d10c      	bne.n	8004d4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0308 	bic.w	r3, r3, #8
 8004d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a13      	ldr	r2, [pc, #76]	@ (8004d9c <TIM_OC1_SetConfig+0xc8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d111      	bne.n	8004d76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	621a      	str	r2, [r3, #32]
}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40010000 	.word	0x40010000

08004da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f023 0210 	bic.w	r2, r3, #16
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0320 	bic.w	r3, r3, #32
 8004dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <TIM_OC2_SetConfig+0xd4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10d      	bne.n	8004e1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a15      	ldr	r2, [pc, #84]	@ (8004e74 <TIM_OC2_SetConfig+0xd4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d113      	bne.n	8004e4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000

08004e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <TIM_OC3_SetConfig+0xd0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10d      	bne.n	8004ef2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a14      	ldr	r2, [pc, #80]	@ (8004f48 <TIM_OC3_SetConfig+0xd0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d113      	bne.n	8004f22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40010000 	.word	0x40010000

08004f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	031b      	lsls	r3, r3, #12
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a10      	ldr	r2, [pc, #64]	@ (8004fe8 <TIM_OC4_SetConfig+0x9c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d109      	bne.n	8004fc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	019b      	lsls	r3, r3, #6
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40010000 	.word	0x40010000

08004fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 030a 	bic.w	r3, r3, #10
 8005028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f023 0210 	bic.w	r2, r3, #16
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005074:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	031b      	lsls	r3, r3, #12
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005086:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f043 0307 	orr.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	021a      	lsls	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	431a      	orrs	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4313      	orrs	r3, r2
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2201      	movs	r2, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	43db      	mvns	r3, r3
 8005142:	401a      	ands	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	431a      	orrs	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005180:	2302      	movs	r3, #2
 8005182:	e050      	b.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d0:	d013      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a18      	ldr	r2, [pc, #96]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a16      	ldr	r2, [pc, #88]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a13      	ldr	r2, [pc, #76]	@ (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10c      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4313      	orrs	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40010000 	.word	0x40010000
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800
 8005240:	40000c00 	.word	0x40000c00
 8005244:	40014000 	.word	0x40014000

08005248 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005260:	2302      	movs	r3, #2
 8005262:	e03d      	b.n	80052e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e042      	b.n	8005384 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fd fb50 	bl	80029b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2224      	movs	r2, #36	@ 0x24
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800532e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fdbd 	bl	8005eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08a      	sub	sp, #40	@ 0x28
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d175      	bne.n	8005498 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_UART_Transmit+0x2c>
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e06e      	b.n	800549a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2221      	movs	r2, #33	@ 0x21
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ca:	f7fd fc31 	bl	8002c30 <HAL_GetTick>
 80053ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	88fa      	ldrh	r2, [r7, #6]
 80053da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e4:	d108      	bne.n	80053f8 <HAL_UART_Transmit+0x6c>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	e003      	b.n	8005400 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005400:	e02e      	b.n	8005460 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	2180      	movs	r1, #128	@ 0x80
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fb1f 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e03a      	b.n	800549a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10b      	bne.n	8005442 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	3302      	adds	r3, #2
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	e007      	b.n	8005452 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3301      	adds	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1cb      	bne.n	8005402 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	2140      	movs	r1, #64	@ 0x40
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 faeb 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e006      	b.n	800549a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	e000      	b.n	800549a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	4613      	mov	r3, r2
 80054ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d112      	bne.n	80054e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_UART_Receive_IT+0x26>
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e00b      	b.n	80054e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	461a      	mov	r2, r3
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fb12 	bl	8005b02 <UART_Start_Receive_IT>
 80054de:	4603      	mov	r3, r0
 80054e0:	e000      	b.n	80054e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80054e2:	2302      	movs	r3, #2
  }
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b0ba      	sub	sp, #232	@ 0xe8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005512:	2300      	movs	r3, #0
 8005514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800552a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <HAL_UART_IRQHandler+0x66>
 800553e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fbf2 	bl	8005d34 <UART_Receive_IT>
      return;
 8005550:	e25b      	b.n	8005a0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80de 	beq.w	8005718 <HAL_UART_IRQHandler+0x22c>
 800555c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800556c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80d1 	beq.w	8005718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HAL_UART_IRQHandler+0xae>
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005592:	f043 0201 	orr.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_UART_IRQHandler+0xd2>
 80055a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b6:	f043 0202 	orr.w	r2, r3, #2
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <HAL_UART_IRQHandler+0xf6>
 80055ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055da:	f043 0204 	orr.w	r2, r3, #4
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d011      	beq.n	8005612 <HAL_UART_IRQHandler+0x126>
 80055ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560a:	f043 0208 	orr.w	r2, r3, #8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 81f2 	beq.w	8005a00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800561c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_UART_IRQHandler+0x14e>
 8005628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fb7d 	bl	8005d34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005644:	2b40      	cmp	r3, #64	@ 0x40
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d103      	bne.n	8005666 <HAL_UART_IRQHandler+0x17a>
 800565e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d04f      	beq.n	8005706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa85 	bl	8005b76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005676:	2b40      	cmp	r3, #64	@ 0x40
 8005678:	d141      	bne.n	80056fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005690:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1d9      	bne.n	800567a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d013      	beq.n	80056f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d2:	4a7e      	ldr	r2, [pc, #504]	@ (80058cc <HAL_UART_IRQHandler+0x3e0>)
 80056d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fd ff6a 	bl	80035b4 <HAL_DMA_Abort_IT>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d016      	beq.n	8005714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056f0:	4610      	mov	r0, r2
 80056f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e00e      	b.n	8005714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f994 	bl	8005a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	e00a      	b.n	8005714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f990 	bl	8005a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	e006      	b.n	8005714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f98c 	bl	8005a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005712:	e175      	b.n	8005a00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	bf00      	nop
    return;
 8005716:	e173      	b.n	8005a00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571c:	2b01      	cmp	r3, #1
 800571e:	f040 814f 	bne.w	80059c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8148 	beq.w	80059c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8141 	beq.w	80059c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575e:	2b40      	cmp	r3, #64	@ 0x40
 8005760:	f040 80b6 	bne.w	80058d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8145 	beq.w	8005a04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800577e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005782:	429a      	cmp	r2, r3
 8005784:	f080 813e 	bcs.w	8005a04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800578e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800579a:	f000 8088 	beq.w	80058ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	330c      	adds	r3, #12
 80057a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1d9      	bne.n	800579e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3314      	adds	r3, #20
 80057f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3314      	adds	r3, #20
 800580a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800580e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005812:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005816:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005820:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e1      	bne.n	80057ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005838:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800583c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800584a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800584c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005850:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e3      	bne.n	8005826 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800587c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800587e:	f023 0310 	bic.w	r3, r3, #16
 8005882:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005890:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005892:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005896:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800589e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e3      	bne.n	800586c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fd fe13 	bl	80034d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f8b7 	bl	8005a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058ca:	e09b      	b.n	8005a04 <HAL_UART_IRQHandler+0x518>
 80058cc:	08005c3d 	.word	0x08005c3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058d8:	b29b      	uxth	r3, r3
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 808e 	beq.w	8005a08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80058ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 8089 	beq.w	8005a08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800590c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800591a:	647a      	str	r2, [r7, #68]	@ 0x44
 800591c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e3      	bne.n	80058f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3314      	adds	r3, #20
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	623b      	str	r3, [r7, #32]
   return(result);
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3314      	adds	r3, #20
 800594e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005952:	633a      	str	r2, [r7, #48]	@ 0x30
 8005954:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e3      	bne.n	800592e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	60fb      	str	r3, [r7, #12]
   return(result);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0310 	bic.w	r3, r3, #16
 800598a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330c      	adds	r3, #12
 8005994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005998:	61fa      	str	r2, [r7, #28]
 800599a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	69b9      	ldr	r1, [r7, #24]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	617b      	str	r3, [r7, #20]
   return(result);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e3      	bne.n	8005974 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f83d 	bl	8005a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059be:	e023      	b.n	8005a08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d009      	beq.n	80059e0 <HAL_UART_IRQHandler+0x4f4>
 80059cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f943 	bl	8005c64 <UART_Transmit_IT>
    return;
 80059de:	e014      	b.n	8005a0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00e      	beq.n	8005a0a <HAL_UART_IRQHandler+0x51e>
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d008      	beq.n	8005a0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f983 	bl	8005d04 <UART_EndTransmit_IT>
    return;
 80059fe:	e004      	b.n	8005a0a <HAL_UART_IRQHandler+0x51e>
    return;
 8005a00:	bf00      	nop
 8005a02:	e002      	b.n	8005a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8005a04:	bf00      	nop
 8005a06:	e000      	b.n	8005a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8005a08:	bf00      	nop
  }
}
 8005a0a:	37e8      	adds	r7, #232	@ 0xe8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a60:	e03b      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d037      	beq.n	8005ada <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6a:	f7fd f8e1 	bl	8002c30 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e03a      	b.n	8005afa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d023      	beq.n	8005ada <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b80      	cmp	r3, #128	@ 0x80
 8005a96:	d020      	beq.n	8005ada <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b40      	cmp	r3, #64	@ 0x40
 8005a9c:	d01d      	beq.n	8005ada <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d116      	bne.n	8005ada <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f857 	bl	8005b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2208      	movs	r2, #8
 8005acc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e00f      	b.n	8005afa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d0b4      	beq.n	8005a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2222      	movs	r2, #34	@ 0x22
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0220 	orr.w	r2, r2, #32
 8005b66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b095      	sub	sp, #84	@ 0x54
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e5      	bne.n	8005b7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e5      	bne.n	8005bb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d119      	bne.n	8005c22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f023 0310 	bic.w	r3, r3, #16
 8005c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c0e:	61ba      	str	r2, [r7, #24]
 8005c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6979      	ldr	r1, [r7, #20]
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e5      	bne.n	8005bee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c30:	bf00      	nop
 8005c32:	3754      	adds	r7, #84	@ 0x54
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fee4 	bl	8005a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b21      	cmp	r3, #33	@ 0x21
 8005c76:	d13e      	bne.n	8005cf6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c80:	d114      	bne.n	8005cac <UART_Transmit_IT+0x48>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d110      	bne.n	8005cac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	1c9a      	adds	r2, r3, #2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]
 8005caa:	e008      	b.n	8005cbe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	1c59      	adds	r1, r3, #1
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6211      	str	r1, [r2, #32]
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10f      	bne.n	8005cf2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ce0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cf0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e000      	b.n	8005cf8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cf6:	2302      	movs	r3, #2
  }
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fe73 	bl	8005a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	@ 0x30
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b22      	cmp	r3, #34	@ 0x22
 8005d46:	f040 80ae 	bne.w	8005ea6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d52:	d117      	bne.n	8005d84 <UART_Receive_IT+0x50>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d113      	bne.n	8005d84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d82:	e026      	b.n	8005dd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d96:	d007      	beq.n	8005da8 <UART_Receive_IT+0x74>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <UART_Receive_IT+0x82>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e008      	b.n	8005dc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	4619      	mov	r1, r3
 8005de0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d15d      	bne.n	8005ea2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0220 	bic.w	r2, r2, #32
 8005df4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695a      	ldr	r2, [r3, #20]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d135      	bne.n	8005e98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	613b      	str	r3, [r7, #16]
   return(result);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f023 0310 	bic.w	r3, r3, #16
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e52:	623a      	str	r2, [r7, #32]
 8005e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	69f9      	ldr	r1, [r7, #28]
 8005e58:	6a3a      	ldr	r2, [r7, #32]
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e5      	bne.n	8005e32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d10a      	bne.n	8005e8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fdd1 	bl	8005a38 <HAL_UARTEx_RxEventCallback>
 8005e96:	e002      	b.n	8005e9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7fc fbe1 	bl	8002660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e002      	b.n	8005ea8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e000      	b.n	8005ea8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ea6:	2302      	movs	r3, #2
  }
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3730      	adds	r7, #48	@ 0x30
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb4:	b0c0      	sub	sp, #256	@ 0x100
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ecc:	68d9      	ldr	r1, [r3, #12]
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	ea40 0301 	orr.w	r3, r0, r1
 8005ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f08:	f021 010c 	bic.w	r1, r1, #12
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f16:	430b      	orrs	r3, r1
 8005f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2a:	6999      	ldr	r1, [r3, #24]
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	ea40 0301 	orr.w	r3, r0, r1
 8005f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b8f      	ldr	r3, [pc, #572]	@ (800617c <UART_SetConfig+0x2cc>)
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d005      	beq.n	8005f50 <UART_SetConfig+0xa0>
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8006180 <UART_SetConfig+0x2d0>)
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d104      	bne.n	8005f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7fe fa26 	bl	80043a0 <HAL_RCC_GetPCLK2Freq>
 8005f54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f58:	e003      	b.n	8005f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f5a:	f7fe fa0d 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 8005f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f6c:	f040 810c 	bne.w	8006188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f82:	4622      	mov	r2, r4
 8005f84:	462b      	mov	r3, r5
 8005f86:	1891      	adds	r1, r2, r2
 8005f88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f8a:	415b      	adcs	r3, r3
 8005f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f92:	4621      	mov	r1, r4
 8005f94:	eb12 0801 	adds.w	r8, r2, r1
 8005f98:	4629      	mov	r1, r5
 8005f9a:	eb43 0901 	adc.w	r9, r3, r1
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fb2:	4690      	mov	r8, r2
 8005fb4:	4699      	mov	r9, r3
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	eb18 0303 	adds.w	r3, r8, r3
 8005fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	eb49 0303 	adc.w	r3, r9, r3
 8005fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fde:	460b      	mov	r3, r1
 8005fe0:	18db      	adds	r3, r3, r3
 8005fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	eb42 0303 	adc.w	r3, r2, r3
 8005fea:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ff4:	f7fa fdd4 	bl	8000ba0 <__aeabi_uldivmod>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4b61      	ldr	r3, [pc, #388]	@ (8006184 <UART_SetConfig+0x2d4>)
 8005ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	011c      	lsls	r4, r3, #4
 8006006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006010:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	1891      	adds	r1, r2, r2
 800601e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006020:	415b      	adcs	r3, r3
 8006022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006028:	4641      	mov	r1, r8
 800602a:	eb12 0a01 	adds.w	sl, r2, r1
 800602e:	4649      	mov	r1, r9
 8006030:	eb43 0b01 	adc.w	fp, r3, r1
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006048:	4692      	mov	sl, r2
 800604a:	469b      	mov	fp, r3
 800604c:	4643      	mov	r3, r8
 800604e:	eb1a 0303 	adds.w	r3, sl, r3
 8006052:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006056:	464b      	mov	r3, r9
 8006058:	eb4b 0303 	adc.w	r3, fp, r3
 800605c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800606c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006074:	460b      	mov	r3, r1
 8006076:	18db      	adds	r3, r3, r3
 8006078:	643b      	str	r3, [r7, #64]	@ 0x40
 800607a:	4613      	mov	r3, r2
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	647b      	str	r3, [r7, #68]	@ 0x44
 8006082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800608a:	f7fa fd89 	bl	8000ba0 <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4611      	mov	r1, r2
 8006094:	4b3b      	ldr	r3, [pc, #236]	@ (8006184 <UART_SetConfig+0x2d4>)
 8006096:	fba3 2301 	umull	r2, r3, r3, r1
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	2264      	movs	r2, #100	@ 0x64
 800609e:	fb02 f303 	mul.w	r3, r2, r3
 80060a2:	1acb      	subs	r3, r1, r3
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060aa:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <UART_SetConfig+0x2d4>)
 80060ac:	fba3 2302 	umull	r2, r3, r3, r2
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060b8:	441c      	add	r4, r3
 80060ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060cc:	4642      	mov	r2, r8
 80060ce:	464b      	mov	r3, r9
 80060d0:	1891      	adds	r1, r2, r2
 80060d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060d4:	415b      	adcs	r3, r3
 80060d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060dc:	4641      	mov	r1, r8
 80060de:	1851      	adds	r1, r2, r1
 80060e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80060e2:	4649      	mov	r1, r9
 80060e4:	414b      	adcs	r3, r1
 80060e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060f4:	4659      	mov	r1, fp
 80060f6:	00cb      	lsls	r3, r1, #3
 80060f8:	4651      	mov	r1, sl
 80060fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060fe:	4651      	mov	r1, sl
 8006100:	00ca      	lsls	r2, r1, #3
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	4603      	mov	r3, r0
 8006108:	4642      	mov	r2, r8
 800610a:	189b      	adds	r3, r3, r2
 800610c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006110:	464b      	mov	r3, r9
 8006112:	460a      	mov	r2, r1
 8006114:	eb42 0303 	adc.w	r3, r2, r3
 8006118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006128:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800612c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006130:	460b      	mov	r3, r1
 8006132:	18db      	adds	r3, r3, r3
 8006134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006136:	4613      	mov	r3, r2
 8006138:	eb42 0303 	adc.w	r3, r2, r3
 800613c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800613e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006146:	f7fa fd2b 	bl	8000ba0 <__aeabi_uldivmod>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <UART_SetConfig+0x2d4>)
 8006150:	fba3 1302 	umull	r1, r3, r3, r2
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	2164      	movs	r1, #100	@ 0x64
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	3332      	adds	r3, #50	@ 0x32
 8006162:	4a08      	ldr	r2, [pc, #32]	@ (8006184 <UART_SetConfig+0x2d4>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f003 0207 	and.w	r2, r3, #7
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4422      	add	r2, r4
 8006176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006178:	e106      	b.n	8006388 <UART_SetConfig+0x4d8>
 800617a:	bf00      	nop
 800617c:	40011000 	.word	0x40011000
 8006180:	40011400 	.word	0x40011400
 8006184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800618c:	2200      	movs	r2, #0
 800618e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006192:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800619a:	4642      	mov	r2, r8
 800619c:	464b      	mov	r3, r9
 800619e:	1891      	adds	r1, r2, r2
 80061a0:	6239      	str	r1, [r7, #32]
 80061a2:	415b      	adcs	r3, r3
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061aa:	4641      	mov	r1, r8
 80061ac:	1854      	adds	r4, r2, r1
 80061ae:	4649      	mov	r1, r9
 80061b0:	eb43 0501 	adc.w	r5, r3, r1
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	00eb      	lsls	r3, r5, #3
 80061be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061c2:	00e2      	lsls	r2, r4, #3
 80061c4:	4614      	mov	r4, r2
 80061c6:	461d      	mov	r5, r3
 80061c8:	4643      	mov	r3, r8
 80061ca:	18e3      	adds	r3, r4, r3
 80061cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061d0:	464b      	mov	r3, r9
 80061d2:	eb45 0303 	adc.w	r3, r5, r3
 80061d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061f6:	4629      	mov	r1, r5
 80061f8:	008b      	lsls	r3, r1, #2
 80061fa:	4621      	mov	r1, r4
 80061fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006200:	4621      	mov	r1, r4
 8006202:	008a      	lsls	r2, r1, #2
 8006204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006208:	f7fa fcca 	bl	8000ba0 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4b60      	ldr	r3, [pc, #384]	@ (8006394 <UART_SetConfig+0x4e4>)
 8006212:	fba3 2302 	umull	r2, r3, r3, r2
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	011c      	lsls	r4, r3, #4
 800621a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006224:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800622c:	4642      	mov	r2, r8
 800622e:	464b      	mov	r3, r9
 8006230:	1891      	adds	r1, r2, r2
 8006232:	61b9      	str	r1, [r7, #24]
 8006234:	415b      	adcs	r3, r3
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800623c:	4641      	mov	r1, r8
 800623e:	1851      	adds	r1, r2, r1
 8006240:	6139      	str	r1, [r7, #16]
 8006242:	4649      	mov	r1, r9
 8006244:	414b      	adcs	r3, r1
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006254:	4659      	mov	r1, fp
 8006256:	00cb      	lsls	r3, r1, #3
 8006258:	4651      	mov	r1, sl
 800625a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800625e:	4651      	mov	r1, sl
 8006260:	00ca      	lsls	r2, r1, #3
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	4603      	mov	r3, r0
 8006268:	4642      	mov	r2, r8
 800626a:	189b      	adds	r3, r3, r2
 800626c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006270:	464b      	mov	r3, r9
 8006272:	460a      	mov	r2, r1
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006286:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006294:	4649      	mov	r1, r9
 8006296:	008b      	lsls	r3, r1, #2
 8006298:	4641      	mov	r1, r8
 800629a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800629e:	4641      	mov	r1, r8
 80062a0:	008a      	lsls	r2, r1, #2
 80062a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062a6:	f7fa fc7b 	bl	8000ba0 <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	4b38      	ldr	r3, [pc, #224]	@ (8006394 <UART_SetConfig+0x4e4>)
 80062b2:	fba3 2301 	umull	r2, r3, r3, r1
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	2264      	movs	r2, #100	@ 0x64
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	1acb      	subs	r3, r1, r3
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	3332      	adds	r3, #50	@ 0x32
 80062c4:	4a33      	ldr	r2, [pc, #204]	@ (8006394 <UART_SetConfig+0x4e4>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062d0:	441c      	add	r4, r3
 80062d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d6:	2200      	movs	r2, #0
 80062d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80062da:	677a      	str	r2, [r7, #116]	@ 0x74
 80062dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062e0:	4642      	mov	r2, r8
 80062e2:	464b      	mov	r3, r9
 80062e4:	1891      	adds	r1, r2, r2
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	415b      	adcs	r3, r3
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062f0:	4641      	mov	r1, r8
 80062f2:	1851      	adds	r1, r2, r1
 80062f4:	6039      	str	r1, [r7, #0]
 80062f6:	4649      	mov	r1, r9
 80062f8:	414b      	adcs	r3, r1
 80062fa:	607b      	str	r3, [r7, #4]
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006308:	4659      	mov	r1, fp
 800630a:	00cb      	lsls	r3, r1, #3
 800630c:	4651      	mov	r1, sl
 800630e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006312:	4651      	mov	r1, sl
 8006314:	00ca      	lsls	r2, r1, #3
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	4603      	mov	r3, r0
 800631c:	4642      	mov	r2, r8
 800631e:	189b      	adds	r3, r3, r2
 8006320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006322:	464b      	mov	r3, r9
 8006324:	460a      	mov	r2, r1
 8006326:	eb42 0303 	adc.w	r3, r2, r3
 800632a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	663b      	str	r3, [r7, #96]	@ 0x60
 8006336:	667a      	str	r2, [r7, #100]	@ 0x64
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006344:	4649      	mov	r1, r9
 8006346:	008b      	lsls	r3, r1, #2
 8006348:	4641      	mov	r1, r8
 800634a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800634e:	4641      	mov	r1, r8
 8006350:	008a      	lsls	r2, r1, #2
 8006352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006356:	f7fa fc23 	bl	8000ba0 <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <UART_SetConfig+0x4e4>)
 8006360:	fba3 1302 	umull	r1, r3, r3, r2
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	2164      	movs	r1, #100	@ 0x64
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	3332      	adds	r3, #50	@ 0x32
 8006372:	4a08      	ldr	r2, [pc, #32]	@ (8006394 <UART_SetConfig+0x4e4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4422      	add	r2, r4
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	bf00      	nop
 800638a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800638e:	46bd      	mov	sp, r7
 8006390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006394:	51eb851f 	.word	0x51eb851f

08006398 <memset>:
 8006398:	4402      	add	r2, r0
 800639a:	4603      	mov	r3, r0
 800639c:	4293      	cmp	r3, r2
 800639e:	d100      	bne.n	80063a2 <memset+0xa>
 80063a0:	4770      	bx	lr
 80063a2:	f803 1b01 	strb.w	r1, [r3], #1
 80063a6:	e7f9      	b.n	800639c <memset+0x4>

080063a8 <__errno>:
 80063a8:	4b01      	ldr	r3, [pc, #4]	@ (80063b0 <__errno+0x8>)
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	2000000c 	.word	0x2000000c

080063b4 <__libc_init_array>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4d0d      	ldr	r5, [pc, #52]	@ (80063ec <__libc_init_array+0x38>)
 80063b8:	4c0d      	ldr	r4, [pc, #52]	@ (80063f0 <__libc_init_array+0x3c>)
 80063ba:	1b64      	subs	r4, r4, r5
 80063bc:	10a4      	asrs	r4, r4, #2
 80063be:	2600      	movs	r6, #0
 80063c0:	42a6      	cmp	r6, r4
 80063c2:	d109      	bne.n	80063d8 <__libc_init_array+0x24>
 80063c4:	4d0b      	ldr	r5, [pc, #44]	@ (80063f4 <__libc_init_array+0x40>)
 80063c6:	4c0c      	ldr	r4, [pc, #48]	@ (80063f8 <__libc_init_array+0x44>)
 80063c8:	f002 f946 	bl	8008658 <_init>
 80063cc:	1b64      	subs	r4, r4, r5
 80063ce:	10a4      	asrs	r4, r4, #2
 80063d0:	2600      	movs	r6, #0
 80063d2:	42a6      	cmp	r6, r4
 80063d4:	d105      	bne.n	80063e2 <__libc_init_array+0x2e>
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063dc:	4798      	blx	r3
 80063de:	3601      	adds	r6, #1
 80063e0:	e7ee      	b.n	80063c0 <__libc_init_array+0xc>
 80063e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e6:	4798      	blx	r3
 80063e8:	3601      	adds	r6, #1
 80063ea:	e7f2      	b.n	80063d2 <__libc_init_array+0x1e>
 80063ec:	080088e0 	.word	0x080088e0
 80063f0:	080088e0 	.word	0x080088e0
 80063f4:	080088e0 	.word	0x080088e0
 80063f8:	080088e4 	.word	0x080088e4

080063fc <memcpy>:
 80063fc:	440a      	add	r2, r1
 80063fe:	4291      	cmp	r1, r2
 8006400:	f100 33ff 	add.w	r3, r0, #4294967295
 8006404:	d100      	bne.n	8006408 <memcpy+0xc>
 8006406:	4770      	bx	lr
 8006408:	b510      	push	{r4, lr}
 800640a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800640e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006412:	4291      	cmp	r1, r2
 8006414:	d1f9      	bne.n	800640a <memcpy+0xe>
 8006416:	bd10      	pop	{r4, pc}

08006418 <pow>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	ed2d 8b02 	vpush	{d8}
 800641e:	eeb0 8a40 	vmov.f32	s16, s0
 8006422:	eef0 8a60 	vmov.f32	s17, s1
 8006426:	ec55 4b11 	vmov	r4, r5, d1
 800642a:	f000 fd45 	bl	8006eb8 <__ieee754_pow>
 800642e:	4622      	mov	r2, r4
 8006430:	462b      	mov	r3, r5
 8006432:	4620      	mov	r0, r4
 8006434:	4629      	mov	r1, r5
 8006436:	ec57 6b10 	vmov	r6, r7, d0
 800643a:	f7fa fb23 	bl	8000a84 <__aeabi_dcmpun>
 800643e:	2800      	cmp	r0, #0
 8006440:	d13b      	bne.n	80064ba <pow+0xa2>
 8006442:	ec51 0b18 	vmov	r0, r1, d8
 8006446:	2200      	movs	r2, #0
 8006448:	2300      	movs	r3, #0
 800644a:	f7fa fae9 	bl	8000a20 <__aeabi_dcmpeq>
 800644e:	b1b8      	cbz	r0, 8006480 <pow+0x68>
 8006450:	2200      	movs	r2, #0
 8006452:	2300      	movs	r3, #0
 8006454:	4620      	mov	r0, r4
 8006456:	4629      	mov	r1, r5
 8006458:	f7fa fae2 	bl	8000a20 <__aeabi_dcmpeq>
 800645c:	2800      	cmp	r0, #0
 800645e:	d146      	bne.n	80064ee <pow+0xd6>
 8006460:	ec45 4b10 	vmov	d0, r4, r5
 8006464:	f000 fabc 	bl	80069e0 <finite>
 8006468:	b338      	cbz	r0, 80064ba <pow+0xa2>
 800646a:	2200      	movs	r2, #0
 800646c:	2300      	movs	r3, #0
 800646e:	4620      	mov	r0, r4
 8006470:	4629      	mov	r1, r5
 8006472:	f7fa fadf 	bl	8000a34 <__aeabi_dcmplt>
 8006476:	b300      	cbz	r0, 80064ba <pow+0xa2>
 8006478:	f7ff ff96 	bl	80063a8 <__errno>
 800647c:	2322      	movs	r3, #34	@ 0x22
 800647e:	e01b      	b.n	80064b8 <pow+0xa0>
 8006480:	ec47 6b10 	vmov	d0, r6, r7
 8006484:	f000 faac 	bl	80069e0 <finite>
 8006488:	b9e0      	cbnz	r0, 80064c4 <pow+0xac>
 800648a:	eeb0 0a48 	vmov.f32	s0, s16
 800648e:	eef0 0a68 	vmov.f32	s1, s17
 8006492:	f000 faa5 	bl	80069e0 <finite>
 8006496:	b1a8      	cbz	r0, 80064c4 <pow+0xac>
 8006498:	ec45 4b10 	vmov	d0, r4, r5
 800649c:	f000 faa0 	bl	80069e0 <finite>
 80064a0:	b180      	cbz	r0, 80064c4 <pow+0xac>
 80064a2:	4632      	mov	r2, r6
 80064a4:	463b      	mov	r3, r7
 80064a6:	4630      	mov	r0, r6
 80064a8:	4639      	mov	r1, r7
 80064aa:	f7fa faeb 	bl	8000a84 <__aeabi_dcmpun>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d0e2      	beq.n	8006478 <pow+0x60>
 80064b2:	f7ff ff79 	bl	80063a8 <__errno>
 80064b6:	2321      	movs	r3, #33	@ 0x21
 80064b8:	6003      	str	r3, [r0, #0]
 80064ba:	ecbd 8b02 	vpop	{d8}
 80064be:	ec47 6b10 	vmov	d0, r6, r7
 80064c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c4:	2200      	movs	r2, #0
 80064c6:	2300      	movs	r3, #0
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7fa faa8 	bl	8000a20 <__aeabi_dcmpeq>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d0f2      	beq.n	80064ba <pow+0xa2>
 80064d4:	eeb0 0a48 	vmov.f32	s0, s16
 80064d8:	eef0 0a68 	vmov.f32	s1, s17
 80064dc:	f000 fa80 	bl	80069e0 <finite>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d0ea      	beq.n	80064ba <pow+0xa2>
 80064e4:	ec45 4b10 	vmov	d0, r4, r5
 80064e8:	f000 fa7a 	bl	80069e0 <finite>
 80064ec:	e7c3      	b.n	8006476 <pow+0x5e>
 80064ee:	4f01      	ldr	r7, [pc, #4]	@ (80064f4 <pow+0xdc>)
 80064f0:	2600      	movs	r6, #0
 80064f2:	e7e2      	b.n	80064ba <pow+0xa2>
 80064f4:	3ff00000 	.word	0x3ff00000

080064f8 <sqrt>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	ed2d 8b02 	vpush	{d8}
 80064fe:	ec55 4b10 	vmov	r4, r5, d0
 8006502:	f000 fa79 	bl	80069f8 <__ieee754_sqrt>
 8006506:	4622      	mov	r2, r4
 8006508:	462b      	mov	r3, r5
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	eeb0 8a40 	vmov.f32	s16, s0
 8006512:	eef0 8a60 	vmov.f32	s17, s1
 8006516:	f7fa fab5 	bl	8000a84 <__aeabi_dcmpun>
 800651a:	b990      	cbnz	r0, 8006542 <sqrt+0x4a>
 800651c:	2200      	movs	r2, #0
 800651e:	2300      	movs	r3, #0
 8006520:	4620      	mov	r0, r4
 8006522:	4629      	mov	r1, r5
 8006524:	f7fa fa86 	bl	8000a34 <__aeabi_dcmplt>
 8006528:	b158      	cbz	r0, 8006542 <sqrt+0x4a>
 800652a:	f7ff ff3d 	bl	80063a8 <__errno>
 800652e:	2321      	movs	r3, #33	@ 0x21
 8006530:	6003      	str	r3, [r0, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	2300      	movs	r3, #0
 8006536:	4610      	mov	r0, r2
 8006538:	4619      	mov	r1, r3
 800653a:	f7fa f933 	bl	80007a4 <__aeabi_ddiv>
 800653e:	ec41 0b18 	vmov	d8, r0, r1
 8006542:	eeb0 0a48 	vmov.f32	s0, s16
 8006546:	eef0 0a68 	vmov.f32	s1, s17
 800654a:	ecbd 8b02 	vpop	{d8}
 800654e:	bd38      	pop	{r3, r4, r5, pc}

08006550 <atan>:
 8006550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	ec55 4b10 	vmov	r4, r5, d0
 8006558:	4bbf      	ldr	r3, [pc, #764]	@ (8006858 <atan+0x308>)
 800655a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800655e:	429e      	cmp	r6, r3
 8006560:	46ab      	mov	fp, r5
 8006562:	d918      	bls.n	8006596 <atan+0x46>
 8006564:	4bbd      	ldr	r3, [pc, #756]	@ (800685c <atan+0x30c>)
 8006566:	429e      	cmp	r6, r3
 8006568:	d801      	bhi.n	800656e <atan+0x1e>
 800656a:	d109      	bne.n	8006580 <atan+0x30>
 800656c:	b144      	cbz	r4, 8006580 <atan+0x30>
 800656e:	4622      	mov	r2, r4
 8006570:	462b      	mov	r3, r5
 8006572:	4620      	mov	r0, r4
 8006574:	4629      	mov	r1, r5
 8006576:	f7f9 fe35 	bl	80001e4 <__adddf3>
 800657a:	4604      	mov	r4, r0
 800657c:	460d      	mov	r5, r1
 800657e:	e006      	b.n	800658e <atan+0x3e>
 8006580:	f1bb 0f00 	cmp.w	fp, #0
 8006584:	f340 812b 	ble.w	80067de <atan+0x28e>
 8006588:	a597      	add	r5, pc, #604	@ (adr r5, 80067e8 <atan+0x298>)
 800658a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800658e:	ec45 4b10 	vmov	d0, r4, r5
 8006592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	4bb2      	ldr	r3, [pc, #712]	@ (8006860 <atan+0x310>)
 8006598:	429e      	cmp	r6, r3
 800659a:	d813      	bhi.n	80065c4 <atan+0x74>
 800659c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80065a0:	429e      	cmp	r6, r3
 80065a2:	d80c      	bhi.n	80065be <atan+0x6e>
 80065a4:	a392      	add	r3, pc, #584	@ (adr r3, 80067f0 <atan+0x2a0>)
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7f9 fe19 	bl	80001e4 <__adddf3>
 80065b2:	4bac      	ldr	r3, [pc, #688]	@ (8006864 <atan+0x314>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	f7fa fa5b 	bl	8000a70 <__aeabi_dcmpgt>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d1e7      	bne.n	800658e <atan+0x3e>
 80065be:	f04f 3aff 	mov.w	sl, #4294967295
 80065c2:	e029      	b.n	8006618 <atan+0xc8>
 80065c4:	f000 f9b0 	bl	8006928 <fabs>
 80065c8:	4ba7      	ldr	r3, [pc, #668]	@ (8006868 <atan+0x318>)
 80065ca:	429e      	cmp	r6, r3
 80065cc:	ec55 4b10 	vmov	r4, r5, d0
 80065d0:	f200 80bc 	bhi.w	800674c <atan+0x1fc>
 80065d4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80065d8:	429e      	cmp	r6, r3
 80065da:	f200 809e 	bhi.w	800671a <atan+0x1ca>
 80065de:	4622      	mov	r2, r4
 80065e0:	462b      	mov	r3, r5
 80065e2:	4620      	mov	r0, r4
 80065e4:	4629      	mov	r1, r5
 80065e6:	f7f9 fdfd 	bl	80001e4 <__adddf3>
 80065ea:	4b9e      	ldr	r3, [pc, #632]	@ (8006864 <atan+0x314>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	f7f9 fdf7 	bl	80001e0 <__aeabi_dsub>
 80065f2:	2200      	movs	r2, #0
 80065f4:	4606      	mov	r6, r0
 80065f6:	460f      	mov	r7, r1
 80065f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80065fc:	4620      	mov	r0, r4
 80065fe:	4629      	mov	r1, r5
 8006600:	f7f9 fdf0 	bl	80001e4 <__adddf3>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f7fa f8ca 	bl	80007a4 <__aeabi_ddiv>
 8006610:	f04f 0a00 	mov.w	sl, #0
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	4622      	mov	r2, r4
 800661a:	462b      	mov	r3, r5
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	f7f9 ff96 	bl	8000550 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4680      	mov	r8, r0
 800662a:	4689      	mov	r9, r1
 800662c:	f7f9 ff90 	bl	8000550 <__aeabi_dmul>
 8006630:	a371      	add	r3, pc, #452	@ (adr r3, 80067f8 <atan+0x2a8>)
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	4606      	mov	r6, r0
 8006638:	460f      	mov	r7, r1
 800663a:	f7f9 ff89 	bl	8000550 <__aeabi_dmul>
 800663e:	a370      	add	r3, pc, #448	@ (adr r3, 8006800 <atan+0x2b0>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f7f9 fdce 	bl	80001e4 <__adddf3>
 8006648:	4632      	mov	r2, r6
 800664a:	463b      	mov	r3, r7
 800664c:	f7f9 ff80 	bl	8000550 <__aeabi_dmul>
 8006650:	a36d      	add	r3, pc, #436	@ (adr r3, 8006808 <atan+0x2b8>)
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	f7f9 fdc5 	bl	80001e4 <__adddf3>
 800665a:	4632      	mov	r2, r6
 800665c:	463b      	mov	r3, r7
 800665e:	f7f9 ff77 	bl	8000550 <__aeabi_dmul>
 8006662:	a36b      	add	r3, pc, #428	@ (adr r3, 8006810 <atan+0x2c0>)
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f7f9 fdbc 	bl	80001e4 <__adddf3>
 800666c:	4632      	mov	r2, r6
 800666e:	463b      	mov	r3, r7
 8006670:	f7f9 ff6e 	bl	8000550 <__aeabi_dmul>
 8006674:	a368      	add	r3, pc, #416	@ (adr r3, 8006818 <atan+0x2c8>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f7f9 fdb3 	bl	80001e4 <__adddf3>
 800667e:	4632      	mov	r2, r6
 8006680:	463b      	mov	r3, r7
 8006682:	f7f9 ff65 	bl	8000550 <__aeabi_dmul>
 8006686:	a366      	add	r3, pc, #408	@ (adr r3, 8006820 <atan+0x2d0>)
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f7f9 fdaa 	bl	80001e4 <__adddf3>
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	f7f9 ff5c 	bl	8000550 <__aeabi_dmul>
 8006698:	a363      	add	r3, pc, #396	@ (adr r3, 8006828 <atan+0x2d8>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	4680      	mov	r8, r0
 80066a0:	4689      	mov	r9, r1
 80066a2:	4630      	mov	r0, r6
 80066a4:	4639      	mov	r1, r7
 80066a6:	f7f9 ff53 	bl	8000550 <__aeabi_dmul>
 80066aa:	a361      	add	r3, pc, #388	@ (adr r3, 8006830 <atan+0x2e0>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f7f9 fd96 	bl	80001e0 <__aeabi_dsub>
 80066b4:	4632      	mov	r2, r6
 80066b6:	463b      	mov	r3, r7
 80066b8:	f7f9 ff4a 	bl	8000550 <__aeabi_dmul>
 80066bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8006838 <atan+0x2e8>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f7f9 fd8d 	bl	80001e0 <__aeabi_dsub>
 80066c6:	4632      	mov	r2, r6
 80066c8:	463b      	mov	r3, r7
 80066ca:	f7f9 ff41 	bl	8000550 <__aeabi_dmul>
 80066ce:	a35c      	add	r3, pc, #368	@ (adr r3, 8006840 <atan+0x2f0>)
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	f7f9 fd84 	bl	80001e0 <__aeabi_dsub>
 80066d8:	4632      	mov	r2, r6
 80066da:	463b      	mov	r3, r7
 80066dc:	f7f9 ff38 	bl	8000550 <__aeabi_dmul>
 80066e0:	a359      	add	r3, pc, #356	@ (adr r3, 8006848 <atan+0x2f8>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f7f9 fd7b 	bl	80001e0 <__aeabi_dsub>
 80066ea:	4632      	mov	r2, r6
 80066ec:	463b      	mov	r3, r7
 80066ee:	f7f9 ff2f 	bl	8000550 <__aeabi_dmul>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4640      	mov	r0, r8
 80066f8:	4649      	mov	r1, r9
 80066fa:	f7f9 fd73 	bl	80001e4 <__adddf3>
 80066fe:	4622      	mov	r2, r4
 8006700:	462b      	mov	r3, r5
 8006702:	f7f9 ff25 	bl	8000550 <__aeabi_dmul>
 8006706:	f1ba 3fff 	cmp.w	sl, #4294967295
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	d148      	bne.n	80067a2 <atan+0x252>
 8006710:	4620      	mov	r0, r4
 8006712:	4629      	mov	r1, r5
 8006714:	f7f9 fd64 	bl	80001e0 <__aeabi_dsub>
 8006718:	e72f      	b.n	800657a <atan+0x2a>
 800671a:	4b52      	ldr	r3, [pc, #328]	@ (8006864 <atan+0x314>)
 800671c:	2200      	movs	r2, #0
 800671e:	4620      	mov	r0, r4
 8006720:	4629      	mov	r1, r5
 8006722:	f7f9 fd5d 	bl	80001e0 <__aeabi_dsub>
 8006726:	4b4f      	ldr	r3, [pc, #316]	@ (8006864 <atan+0x314>)
 8006728:	4606      	mov	r6, r0
 800672a:	460f      	mov	r7, r1
 800672c:	2200      	movs	r2, #0
 800672e:	4620      	mov	r0, r4
 8006730:	4629      	mov	r1, r5
 8006732:	f7f9 fd57 	bl	80001e4 <__adddf3>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4630      	mov	r0, r6
 800673c:	4639      	mov	r1, r7
 800673e:	f7fa f831 	bl	80007a4 <__aeabi_ddiv>
 8006742:	f04f 0a01 	mov.w	sl, #1
 8006746:	4604      	mov	r4, r0
 8006748:	460d      	mov	r5, r1
 800674a:	e765      	b.n	8006618 <atan+0xc8>
 800674c:	4b47      	ldr	r3, [pc, #284]	@ (800686c <atan+0x31c>)
 800674e:	429e      	cmp	r6, r3
 8006750:	d21c      	bcs.n	800678c <atan+0x23c>
 8006752:	4b47      	ldr	r3, [pc, #284]	@ (8006870 <atan+0x320>)
 8006754:	2200      	movs	r2, #0
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7f9 fd41 	bl	80001e0 <__aeabi_dsub>
 800675e:	4b44      	ldr	r3, [pc, #272]	@ (8006870 <atan+0x320>)
 8006760:	4606      	mov	r6, r0
 8006762:	460f      	mov	r7, r1
 8006764:	2200      	movs	r2, #0
 8006766:	4620      	mov	r0, r4
 8006768:	4629      	mov	r1, r5
 800676a:	f7f9 fef1 	bl	8000550 <__aeabi_dmul>
 800676e:	4b3d      	ldr	r3, [pc, #244]	@ (8006864 <atan+0x314>)
 8006770:	2200      	movs	r2, #0
 8006772:	f7f9 fd37 	bl	80001e4 <__adddf3>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4630      	mov	r0, r6
 800677c:	4639      	mov	r1, r7
 800677e:	f7fa f811 	bl	80007a4 <__aeabi_ddiv>
 8006782:	f04f 0a02 	mov.w	sl, #2
 8006786:	4604      	mov	r4, r0
 8006788:	460d      	mov	r5, r1
 800678a:	e745      	b.n	8006618 <atan+0xc8>
 800678c:	4622      	mov	r2, r4
 800678e:	462b      	mov	r3, r5
 8006790:	4938      	ldr	r1, [pc, #224]	@ (8006874 <atan+0x324>)
 8006792:	2000      	movs	r0, #0
 8006794:	f7fa f806 	bl	80007a4 <__aeabi_ddiv>
 8006798:	f04f 0a03 	mov.w	sl, #3
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	e73a      	b.n	8006618 <atan+0xc8>
 80067a2:	4b35      	ldr	r3, [pc, #212]	@ (8006878 <atan+0x328>)
 80067a4:	4e35      	ldr	r6, [pc, #212]	@ (800687c <atan+0x32c>)
 80067a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fd17 	bl	80001e0 <__aeabi_dsub>
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	f7f9 fd13 	bl	80001e0 <__aeabi_dsub>
 80067ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80067c6:	f7f9 fd0b 	bl	80001e0 <__aeabi_dsub>
 80067ca:	f1bb 0f00 	cmp.w	fp, #0
 80067ce:	4604      	mov	r4, r0
 80067d0:	460d      	mov	r5, r1
 80067d2:	f6bf aedc 	bge.w	800658e <atan+0x3e>
 80067d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80067da:	461d      	mov	r5, r3
 80067dc:	e6d7      	b.n	800658e <atan+0x3e>
 80067de:	a51c      	add	r5, pc, #112	@ (adr r5, 8006850 <atan+0x300>)
 80067e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067e4:	e6d3      	b.n	800658e <atan+0x3e>
 80067e6:	bf00      	nop
 80067e8:	54442d18 	.word	0x54442d18
 80067ec:	3ff921fb 	.word	0x3ff921fb
 80067f0:	8800759c 	.word	0x8800759c
 80067f4:	7e37e43c 	.word	0x7e37e43c
 80067f8:	e322da11 	.word	0xe322da11
 80067fc:	3f90ad3a 	.word	0x3f90ad3a
 8006800:	24760deb 	.word	0x24760deb
 8006804:	3fa97b4b 	.word	0x3fa97b4b
 8006808:	a0d03d51 	.word	0xa0d03d51
 800680c:	3fb10d66 	.word	0x3fb10d66
 8006810:	c54c206e 	.word	0xc54c206e
 8006814:	3fb745cd 	.word	0x3fb745cd
 8006818:	920083ff 	.word	0x920083ff
 800681c:	3fc24924 	.word	0x3fc24924
 8006820:	5555550d 	.word	0x5555550d
 8006824:	3fd55555 	.word	0x3fd55555
 8006828:	2c6a6c2f 	.word	0x2c6a6c2f
 800682c:	bfa2b444 	.word	0xbfa2b444
 8006830:	52defd9a 	.word	0x52defd9a
 8006834:	3fadde2d 	.word	0x3fadde2d
 8006838:	af749a6d 	.word	0xaf749a6d
 800683c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006840:	fe231671 	.word	0xfe231671
 8006844:	3fbc71c6 	.word	0x3fbc71c6
 8006848:	9998ebc4 	.word	0x9998ebc4
 800684c:	3fc99999 	.word	0x3fc99999
 8006850:	54442d18 	.word	0x54442d18
 8006854:	bff921fb 	.word	0xbff921fb
 8006858:	440fffff 	.word	0x440fffff
 800685c:	7ff00000 	.word	0x7ff00000
 8006860:	3fdbffff 	.word	0x3fdbffff
 8006864:	3ff00000 	.word	0x3ff00000
 8006868:	3ff2ffff 	.word	0x3ff2ffff
 800686c:	40038000 	.word	0x40038000
 8006870:	3ff80000 	.word	0x3ff80000
 8006874:	bff00000 	.word	0xbff00000
 8006878:	08008690 	.word	0x08008690
 800687c:	080086b0 	.word	0x080086b0

08006880 <cos>:
 8006880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006882:	ec53 2b10 	vmov	r2, r3, d0
 8006886:	4826      	ldr	r0, [pc, #152]	@ (8006920 <cos+0xa0>)
 8006888:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800688c:	4281      	cmp	r1, r0
 800688e:	d806      	bhi.n	800689e <cos+0x1e>
 8006890:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006918 <cos+0x98>
 8006894:	b005      	add	sp, #20
 8006896:	f85d eb04 	ldr.w	lr, [sp], #4
 800689a:	f000 b989 	b.w	8006bb0 <__kernel_cos>
 800689e:	4821      	ldr	r0, [pc, #132]	@ (8006924 <cos+0xa4>)
 80068a0:	4281      	cmp	r1, r0
 80068a2:	d908      	bls.n	80068b6 <cos+0x36>
 80068a4:	4610      	mov	r0, r2
 80068a6:	4619      	mov	r1, r3
 80068a8:	f7f9 fc9a 	bl	80001e0 <__aeabi_dsub>
 80068ac:	ec41 0b10 	vmov	d0, r0, r1
 80068b0:	b005      	add	sp, #20
 80068b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80068b6:	4668      	mov	r0, sp
 80068b8:	f001 f842 	bl	8007940 <__ieee754_rem_pio2>
 80068bc:	f000 0003 	and.w	r0, r0, #3
 80068c0:	2801      	cmp	r0, #1
 80068c2:	d00b      	beq.n	80068dc <cos+0x5c>
 80068c4:	2802      	cmp	r0, #2
 80068c6:	d015      	beq.n	80068f4 <cos+0x74>
 80068c8:	b9d8      	cbnz	r0, 8006902 <cos+0x82>
 80068ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068ce:	ed9d 0b00 	vldr	d0, [sp]
 80068d2:	f000 f96d 	bl	8006bb0 <__kernel_cos>
 80068d6:	ec51 0b10 	vmov	r0, r1, d0
 80068da:	e7e7      	b.n	80068ac <cos+0x2c>
 80068dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068e0:	ed9d 0b00 	vldr	d0, [sp]
 80068e4:	f000 fa2c 	bl	8006d40 <__kernel_sin>
 80068e8:	ec53 2b10 	vmov	r2, r3, d0
 80068ec:	4610      	mov	r0, r2
 80068ee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80068f2:	e7db      	b.n	80068ac <cos+0x2c>
 80068f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068f8:	ed9d 0b00 	vldr	d0, [sp]
 80068fc:	f000 f958 	bl	8006bb0 <__kernel_cos>
 8006900:	e7f2      	b.n	80068e8 <cos+0x68>
 8006902:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006906:	ed9d 0b00 	vldr	d0, [sp]
 800690a:	2001      	movs	r0, #1
 800690c:	f000 fa18 	bl	8006d40 <__kernel_sin>
 8006910:	e7e1      	b.n	80068d6 <cos+0x56>
 8006912:	bf00      	nop
 8006914:	f3af 8000 	nop.w
	...
 8006920:	3fe921fb 	.word	0x3fe921fb
 8006924:	7fefffff 	.word	0x7fefffff

08006928 <fabs>:
 8006928:	ec51 0b10 	vmov	r0, r1, d0
 800692c:	4602      	mov	r2, r0
 800692e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006932:	ec43 2b10 	vmov	d0, r2, r3
 8006936:	4770      	bx	lr

08006938 <sin>:
 8006938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800693a:	ec53 2b10 	vmov	r2, r3, d0
 800693e:	4826      	ldr	r0, [pc, #152]	@ (80069d8 <sin+0xa0>)
 8006940:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006944:	4281      	cmp	r1, r0
 8006946:	d807      	bhi.n	8006958 <sin+0x20>
 8006948:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80069d0 <sin+0x98>
 800694c:	2000      	movs	r0, #0
 800694e:	b005      	add	sp, #20
 8006950:	f85d eb04 	ldr.w	lr, [sp], #4
 8006954:	f000 b9f4 	b.w	8006d40 <__kernel_sin>
 8006958:	4820      	ldr	r0, [pc, #128]	@ (80069dc <sin+0xa4>)
 800695a:	4281      	cmp	r1, r0
 800695c:	d908      	bls.n	8006970 <sin+0x38>
 800695e:	4610      	mov	r0, r2
 8006960:	4619      	mov	r1, r3
 8006962:	f7f9 fc3d 	bl	80001e0 <__aeabi_dsub>
 8006966:	ec41 0b10 	vmov	d0, r0, r1
 800696a:	b005      	add	sp, #20
 800696c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006970:	4668      	mov	r0, sp
 8006972:	f000 ffe5 	bl	8007940 <__ieee754_rem_pio2>
 8006976:	f000 0003 	and.w	r0, r0, #3
 800697a:	2801      	cmp	r0, #1
 800697c:	d00c      	beq.n	8006998 <sin+0x60>
 800697e:	2802      	cmp	r0, #2
 8006980:	d011      	beq.n	80069a6 <sin+0x6e>
 8006982:	b9e8      	cbnz	r0, 80069c0 <sin+0x88>
 8006984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006988:	ed9d 0b00 	vldr	d0, [sp]
 800698c:	2001      	movs	r0, #1
 800698e:	f000 f9d7 	bl	8006d40 <__kernel_sin>
 8006992:	ec51 0b10 	vmov	r0, r1, d0
 8006996:	e7e6      	b.n	8006966 <sin+0x2e>
 8006998:	ed9d 1b02 	vldr	d1, [sp, #8]
 800699c:	ed9d 0b00 	vldr	d0, [sp]
 80069a0:	f000 f906 	bl	8006bb0 <__kernel_cos>
 80069a4:	e7f5      	b.n	8006992 <sin+0x5a>
 80069a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069aa:	ed9d 0b00 	vldr	d0, [sp]
 80069ae:	2001      	movs	r0, #1
 80069b0:	f000 f9c6 	bl	8006d40 <__kernel_sin>
 80069b4:	ec53 2b10 	vmov	r2, r3, d0
 80069b8:	4610      	mov	r0, r2
 80069ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80069be:	e7d2      	b.n	8006966 <sin+0x2e>
 80069c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069c4:	ed9d 0b00 	vldr	d0, [sp]
 80069c8:	f000 f8f2 	bl	8006bb0 <__kernel_cos>
 80069cc:	e7f2      	b.n	80069b4 <sin+0x7c>
 80069ce:	bf00      	nop
	...
 80069d8:	3fe921fb 	.word	0x3fe921fb
 80069dc:	7fefffff 	.word	0x7fefffff

080069e0 <finite>:
 80069e0:	b082      	sub	sp, #8
 80069e2:	ed8d 0b00 	vstr	d0, [sp]
 80069e6:	9801      	ldr	r0, [sp, #4]
 80069e8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80069ec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80069f0:	0fc0      	lsrs	r0, r0, #31
 80069f2:	b002      	add	sp, #8
 80069f4:	4770      	bx	lr
	...

080069f8 <__ieee754_sqrt>:
 80069f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	4a68      	ldr	r2, [pc, #416]	@ (8006ba0 <__ieee754_sqrt+0x1a8>)
 80069fe:	ec55 4b10 	vmov	r4, r5, d0
 8006a02:	43aa      	bics	r2, r5
 8006a04:	462b      	mov	r3, r5
 8006a06:	4621      	mov	r1, r4
 8006a08:	d110      	bne.n	8006a2c <__ieee754_sqrt+0x34>
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	4629      	mov	r1, r5
 8006a10:	f7f9 fd9e 	bl	8000550 <__aeabi_dmul>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4620      	mov	r0, r4
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f7f9 fbe2 	bl	80001e4 <__adddf3>
 8006a20:	4604      	mov	r4, r0
 8006a22:	460d      	mov	r5, r1
 8006a24:	ec45 4b10 	vmov	d0, r4, r5
 8006a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	dc0e      	bgt.n	8006a4e <__ieee754_sqrt+0x56>
 8006a30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006a34:	4322      	orrs	r2, r4
 8006a36:	d0f5      	beq.n	8006a24 <__ieee754_sqrt+0x2c>
 8006a38:	b19d      	cbz	r5, 8006a62 <__ieee754_sqrt+0x6a>
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7f9 fbce 	bl	80001e0 <__aeabi_dsub>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	f7f9 feac 	bl	80007a4 <__aeabi_ddiv>
 8006a4c:	e7e8      	b.n	8006a20 <__ieee754_sqrt+0x28>
 8006a4e:	152a      	asrs	r2, r5, #20
 8006a50:	d115      	bne.n	8006a7e <__ieee754_sqrt+0x86>
 8006a52:	2000      	movs	r0, #0
 8006a54:	e009      	b.n	8006a6a <__ieee754_sqrt+0x72>
 8006a56:	0acb      	lsrs	r3, r1, #11
 8006a58:	3a15      	subs	r2, #21
 8006a5a:	0549      	lsls	r1, r1, #21
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0fa      	beq.n	8006a56 <__ieee754_sqrt+0x5e>
 8006a60:	e7f7      	b.n	8006a52 <__ieee754_sqrt+0x5a>
 8006a62:	462a      	mov	r2, r5
 8006a64:	e7fa      	b.n	8006a5c <__ieee754_sqrt+0x64>
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	3001      	adds	r0, #1
 8006a6a:	02dc      	lsls	r4, r3, #11
 8006a6c:	d5fb      	bpl.n	8006a66 <__ieee754_sqrt+0x6e>
 8006a6e:	1e44      	subs	r4, r0, #1
 8006a70:	1b12      	subs	r2, r2, r4
 8006a72:	f1c0 0420 	rsb	r4, r0, #32
 8006a76:	fa21 f404 	lsr.w	r4, r1, r4
 8006a7a:	4323      	orrs	r3, r4
 8006a7c:	4081      	lsls	r1, r0
 8006a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a82:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a8a:	07d2      	lsls	r2, r2, #31
 8006a8c:	bf5c      	itt	pl
 8006a8e:	005b      	lslpl	r3, r3, #1
 8006a90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006a94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a98:	bf58      	it	pl
 8006a9a:	0049      	lslpl	r1, r1, #1
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006aa2:	106d      	asrs	r5, r5, #1
 8006aa4:	0049      	lsls	r1, r1, #1
 8006aa6:	2016      	movs	r0, #22
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006aae:	1917      	adds	r7, r2, r4
 8006ab0:	429f      	cmp	r7, r3
 8006ab2:	bfde      	ittt	le
 8006ab4:	193a      	addle	r2, r7, r4
 8006ab6:	1bdb      	suble	r3, r3, r7
 8006ab8:	1936      	addle	r6, r6, r4
 8006aba:	0fcf      	lsrs	r7, r1, #31
 8006abc:	3801      	subs	r0, #1
 8006abe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006ac2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006ac6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006aca:	d1f0      	bne.n	8006aae <__ieee754_sqrt+0xb6>
 8006acc:	4604      	mov	r4, r0
 8006ace:	2720      	movs	r7, #32
 8006ad0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	eb00 0e0c 	add.w	lr, r0, ip
 8006ada:	db02      	blt.n	8006ae2 <__ieee754_sqrt+0xea>
 8006adc:	d113      	bne.n	8006b06 <__ieee754_sqrt+0x10e>
 8006ade:	458e      	cmp	lr, r1
 8006ae0:	d811      	bhi.n	8006b06 <__ieee754_sqrt+0x10e>
 8006ae2:	f1be 0f00 	cmp.w	lr, #0
 8006ae6:	eb0e 000c 	add.w	r0, lr, ip
 8006aea:	da42      	bge.n	8006b72 <__ieee754_sqrt+0x17a>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	db40      	blt.n	8006b72 <__ieee754_sqrt+0x17a>
 8006af0:	f102 0801 	add.w	r8, r2, #1
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	458e      	cmp	lr, r1
 8006af8:	bf88      	it	hi
 8006afa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006afe:	eba1 010e 	sub.w	r1, r1, lr
 8006b02:	4464      	add	r4, ip
 8006b04:	4642      	mov	r2, r8
 8006b06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006b0a:	3f01      	subs	r7, #1
 8006b0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006b10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006b14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006b18:	d1dc      	bne.n	8006ad4 <__ieee754_sqrt+0xdc>
 8006b1a:	4319      	orrs	r1, r3
 8006b1c:	d01b      	beq.n	8006b56 <__ieee754_sqrt+0x15e>
 8006b1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006ba4 <__ieee754_sqrt+0x1ac>
 8006b22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006ba8 <__ieee754_sqrt+0x1b0>
 8006b26:	e9da 0100 	ldrd	r0, r1, [sl]
 8006b2a:	e9db 2300 	ldrd	r2, r3, [fp]
 8006b2e:	f7f9 fb57 	bl	80001e0 <__aeabi_dsub>
 8006b32:	e9da 8900 	ldrd	r8, r9, [sl]
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	f7f9 ff83 	bl	8000a48 <__aeabi_dcmple>
 8006b42:	b140      	cbz	r0, 8006b56 <__ieee754_sqrt+0x15e>
 8006b44:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006b48:	e9da 0100 	ldrd	r0, r1, [sl]
 8006b4c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006b50:	d111      	bne.n	8006b76 <__ieee754_sqrt+0x17e>
 8006b52:	3601      	adds	r6, #1
 8006b54:	463c      	mov	r4, r7
 8006b56:	1072      	asrs	r2, r6, #1
 8006b58:	0863      	lsrs	r3, r4, #1
 8006b5a:	07f1      	lsls	r1, r6, #31
 8006b5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006b60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006b64:	bf48      	it	mi
 8006b66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006b6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006b6e:	4618      	mov	r0, r3
 8006b70:	e756      	b.n	8006a20 <__ieee754_sqrt+0x28>
 8006b72:	4690      	mov	r8, r2
 8006b74:	e7be      	b.n	8006af4 <__ieee754_sqrt+0xfc>
 8006b76:	f7f9 fb35 	bl	80001e4 <__adddf3>
 8006b7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4640      	mov	r0, r8
 8006b84:	4649      	mov	r1, r9
 8006b86:	f7f9 ff55 	bl	8000a34 <__aeabi_dcmplt>
 8006b8a:	b120      	cbz	r0, 8006b96 <__ieee754_sqrt+0x19e>
 8006b8c:	1ca0      	adds	r0, r4, #2
 8006b8e:	bf08      	it	eq
 8006b90:	3601      	addeq	r6, #1
 8006b92:	3402      	adds	r4, #2
 8006b94:	e7df      	b.n	8006b56 <__ieee754_sqrt+0x15e>
 8006b96:	1c63      	adds	r3, r4, #1
 8006b98:	f023 0401 	bic.w	r4, r3, #1
 8006b9c:	e7db      	b.n	8006b56 <__ieee754_sqrt+0x15e>
 8006b9e:	bf00      	nop
 8006ba0:	7ff00000 	.word	0x7ff00000
 8006ba4:	20000068 	.word	0x20000068
 8006ba8:	20000060 	.word	0x20000060
 8006bac:	00000000 	.word	0x00000000

08006bb0 <__kernel_cos>:
 8006bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	ec57 6b10 	vmov	r6, r7, d0
 8006bb8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006bbc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006bc0:	ed8d 1b00 	vstr	d1, [sp]
 8006bc4:	d206      	bcs.n	8006bd4 <__kernel_cos+0x24>
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	4639      	mov	r1, r7
 8006bca:	f7f9 ff71 	bl	8000ab0 <__aeabi_d2iz>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f000 8088 	beq.w	8006ce4 <__kernel_cos+0x134>
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	4630      	mov	r0, r6
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f7f9 fcb8 	bl	8000550 <__aeabi_dmul>
 8006be0:	4b51      	ldr	r3, [pc, #324]	@ (8006d28 <__kernel_cos+0x178>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	4604      	mov	r4, r0
 8006be6:	460d      	mov	r5, r1
 8006be8:	f7f9 fcb2 	bl	8000550 <__aeabi_dmul>
 8006bec:	a340      	add	r3, pc, #256	@ (adr r3, 8006cf0 <__kernel_cos+0x140>)
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	4682      	mov	sl, r0
 8006bf4:	468b      	mov	fp, r1
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	f7f9 fca9 	bl	8000550 <__aeabi_dmul>
 8006bfe:	a33e      	add	r3, pc, #248	@ (adr r3, 8006cf8 <__kernel_cos+0x148>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f7f9 faee 	bl	80001e4 <__adddf3>
 8006c08:	4622      	mov	r2, r4
 8006c0a:	462b      	mov	r3, r5
 8006c0c:	f7f9 fca0 	bl	8000550 <__aeabi_dmul>
 8006c10:	a33b      	add	r3, pc, #236	@ (adr r3, 8006d00 <__kernel_cos+0x150>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 fae3 	bl	80001e0 <__aeabi_dsub>
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	f7f9 fc97 	bl	8000550 <__aeabi_dmul>
 8006c22:	a339      	add	r3, pc, #228	@ (adr r3, 8006d08 <__kernel_cos+0x158>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f7f9 fadc 	bl	80001e4 <__adddf3>
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	462b      	mov	r3, r5
 8006c30:	f7f9 fc8e 	bl	8000550 <__aeabi_dmul>
 8006c34:	a336      	add	r3, pc, #216	@ (adr r3, 8006d10 <__kernel_cos+0x160>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 fad1 	bl	80001e0 <__aeabi_dsub>
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	f7f9 fc85 	bl	8000550 <__aeabi_dmul>
 8006c46:	a334      	add	r3, pc, #208	@ (adr r3, 8006d18 <__kernel_cos+0x168>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 faca 	bl	80001e4 <__adddf3>
 8006c50:	4622      	mov	r2, r4
 8006c52:	462b      	mov	r3, r5
 8006c54:	f7f9 fc7c 	bl	8000550 <__aeabi_dmul>
 8006c58:	4622      	mov	r2, r4
 8006c5a:	462b      	mov	r3, r5
 8006c5c:	f7f9 fc78 	bl	8000550 <__aeabi_dmul>
 8006c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c64:	4604      	mov	r4, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7f9 fc70 	bl	8000550 <__aeabi_dmul>
 8006c70:	460b      	mov	r3, r1
 8006c72:	4602      	mov	r2, r0
 8006c74:	4629      	mov	r1, r5
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7f9 fab2 	bl	80001e0 <__aeabi_dsub>
 8006c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006d2c <__kernel_cos+0x17c>)
 8006c7e:	4598      	cmp	r8, r3
 8006c80:	4606      	mov	r6, r0
 8006c82:	460f      	mov	r7, r1
 8006c84:	d810      	bhi.n	8006ca8 <__kernel_cos+0xf8>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	f7f9 faa7 	bl	80001e0 <__aeabi_dsub>
 8006c92:	460b      	mov	r3, r1
 8006c94:	4926      	ldr	r1, [pc, #152]	@ (8006d30 <__kernel_cos+0x180>)
 8006c96:	4602      	mov	r2, r0
 8006c98:	2000      	movs	r0, #0
 8006c9a:	f7f9 faa1 	bl	80001e0 <__aeabi_dsub>
 8006c9e:	ec41 0b10 	vmov	d0, r0, r1
 8006ca2:	b003      	add	sp, #12
 8006ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca8:	4b22      	ldr	r3, [pc, #136]	@ (8006d34 <__kernel_cos+0x184>)
 8006caa:	4921      	ldr	r1, [pc, #132]	@ (8006d30 <__kernel_cos+0x180>)
 8006cac:	4598      	cmp	r8, r3
 8006cae:	bf8c      	ite	hi
 8006cb0:	4d21      	ldrhi	r5, [pc, #132]	@ (8006d38 <__kernel_cos+0x188>)
 8006cb2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8006cb6:	2400      	movs	r4, #0
 8006cb8:	4622      	mov	r2, r4
 8006cba:	462b      	mov	r3, r5
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f7f9 fa8f 	bl	80001e0 <__aeabi_dsub>
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	4689      	mov	r9, r1
 8006cc8:	462b      	mov	r3, r5
 8006cca:	4650      	mov	r0, sl
 8006ccc:	4659      	mov	r1, fp
 8006cce:	f7f9 fa87 	bl	80001e0 <__aeabi_dsub>
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	463b      	mov	r3, r7
 8006cd6:	f7f9 fa83 	bl	80001e0 <__aeabi_dsub>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	e7da      	b.n	8006c9a <__kernel_cos+0xea>
 8006ce4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006d20 <__kernel_cos+0x170>
 8006ce8:	e7db      	b.n	8006ca2 <__kernel_cos+0xf2>
 8006cea:	bf00      	nop
 8006cec:	f3af 8000 	nop.w
 8006cf0:	be8838d4 	.word	0xbe8838d4
 8006cf4:	bda8fae9 	.word	0xbda8fae9
 8006cf8:	bdb4b1c4 	.word	0xbdb4b1c4
 8006cfc:	3e21ee9e 	.word	0x3e21ee9e
 8006d00:	809c52ad 	.word	0x809c52ad
 8006d04:	3e927e4f 	.word	0x3e927e4f
 8006d08:	19cb1590 	.word	0x19cb1590
 8006d0c:	3efa01a0 	.word	0x3efa01a0
 8006d10:	16c15177 	.word	0x16c15177
 8006d14:	3f56c16c 	.word	0x3f56c16c
 8006d18:	5555554c 	.word	0x5555554c
 8006d1c:	3fa55555 	.word	0x3fa55555
 8006d20:	00000000 	.word	0x00000000
 8006d24:	3ff00000 	.word	0x3ff00000
 8006d28:	3fe00000 	.word	0x3fe00000
 8006d2c:	3fd33332 	.word	0x3fd33332
 8006d30:	3ff00000 	.word	0x3ff00000
 8006d34:	3fe90000 	.word	0x3fe90000
 8006d38:	3fd20000 	.word	0x3fd20000
 8006d3c:	00000000 	.word	0x00000000

08006d40 <__kernel_sin>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	ec55 4b10 	vmov	r4, r5, d0
 8006d48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006d52:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006d56:	4680      	mov	r8, r0
 8006d58:	d205      	bcs.n	8006d66 <__kernel_sin+0x26>
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	f7f9 fea7 	bl	8000ab0 <__aeabi_d2iz>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d052      	beq.n	8006e0c <__kernel_sin+0xcc>
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	f7f9 fbef 	bl	8000550 <__aeabi_dmul>
 8006d72:	4682      	mov	sl, r0
 8006d74:	468b      	mov	fp, r1
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	f7f9 fbe7 	bl	8000550 <__aeabi_dmul>
 8006d82:	a342      	add	r3, pc, #264	@ (adr r3, 8006e8c <__kernel_sin+0x14c>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	e9cd 0100 	strd	r0, r1, [sp]
 8006d8c:	4650      	mov	r0, sl
 8006d8e:	4659      	mov	r1, fp
 8006d90:	f7f9 fbde 	bl	8000550 <__aeabi_dmul>
 8006d94:	a33f      	add	r3, pc, #252	@ (adr r3, 8006e94 <__kernel_sin+0x154>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f7f9 fa21 	bl	80001e0 <__aeabi_dsub>
 8006d9e:	4652      	mov	r2, sl
 8006da0:	465b      	mov	r3, fp
 8006da2:	f7f9 fbd5 	bl	8000550 <__aeabi_dmul>
 8006da6:	a33d      	add	r3, pc, #244	@ (adr r3, 8006e9c <__kernel_sin+0x15c>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 fa1a 	bl	80001e4 <__adddf3>
 8006db0:	4652      	mov	r2, sl
 8006db2:	465b      	mov	r3, fp
 8006db4:	f7f9 fbcc 	bl	8000550 <__aeabi_dmul>
 8006db8:	a33a      	add	r3, pc, #232	@ (adr r3, 8006ea4 <__kernel_sin+0x164>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f7f9 fa0f 	bl	80001e0 <__aeabi_dsub>
 8006dc2:	4652      	mov	r2, sl
 8006dc4:	465b      	mov	r3, fp
 8006dc6:	f7f9 fbc3 	bl	8000550 <__aeabi_dmul>
 8006dca:	a338      	add	r3, pc, #224	@ (adr r3, 8006eac <__kernel_sin+0x16c>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f7f9 fa08 	bl	80001e4 <__adddf3>
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	460f      	mov	r7, r1
 8006dd8:	f1b8 0f00 	cmp.w	r8, #0
 8006ddc:	d11b      	bne.n	8006e16 <__kernel_sin+0xd6>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4650      	mov	r0, sl
 8006de4:	4659      	mov	r1, fp
 8006de6:	f7f9 fbb3 	bl	8000550 <__aeabi_dmul>
 8006dea:	a325      	add	r3, pc, #148	@ (adr r3, 8006e80 <__kernel_sin+0x140>)
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 f9f6 	bl	80001e0 <__aeabi_dsub>
 8006df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df8:	f7f9 fbaa 	bl	8000550 <__aeabi_dmul>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4620      	mov	r0, r4
 8006e02:	4629      	mov	r1, r5
 8006e04:	f7f9 f9ee 	bl	80001e4 <__adddf3>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	ec45 4b10 	vmov	d0, r4, r5
 8006e10:	b005      	add	sp, #20
 8006e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e88 <__kernel_sin+0x148>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f7f9 fb97 	bl	8000550 <__aeabi_dmul>
 8006e22:	4632      	mov	r2, r6
 8006e24:	4680      	mov	r8, r0
 8006e26:	4689      	mov	r9, r1
 8006e28:	463b      	mov	r3, r7
 8006e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e2e:	f7f9 fb8f 	bl	8000550 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4640      	mov	r0, r8
 8006e38:	4649      	mov	r1, r9
 8006e3a:	f7f9 f9d1 	bl	80001e0 <__aeabi_dsub>
 8006e3e:	4652      	mov	r2, sl
 8006e40:	465b      	mov	r3, fp
 8006e42:	f7f9 fb85 	bl	8000550 <__aeabi_dmul>
 8006e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e4a:	f7f9 f9c9 	bl	80001e0 <__aeabi_dsub>
 8006e4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006e80 <__kernel_sin+0x140>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	4606      	mov	r6, r0
 8006e56:	460f      	mov	r7, r1
 8006e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e5c:	f7f9 fb78 	bl	8000550 <__aeabi_dmul>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4630      	mov	r0, r6
 8006e66:	4639      	mov	r1, r7
 8006e68:	f7f9 f9bc 	bl	80001e4 <__adddf3>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4620      	mov	r0, r4
 8006e72:	4629      	mov	r1, r5
 8006e74:	f7f9 f9b4 	bl	80001e0 <__aeabi_dsub>
 8006e78:	e7c6      	b.n	8006e08 <__kernel_sin+0xc8>
 8006e7a:	bf00      	nop
 8006e7c:	f3af 8000 	nop.w
 8006e80:	55555549 	.word	0x55555549
 8006e84:	3fc55555 	.word	0x3fc55555
 8006e88:	3fe00000 	.word	0x3fe00000
 8006e8c:	5acfd57c 	.word	0x5acfd57c
 8006e90:	3de5d93a 	.word	0x3de5d93a
 8006e94:	8a2b9ceb 	.word	0x8a2b9ceb
 8006e98:	3e5ae5e6 	.word	0x3e5ae5e6
 8006e9c:	57b1fe7d 	.word	0x57b1fe7d
 8006ea0:	3ec71de3 	.word	0x3ec71de3
 8006ea4:	19c161d5 	.word	0x19c161d5
 8006ea8:	3f2a01a0 	.word	0x3f2a01a0
 8006eac:	1110f8a6 	.word	0x1110f8a6
 8006eb0:	3f811111 	.word	0x3f811111
 8006eb4:	00000000 	.word	0x00000000

08006eb8 <__ieee754_pow>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	b091      	sub	sp, #68	@ 0x44
 8006ebe:	ed8d 1b00 	vstr	d1, [sp]
 8006ec2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006ec6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006eca:	ea5a 0001 	orrs.w	r0, sl, r1
 8006ece:	ec57 6b10 	vmov	r6, r7, d0
 8006ed2:	d113      	bne.n	8006efc <__ieee754_pow+0x44>
 8006ed4:	19b3      	adds	r3, r6, r6
 8006ed6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006eda:	4152      	adcs	r2, r2
 8006edc:	4298      	cmp	r0, r3
 8006ede:	4b98      	ldr	r3, [pc, #608]	@ (8007140 <__ieee754_pow+0x288>)
 8006ee0:	4193      	sbcs	r3, r2
 8006ee2:	f080 84ea 	bcs.w	80078ba <__ieee754_pow+0xa02>
 8006ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eea:	4630      	mov	r0, r6
 8006eec:	4639      	mov	r1, r7
 8006eee:	f7f9 f979 	bl	80001e4 <__adddf3>
 8006ef2:	ec41 0b10 	vmov	d0, r0, r1
 8006ef6:	b011      	add	sp, #68	@ 0x44
 8006ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efc:	4a91      	ldr	r2, [pc, #580]	@ (8007144 <__ieee754_pow+0x28c>)
 8006efe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006f02:	4590      	cmp	r8, r2
 8006f04:	463d      	mov	r5, r7
 8006f06:	4633      	mov	r3, r6
 8006f08:	d806      	bhi.n	8006f18 <__ieee754_pow+0x60>
 8006f0a:	d101      	bne.n	8006f10 <__ieee754_pow+0x58>
 8006f0c:	2e00      	cmp	r6, #0
 8006f0e:	d1ea      	bne.n	8006ee6 <__ieee754_pow+0x2e>
 8006f10:	4592      	cmp	sl, r2
 8006f12:	d801      	bhi.n	8006f18 <__ieee754_pow+0x60>
 8006f14:	d10e      	bne.n	8006f34 <__ieee754_pow+0x7c>
 8006f16:	b169      	cbz	r1, 8006f34 <__ieee754_pow+0x7c>
 8006f18:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006f1c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006f20:	431d      	orrs	r5, r3
 8006f22:	d1e0      	bne.n	8006ee6 <__ieee754_pow+0x2e>
 8006f24:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f28:	18db      	adds	r3, r3, r3
 8006f2a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006f2e:	4152      	adcs	r2, r2
 8006f30:	429d      	cmp	r5, r3
 8006f32:	e7d4      	b.n	8006ede <__ieee754_pow+0x26>
 8006f34:	2d00      	cmp	r5, #0
 8006f36:	46c3      	mov	fp, r8
 8006f38:	da3a      	bge.n	8006fb0 <__ieee754_pow+0xf8>
 8006f3a:	4a83      	ldr	r2, [pc, #524]	@ (8007148 <__ieee754_pow+0x290>)
 8006f3c:	4592      	cmp	sl, r2
 8006f3e:	d84d      	bhi.n	8006fdc <__ieee754_pow+0x124>
 8006f40:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006f44:	4592      	cmp	sl, r2
 8006f46:	f240 84c7 	bls.w	80078d8 <__ieee754_pow+0xa20>
 8006f4a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006f4e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006f52:	2a14      	cmp	r2, #20
 8006f54:	dd0f      	ble.n	8006f76 <__ieee754_pow+0xbe>
 8006f56:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006f5a:	fa21 f402 	lsr.w	r4, r1, r2
 8006f5e:	fa04 f202 	lsl.w	r2, r4, r2
 8006f62:	428a      	cmp	r2, r1
 8006f64:	f040 84b8 	bne.w	80078d8 <__ieee754_pow+0xa20>
 8006f68:	f004 0401 	and.w	r4, r4, #1
 8006f6c:	f1c4 0402 	rsb	r4, r4, #2
 8006f70:	2900      	cmp	r1, #0
 8006f72:	d158      	bne.n	8007026 <__ieee754_pow+0x16e>
 8006f74:	e00e      	b.n	8006f94 <__ieee754_pow+0xdc>
 8006f76:	2900      	cmp	r1, #0
 8006f78:	d154      	bne.n	8007024 <__ieee754_pow+0x16c>
 8006f7a:	f1c2 0214 	rsb	r2, r2, #20
 8006f7e:	fa4a f402 	asr.w	r4, sl, r2
 8006f82:	fa04 f202 	lsl.w	r2, r4, r2
 8006f86:	4552      	cmp	r2, sl
 8006f88:	f040 84a3 	bne.w	80078d2 <__ieee754_pow+0xa1a>
 8006f8c:	f004 0401 	and.w	r4, r4, #1
 8006f90:	f1c4 0402 	rsb	r4, r4, #2
 8006f94:	4a6d      	ldr	r2, [pc, #436]	@ (800714c <__ieee754_pow+0x294>)
 8006f96:	4592      	cmp	sl, r2
 8006f98:	d12e      	bne.n	8006ff8 <__ieee754_pow+0x140>
 8006f9a:	f1b9 0f00 	cmp.w	r9, #0
 8006f9e:	f280 8494 	bge.w	80078ca <__ieee754_pow+0xa12>
 8006fa2:	496a      	ldr	r1, [pc, #424]	@ (800714c <__ieee754_pow+0x294>)
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f7f9 fbfb 	bl	80007a4 <__aeabi_ddiv>
 8006fae:	e7a0      	b.n	8006ef2 <__ieee754_pow+0x3a>
 8006fb0:	2400      	movs	r4, #0
 8006fb2:	bbc1      	cbnz	r1, 8007026 <__ieee754_pow+0x16e>
 8006fb4:	4a63      	ldr	r2, [pc, #396]	@ (8007144 <__ieee754_pow+0x28c>)
 8006fb6:	4592      	cmp	sl, r2
 8006fb8:	d1ec      	bne.n	8006f94 <__ieee754_pow+0xdc>
 8006fba:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006fbe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	f000 8479 	beq.w	80078ba <__ieee754_pow+0xa02>
 8006fc8:	4b61      	ldr	r3, [pc, #388]	@ (8007150 <__ieee754_pow+0x298>)
 8006fca:	4598      	cmp	r8, r3
 8006fcc:	d908      	bls.n	8006fe0 <__ieee754_pow+0x128>
 8006fce:	f1b9 0f00 	cmp.w	r9, #0
 8006fd2:	f2c0 8476 	blt.w	80078c2 <__ieee754_pow+0xa0a>
 8006fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fda:	e78a      	b.n	8006ef2 <__ieee754_pow+0x3a>
 8006fdc:	2402      	movs	r4, #2
 8006fde:	e7e8      	b.n	8006fb2 <__ieee754_pow+0xfa>
 8006fe0:	f1b9 0f00 	cmp.w	r9, #0
 8006fe4:	f04f 0000 	mov.w	r0, #0
 8006fe8:	f04f 0100 	mov.w	r1, #0
 8006fec:	da81      	bge.n	8006ef2 <__ieee754_pow+0x3a>
 8006fee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006ff2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006ff6:	e77c      	b.n	8006ef2 <__ieee754_pow+0x3a>
 8006ff8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006ffc:	d106      	bne.n	800700c <__ieee754_pow+0x154>
 8006ffe:	4632      	mov	r2, r6
 8007000:	463b      	mov	r3, r7
 8007002:	4630      	mov	r0, r6
 8007004:	4639      	mov	r1, r7
 8007006:	f7f9 faa3 	bl	8000550 <__aeabi_dmul>
 800700a:	e772      	b.n	8006ef2 <__ieee754_pow+0x3a>
 800700c:	4a51      	ldr	r2, [pc, #324]	@ (8007154 <__ieee754_pow+0x29c>)
 800700e:	4591      	cmp	r9, r2
 8007010:	d109      	bne.n	8007026 <__ieee754_pow+0x16e>
 8007012:	2d00      	cmp	r5, #0
 8007014:	db07      	blt.n	8007026 <__ieee754_pow+0x16e>
 8007016:	ec47 6b10 	vmov	d0, r6, r7
 800701a:	b011      	add	sp, #68	@ 0x44
 800701c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007020:	f7ff bcea 	b.w	80069f8 <__ieee754_sqrt>
 8007024:	2400      	movs	r4, #0
 8007026:	ec47 6b10 	vmov	d0, r6, r7
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	f7ff fc7c 	bl	8006928 <fabs>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	ec51 0b10 	vmov	r0, r1, d0
 8007036:	bb53      	cbnz	r3, 800708e <__ieee754_pow+0x1d6>
 8007038:	4b44      	ldr	r3, [pc, #272]	@ (800714c <__ieee754_pow+0x294>)
 800703a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800703e:	429a      	cmp	r2, r3
 8007040:	d002      	beq.n	8007048 <__ieee754_pow+0x190>
 8007042:	f1b8 0f00 	cmp.w	r8, #0
 8007046:	d122      	bne.n	800708e <__ieee754_pow+0x1d6>
 8007048:	f1b9 0f00 	cmp.w	r9, #0
 800704c:	da05      	bge.n	800705a <__ieee754_pow+0x1a2>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	2000      	movs	r0, #0
 8007054:	493d      	ldr	r1, [pc, #244]	@ (800714c <__ieee754_pow+0x294>)
 8007056:	f7f9 fba5 	bl	80007a4 <__aeabi_ddiv>
 800705a:	2d00      	cmp	r5, #0
 800705c:	f6bf af49 	bge.w	8006ef2 <__ieee754_pow+0x3a>
 8007060:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007064:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007068:	ea58 0804 	orrs.w	r8, r8, r4
 800706c:	d108      	bne.n	8007080 <__ieee754_pow+0x1c8>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4610      	mov	r0, r2
 8007074:	4619      	mov	r1, r3
 8007076:	f7f9 f8b3 	bl	80001e0 <__aeabi_dsub>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	e794      	b.n	8006faa <__ieee754_pow+0xf2>
 8007080:	2c01      	cmp	r4, #1
 8007082:	f47f af36 	bne.w	8006ef2 <__ieee754_pow+0x3a>
 8007086:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800708a:	4619      	mov	r1, r3
 800708c:	e731      	b.n	8006ef2 <__ieee754_pow+0x3a>
 800708e:	0feb      	lsrs	r3, r5, #31
 8007090:	3b01      	subs	r3, #1
 8007092:	ea53 0204 	orrs.w	r2, r3, r4
 8007096:	d102      	bne.n	800709e <__ieee754_pow+0x1e6>
 8007098:	4632      	mov	r2, r6
 800709a:	463b      	mov	r3, r7
 800709c:	e7e9      	b.n	8007072 <__ieee754_pow+0x1ba>
 800709e:	3c01      	subs	r4, #1
 80070a0:	431c      	orrs	r4, r3
 80070a2:	d016      	beq.n	80070d2 <__ieee754_pow+0x21a>
 80070a4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007130 <__ieee754_pow+0x278>
 80070a8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80070ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070b0:	f240 8112 	bls.w	80072d8 <__ieee754_pow+0x420>
 80070b4:	4b28      	ldr	r3, [pc, #160]	@ (8007158 <__ieee754_pow+0x2a0>)
 80070b6:	459a      	cmp	sl, r3
 80070b8:	4b25      	ldr	r3, [pc, #148]	@ (8007150 <__ieee754_pow+0x298>)
 80070ba:	d916      	bls.n	80070ea <__ieee754_pow+0x232>
 80070bc:	4598      	cmp	r8, r3
 80070be:	d80b      	bhi.n	80070d8 <__ieee754_pow+0x220>
 80070c0:	f1b9 0f00 	cmp.w	r9, #0
 80070c4:	da0b      	bge.n	80070de <__ieee754_pow+0x226>
 80070c6:	2000      	movs	r0, #0
 80070c8:	b011      	add	sp, #68	@ 0x44
 80070ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ce:	f000 bee7 	b.w	8007ea0 <__math_oflow>
 80070d2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007138 <__ieee754_pow+0x280>
 80070d6:	e7e7      	b.n	80070a8 <__ieee754_pow+0x1f0>
 80070d8:	f1b9 0f00 	cmp.w	r9, #0
 80070dc:	dcf3      	bgt.n	80070c6 <__ieee754_pow+0x20e>
 80070de:	2000      	movs	r0, #0
 80070e0:	b011      	add	sp, #68	@ 0x44
 80070e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e6:	f000 bed3 	b.w	8007e90 <__math_uflow>
 80070ea:	4598      	cmp	r8, r3
 80070ec:	d20c      	bcs.n	8007108 <__ieee754_pow+0x250>
 80070ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	2300      	movs	r3, #0
 80070f6:	f7f9 fc9d 	bl	8000a34 <__aeabi_dcmplt>
 80070fa:	3800      	subs	r0, #0
 80070fc:	bf18      	it	ne
 80070fe:	2001      	movne	r0, #1
 8007100:	f1b9 0f00 	cmp.w	r9, #0
 8007104:	daec      	bge.n	80070e0 <__ieee754_pow+0x228>
 8007106:	e7df      	b.n	80070c8 <__ieee754_pow+0x210>
 8007108:	4b10      	ldr	r3, [pc, #64]	@ (800714c <__ieee754_pow+0x294>)
 800710a:	4598      	cmp	r8, r3
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	d924      	bls.n	800715c <__ieee754_pow+0x2a4>
 8007112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007116:	2300      	movs	r3, #0
 8007118:	f7f9 fc8c 	bl	8000a34 <__aeabi_dcmplt>
 800711c:	3800      	subs	r0, #0
 800711e:	bf18      	it	ne
 8007120:	2001      	movne	r0, #1
 8007122:	f1b9 0f00 	cmp.w	r9, #0
 8007126:	dccf      	bgt.n	80070c8 <__ieee754_pow+0x210>
 8007128:	e7da      	b.n	80070e0 <__ieee754_pow+0x228>
 800712a:	bf00      	nop
 800712c:	f3af 8000 	nop.w
 8007130:	00000000 	.word	0x00000000
 8007134:	3ff00000 	.word	0x3ff00000
 8007138:	00000000 	.word	0x00000000
 800713c:	bff00000 	.word	0xbff00000
 8007140:	fff00000 	.word	0xfff00000
 8007144:	7ff00000 	.word	0x7ff00000
 8007148:	433fffff 	.word	0x433fffff
 800714c:	3ff00000 	.word	0x3ff00000
 8007150:	3fefffff 	.word	0x3fefffff
 8007154:	3fe00000 	.word	0x3fe00000
 8007158:	43f00000 	.word	0x43f00000
 800715c:	4b5a      	ldr	r3, [pc, #360]	@ (80072c8 <__ieee754_pow+0x410>)
 800715e:	f7f9 f83f 	bl	80001e0 <__aeabi_dsub>
 8007162:	a351      	add	r3, pc, #324	@ (adr r3, 80072a8 <__ieee754_pow+0x3f0>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	4604      	mov	r4, r0
 800716a:	460d      	mov	r5, r1
 800716c:	f7f9 f9f0 	bl	8000550 <__aeabi_dmul>
 8007170:	a34f      	add	r3, pc, #316	@ (adr r3, 80072b0 <__ieee754_pow+0x3f8>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	4606      	mov	r6, r0
 8007178:	460f      	mov	r7, r1
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	f7f9 f9e7 	bl	8000550 <__aeabi_dmul>
 8007182:	4b52      	ldr	r3, [pc, #328]	@ (80072cc <__ieee754_pow+0x414>)
 8007184:	4682      	mov	sl, r0
 8007186:	468b      	mov	fp, r1
 8007188:	2200      	movs	r2, #0
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f7f9 f9df 	bl	8000550 <__aeabi_dmul>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	a148      	add	r1, pc, #288	@ (adr r1, 80072b8 <__ieee754_pow+0x400>)
 8007198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800719c:	f7f9 f820 	bl	80001e0 <__aeabi_dsub>
 80071a0:	4622      	mov	r2, r4
 80071a2:	462b      	mov	r3, r5
 80071a4:	f7f9 f9d4 	bl	8000550 <__aeabi_dmul>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	2000      	movs	r0, #0
 80071ae:	4948      	ldr	r1, [pc, #288]	@ (80072d0 <__ieee754_pow+0x418>)
 80071b0:	f7f9 f816 	bl	80001e0 <__aeabi_dsub>
 80071b4:	4622      	mov	r2, r4
 80071b6:	4680      	mov	r8, r0
 80071b8:	4689      	mov	r9, r1
 80071ba:	462b      	mov	r3, r5
 80071bc:	4620      	mov	r0, r4
 80071be:	4629      	mov	r1, r5
 80071c0:	f7f9 f9c6 	bl	8000550 <__aeabi_dmul>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4640      	mov	r0, r8
 80071ca:	4649      	mov	r1, r9
 80071cc:	f7f9 f9c0 	bl	8000550 <__aeabi_dmul>
 80071d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80072c0 <__ieee754_pow+0x408>)
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f7f9 f9bb 	bl	8000550 <__aeabi_dmul>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	4650      	mov	r0, sl
 80071e0:	4659      	mov	r1, fp
 80071e2:	f7f8 fffd 	bl	80001e0 <__aeabi_dsub>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4680      	mov	r8, r0
 80071ec:	4689      	mov	r9, r1
 80071ee:	4630      	mov	r0, r6
 80071f0:	4639      	mov	r1, r7
 80071f2:	f7f8 fff7 	bl	80001e4 <__adddf3>
 80071f6:	2400      	movs	r4, #0
 80071f8:	4632      	mov	r2, r6
 80071fa:	463b      	mov	r3, r7
 80071fc:	4620      	mov	r0, r4
 80071fe:	460d      	mov	r5, r1
 8007200:	f7f8 ffee 	bl	80001e0 <__aeabi_dsub>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4640      	mov	r0, r8
 800720a:	4649      	mov	r1, r9
 800720c:	f7f8 ffe8 	bl	80001e0 <__aeabi_dsub>
 8007210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007214:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007218:	2300      	movs	r3, #0
 800721a:	9304      	str	r3, [sp, #16]
 800721c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007220:	4606      	mov	r6, r0
 8007222:	460f      	mov	r7, r1
 8007224:	4652      	mov	r2, sl
 8007226:	465b      	mov	r3, fp
 8007228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800722c:	f7f8 ffd8 	bl	80001e0 <__aeabi_dsub>
 8007230:	4622      	mov	r2, r4
 8007232:	462b      	mov	r3, r5
 8007234:	f7f9 f98c 	bl	8000550 <__aeabi_dmul>
 8007238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800723c:	4680      	mov	r8, r0
 800723e:	4689      	mov	r9, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 f984 	bl	8000550 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7f8 ffc8 	bl	80001e4 <__adddf3>
 8007254:	4652      	mov	r2, sl
 8007256:	465b      	mov	r3, fp
 8007258:	4606      	mov	r6, r0
 800725a:	460f      	mov	r7, r1
 800725c:	4620      	mov	r0, r4
 800725e:	4629      	mov	r1, r5
 8007260:	f7f9 f976 	bl	8000550 <__aeabi_dmul>
 8007264:	460b      	mov	r3, r1
 8007266:	4602      	mov	r2, r0
 8007268:	4680      	mov	r8, r0
 800726a:	4689      	mov	r9, r1
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	f7f8 ffb8 	bl	80001e4 <__adddf3>
 8007274:	4b17      	ldr	r3, [pc, #92]	@ (80072d4 <__ieee754_pow+0x41c>)
 8007276:	4299      	cmp	r1, r3
 8007278:	4604      	mov	r4, r0
 800727a:	460d      	mov	r5, r1
 800727c:	468a      	mov	sl, r1
 800727e:	468b      	mov	fp, r1
 8007280:	f340 82ef 	ble.w	8007862 <__ieee754_pow+0x9aa>
 8007284:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007288:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800728c:	4303      	orrs	r3, r0
 800728e:	f000 81e8 	beq.w	8007662 <__ieee754_pow+0x7aa>
 8007292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	2300      	movs	r3, #0
 800729a:	f7f9 fbcb 	bl	8000a34 <__aeabi_dcmplt>
 800729e:	3800      	subs	r0, #0
 80072a0:	bf18      	it	ne
 80072a2:	2001      	movne	r0, #1
 80072a4:	e710      	b.n	80070c8 <__ieee754_pow+0x210>
 80072a6:	bf00      	nop
 80072a8:	60000000 	.word	0x60000000
 80072ac:	3ff71547 	.word	0x3ff71547
 80072b0:	f85ddf44 	.word	0xf85ddf44
 80072b4:	3e54ae0b 	.word	0x3e54ae0b
 80072b8:	55555555 	.word	0x55555555
 80072bc:	3fd55555 	.word	0x3fd55555
 80072c0:	652b82fe 	.word	0x652b82fe
 80072c4:	3ff71547 	.word	0x3ff71547
 80072c8:	3ff00000 	.word	0x3ff00000
 80072cc:	3fd00000 	.word	0x3fd00000
 80072d0:	3fe00000 	.word	0x3fe00000
 80072d4:	408fffff 	.word	0x408fffff
 80072d8:	4bd5      	ldr	r3, [pc, #852]	@ (8007630 <__ieee754_pow+0x778>)
 80072da:	402b      	ands	r3, r5
 80072dc:	2200      	movs	r2, #0
 80072de:	b92b      	cbnz	r3, 80072ec <__ieee754_pow+0x434>
 80072e0:	4bd4      	ldr	r3, [pc, #848]	@ (8007634 <__ieee754_pow+0x77c>)
 80072e2:	f7f9 f935 	bl	8000550 <__aeabi_dmul>
 80072e6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80072ea:	468b      	mov	fp, r1
 80072ec:	ea4f 532b 	mov.w	r3, fp, asr #20
 80072f0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80072f4:	4413      	add	r3, r2
 80072f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f8:	4bcf      	ldr	r3, [pc, #828]	@ (8007638 <__ieee754_pow+0x780>)
 80072fa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80072fe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007302:	459b      	cmp	fp, r3
 8007304:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007308:	dd08      	ble.n	800731c <__ieee754_pow+0x464>
 800730a:	4bcc      	ldr	r3, [pc, #816]	@ (800763c <__ieee754_pow+0x784>)
 800730c:	459b      	cmp	fp, r3
 800730e:	f340 81a5 	ble.w	800765c <__ieee754_pow+0x7a4>
 8007312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007314:	3301      	adds	r3, #1
 8007316:	930a      	str	r3, [sp, #40]	@ 0x28
 8007318:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800731c:	f04f 0a00 	mov.w	sl, #0
 8007320:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007324:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007326:	4bc6      	ldr	r3, [pc, #792]	@ (8007640 <__ieee754_pow+0x788>)
 8007328:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800732c:	ed93 7b00 	vldr	d7, [r3]
 8007330:	4629      	mov	r1, r5
 8007332:	ec53 2b17 	vmov	r2, r3, d7
 8007336:	ed8d 7b06 	vstr	d7, [sp, #24]
 800733a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800733e:	f7f8 ff4f 	bl	80001e0 <__aeabi_dsub>
 8007342:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007346:	4606      	mov	r6, r0
 8007348:	460f      	mov	r7, r1
 800734a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800734e:	f7f8 ff49 	bl	80001e4 <__adddf3>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	2000      	movs	r0, #0
 8007358:	49ba      	ldr	r1, [pc, #744]	@ (8007644 <__ieee754_pow+0x78c>)
 800735a:	f7f9 fa23 	bl	80007a4 <__aeabi_ddiv>
 800735e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7f9 f8f1 	bl	8000550 <__aeabi_dmul>
 800736e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007372:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007376:	106d      	asrs	r5, r5, #1
 8007378:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800737c:	f04f 0b00 	mov.w	fp, #0
 8007380:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007384:	4661      	mov	r1, ip
 8007386:	2200      	movs	r2, #0
 8007388:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800738c:	4658      	mov	r0, fp
 800738e:	46e1      	mov	r9, ip
 8007390:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007394:	4614      	mov	r4, r2
 8007396:	461d      	mov	r5, r3
 8007398:	f7f9 f8da 	bl	8000550 <__aeabi_dmul>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4630      	mov	r0, r6
 80073a2:	4639      	mov	r1, r7
 80073a4:	f7f8 ff1c 	bl	80001e0 <__aeabi_dsub>
 80073a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073ac:	4606      	mov	r6, r0
 80073ae:	460f      	mov	r7, r1
 80073b0:	4620      	mov	r0, r4
 80073b2:	4629      	mov	r1, r5
 80073b4:	f7f8 ff14 	bl	80001e0 <__aeabi_dsub>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073c0:	f7f8 ff0e 	bl	80001e0 <__aeabi_dsub>
 80073c4:	465a      	mov	r2, fp
 80073c6:	464b      	mov	r3, r9
 80073c8:	f7f9 f8c2 	bl	8000550 <__aeabi_dmul>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4630      	mov	r0, r6
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f8 ff04 	bl	80001e0 <__aeabi_dsub>
 80073d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073dc:	f7f9 f8b8 	bl	8000550 <__aeabi_dmul>
 80073e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073e8:	4610      	mov	r0, r2
 80073ea:	4619      	mov	r1, r3
 80073ec:	f7f9 f8b0 	bl	8000550 <__aeabi_dmul>
 80073f0:	a37d      	add	r3, pc, #500	@ (adr r3, 80075e8 <__ieee754_pow+0x730>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	4604      	mov	r4, r0
 80073f8:	460d      	mov	r5, r1
 80073fa:	f7f9 f8a9 	bl	8000550 <__aeabi_dmul>
 80073fe:	a37c      	add	r3, pc, #496	@ (adr r3, 80075f0 <__ieee754_pow+0x738>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f7f8 feee 	bl	80001e4 <__adddf3>
 8007408:	4622      	mov	r2, r4
 800740a:	462b      	mov	r3, r5
 800740c:	f7f9 f8a0 	bl	8000550 <__aeabi_dmul>
 8007410:	a379      	add	r3, pc, #484	@ (adr r3, 80075f8 <__ieee754_pow+0x740>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f8 fee5 	bl	80001e4 <__adddf3>
 800741a:	4622      	mov	r2, r4
 800741c:	462b      	mov	r3, r5
 800741e:	f7f9 f897 	bl	8000550 <__aeabi_dmul>
 8007422:	a377      	add	r3, pc, #476	@ (adr r3, 8007600 <__ieee754_pow+0x748>)
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f7f8 fedc 	bl	80001e4 <__adddf3>
 800742c:	4622      	mov	r2, r4
 800742e:	462b      	mov	r3, r5
 8007430:	f7f9 f88e 	bl	8000550 <__aeabi_dmul>
 8007434:	a374      	add	r3, pc, #464	@ (adr r3, 8007608 <__ieee754_pow+0x750>)
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f7f8 fed3 	bl	80001e4 <__adddf3>
 800743e:	4622      	mov	r2, r4
 8007440:	462b      	mov	r3, r5
 8007442:	f7f9 f885 	bl	8000550 <__aeabi_dmul>
 8007446:	a372      	add	r3, pc, #456	@ (adr r3, 8007610 <__ieee754_pow+0x758>)
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	f7f8 feca 	bl	80001e4 <__adddf3>
 8007450:	4622      	mov	r2, r4
 8007452:	4606      	mov	r6, r0
 8007454:	460f      	mov	r7, r1
 8007456:	462b      	mov	r3, r5
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	f7f9 f878 	bl	8000550 <__aeabi_dmul>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4630      	mov	r0, r6
 8007466:	4639      	mov	r1, r7
 8007468:	f7f9 f872 	bl	8000550 <__aeabi_dmul>
 800746c:	465a      	mov	r2, fp
 800746e:	4604      	mov	r4, r0
 8007470:	460d      	mov	r5, r1
 8007472:	464b      	mov	r3, r9
 8007474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007478:	f7f8 feb4 	bl	80001e4 <__adddf3>
 800747c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007480:	f7f9 f866 	bl	8000550 <__aeabi_dmul>
 8007484:	4622      	mov	r2, r4
 8007486:	462b      	mov	r3, r5
 8007488:	f7f8 feac 	bl	80001e4 <__adddf3>
 800748c:	465a      	mov	r2, fp
 800748e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007492:	464b      	mov	r3, r9
 8007494:	4658      	mov	r0, fp
 8007496:	4649      	mov	r1, r9
 8007498:	f7f9 f85a 	bl	8000550 <__aeabi_dmul>
 800749c:	4b6a      	ldr	r3, [pc, #424]	@ (8007648 <__ieee754_pow+0x790>)
 800749e:	2200      	movs	r2, #0
 80074a0:	4606      	mov	r6, r0
 80074a2:	460f      	mov	r7, r1
 80074a4:	f7f8 fe9e 	bl	80001e4 <__adddf3>
 80074a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80074ac:	f7f8 fe9a 	bl	80001e4 <__adddf3>
 80074b0:	46d8      	mov	r8, fp
 80074b2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80074b6:	460d      	mov	r5, r1
 80074b8:	465a      	mov	r2, fp
 80074ba:	460b      	mov	r3, r1
 80074bc:	4640      	mov	r0, r8
 80074be:	4649      	mov	r1, r9
 80074c0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80074c4:	f7f9 f844 	bl	8000550 <__aeabi_dmul>
 80074c8:	465c      	mov	r4, fp
 80074ca:	4680      	mov	r8, r0
 80074cc:	4689      	mov	r9, r1
 80074ce:	4b5e      	ldr	r3, [pc, #376]	@ (8007648 <__ieee754_pow+0x790>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	4620      	mov	r0, r4
 80074d4:	4629      	mov	r1, r5
 80074d6:	f7f8 fe83 	bl	80001e0 <__aeabi_dsub>
 80074da:	4632      	mov	r2, r6
 80074dc:	463b      	mov	r3, r7
 80074de:	f7f8 fe7f 	bl	80001e0 <__aeabi_dsub>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80074ea:	f7f8 fe79 	bl	80001e0 <__aeabi_dsub>
 80074ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f2:	f7f9 f82d 	bl	8000550 <__aeabi_dmul>
 80074f6:	4622      	mov	r2, r4
 80074f8:	4606      	mov	r6, r0
 80074fa:	460f      	mov	r7, r1
 80074fc:	462b      	mov	r3, r5
 80074fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007502:	f7f9 f825 	bl	8000550 <__aeabi_dmul>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4630      	mov	r0, r6
 800750c:	4639      	mov	r1, r7
 800750e:	f7f8 fe69 	bl	80001e4 <__adddf3>
 8007512:	4606      	mov	r6, r0
 8007514:	460f      	mov	r7, r1
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	4640      	mov	r0, r8
 800751c:	4649      	mov	r1, r9
 800751e:	f7f8 fe61 	bl	80001e4 <__adddf3>
 8007522:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007526:	a33c      	add	r3, pc, #240	@ (adr r3, 8007618 <__ieee754_pow+0x760>)
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	4658      	mov	r0, fp
 800752e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007532:	460d      	mov	r5, r1
 8007534:	f7f9 f80c 	bl	8000550 <__aeabi_dmul>
 8007538:	465c      	mov	r4, fp
 800753a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800753e:	4642      	mov	r2, r8
 8007540:	464b      	mov	r3, r9
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	f7f8 fe4b 	bl	80001e0 <__aeabi_dsub>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4630      	mov	r0, r6
 8007550:	4639      	mov	r1, r7
 8007552:	f7f8 fe45 	bl	80001e0 <__aeabi_dsub>
 8007556:	a332      	add	r3, pc, #200	@ (adr r3, 8007620 <__ieee754_pow+0x768>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f7f8 fff8 	bl	8000550 <__aeabi_dmul>
 8007560:	a331      	add	r3, pc, #196	@ (adr r3, 8007628 <__ieee754_pow+0x770>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	4606      	mov	r6, r0
 8007568:	460f      	mov	r7, r1
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f7f8 ffef 	bl	8000550 <__aeabi_dmul>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4630      	mov	r0, r6
 8007578:	4639      	mov	r1, r7
 800757a:	f7f8 fe33 	bl	80001e4 <__adddf3>
 800757e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007580:	4b32      	ldr	r3, [pc, #200]	@ (800764c <__ieee754_pow+0x794>)
 8007582:	4413      	add	r3, r2
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f7f8 fe2c 	bl	80001e4 <__adddf3>
 800758c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007590:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007592:	f7f8 ff73 	bl	800047c <__aeabi_i2d>
 8007596:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007598:	4b2d      	ldr	r3, [pc, #180]	@ (8007650 <__ieee754_pow+0x798>)
 800759a:	4413      	add	r3, r2
 800759c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075a0:	4606      	mov	r6, r0
 80075a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075a6:	460f      	mov	r7, r1
 80075a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ac:	f7f8 fe1a 	bl	80001e4 <__adddf3>
 80075b0:	4642      	mov	r2, r8
 80075b2:	464b      	mov	r3, r9
 80075b4:	f7f8 fe16 	bl	80001e4 <__adddf3>
 80075b8:	4632      	mov	r2, r6
 80075ba:	463b      	mov	r3, r7
 80075bc:	f7f8 fe12 	bl	80001e4 <__adddf3>
 80075c0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80075c4:	4632      	mov	r2, r6
 80075c6:	463b      	mov	r3, r7
 80075c8:	4658      	mov	r0, fp
 80075ca:	460d      	mov	r5, r1
 80075cc:	f7f8 fe08 	bl	80001e0 <__aeabi_dsub>
 80075d0:	4642      	mov	r2, r8
 80075d2:	464b      	mov	r3, r9
 80075d4:	f7f8 fe04 	bl	80001e0 <__aeabi_dsub>
 80075d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075dc:	f7f8 fe00 	bl	80001e0 <__aeabi_dsub>
 80075e0:	465c      	mov	r4, fp
 80075e2:	4602      	mov	r2, r0
 80075e4:	e036      	b.n	8007654 <__ieee754_pow+0x79c>
 80075e6:	bf00      	nop
 80075e8:	4a454eef 	.word	0x4a454eef
 80075ec:	3fca7e28 	.word	0x3fca7e28
 80075f0:	93c9db65 	.word	0x93c9db65
 80075f4:	3fcd864a 	.word	0x3fcd864a
 80075f8:	a91d4101 	.word	0xa91d4101
 80075fc:	3fd17460 	.word	0x3fd17460
 8007600:	518f264d 	.word	0x518f264d
 8007604:	3fd55555 	.word	0x3fd55555
 8007608:	db6fabff 	.word	0xdb6fabff
 800760c:	3fdb6db6 	.word	0x3fdb6db6
 8007610:	33333303 	.word	0x33333303
 8007614:	3fe33333 	.word	0x3fe33333
 8007618:	e0000000 	.word	0xe0000000
 800761c:	3feec709 	.word	0x3feec709
 8007620:	dc3a03fd 	.word	0xdc3a03fd
 8007624:	3feec709 	.word	0x3feec709
 8007628:	145b01f5 	.word	0x145b01f5
 800762c:	be3e2fe0 	.word	0xbe3e2fe0
 8007630:	7ff00000 	.word	0x7ff00000
 8007634:	43400000 	.word	0x43400000
 8007638:	0003988e 	.word	0x0003988e
 800763c:	000bb679 	.word	0x000bb679
 8007640:	080086f0 	.word	0x080086f0
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	40080000 	.word	0x40080000
 800764c:	080086d0 	.word	0x080086d0
 8007650:	080086e0 	.word	0x080086e0
 8007654:	460b      	mov	r3, r1
 8007656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765a:	e5d7      	b.n	800720c <__ieee754_pow+0x354>
 800765c:	f04f 0a01 	mov.w	sl, #1
 8007660:	e65e      	b.n	8007320 <__ieee754_pow+0x468>
 8007662:	a3b4      	add	r3, pc, #720	@ (adr r3, 8007934 <__ieee754_pow+0xa7c>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	4630      	mov	r0, r6
 800766a:	4639      	mov	r1, r7
 800766c:	f7f8 fdba 	bl	80001e4 <__adddf3>
 8007670:	4642      	mov	r2, r8
 8007672:	e9cd 0100 	strd	r0, r1, [sp]
 8007676:	464b      	mov	r3, r9
 8007678:	4620      	mov	r0, r4
 800767a:	4629      	mov	r1, r5
 800767c:	f7f8 fdb0 	bl	80001e0 <__aeabi_dsub>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007688:	f7f9 f9f2 	bl	8000a70 <__aeabi_dcmpgt>
 800768c:	2800      	cmp	r0, #0
 800768e:	f47f ae00 	bne.w	8007292 <__ieee754_pow+0x3da>
 8007692:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007696:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800769a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800769e:	fa43 fa0a 	asr.w	sl, r3, sl
 80076a2:	44da      	add	sl, fp
 80076a4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80076a8:	489d      	ldr	r0, [pc, #628]	@ (8007920 <__ieee754_pow+0xa68>)
 80076aa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80076ae:	4108      	asrs	r0, r1
 80076b0:	ea00 030a 	and.w	r3, r0, sl
 80076b4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80076b8:	f1c1 0114 	rsb	r1, r1, #20
 80076bc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80076c0:	fa4a fa01 	asr.w	sl, sl, r1
 80076c4:	f1bb 0f00 	cmp.w	fp, #0
 80076c8:	4640      	mov	r0, r8
 80076ca:	4649      	mov	r1, r9
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	bfb8      	it	lt
 80076d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80076d6:	f7f8 fd83 	bl	80001e0 <__aeabi_dsub>
 80076da:	4680      	mov	r8, r0
 80076dc:	4689      	mov	r9, r1
 80076de:	4632      	mov	r2, r6
 80076e0:	463b      	mov	r3, r7
 80076e2:	4640      	mov	r0, r8
 80076e4:	4649      	mov	r1, r9
 80076e6:	f7f8 fd7d 	bl	80001e4 <__adddf3>
 80076ea:	2400      	movs	r4, #0
 80076ec:	a37c      	add	r3, pc, #496	@ (adr r3, 80078e0 <__ieee754_pow+0xa28>)
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	4620      	mov	r0, r4
 80076f4:	460d      	mov	r5, r1
 80076f6:	f7f8 ff2b 	bl	8000550 <__aeabi_dmul>
 80076fa:	4642      	mov	r2, r8
 80076fc:	e9cd 0100 	strd	r0, r1, [sp]
 8007700:	464b      	mov	r3, r9
 8007702:	4620      	mov	r0, r4
 8007704:	4629      	mov	r1, r5
 8007706:	f7f8 fd6b 	bl	80001e0 <__aeabi_dsub>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	f7f8 fd65 	bl	80001e0 <__aeabi_dsub>
 8007716:	a374      	add	r3, pc, #464	@ (adr r3, 80078e8 <__ieee754_pow+0xa30>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f7f8 ff18 	bl	8000550 <__aeabi_dmul>
 8007720:	a373      	add	r3, pc, #460	@ (adr r3, 80078f0 <__ieee754_pow+0xa38>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	4680      	mov	r8, r0
 8007728:	4689      	mov	r9, r1
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 ff0f 	bl	8000550 <__aeabi_dmul>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4640      	mov	r0, r8
 8007738:	4649      	mov	r1, r9
 800773a:	f7f8 fd53 	bl	80001e4 <__adddf3>
 800773e:	4604      	mov	r4, r0
 8007740:	460d      	mov	r5, r1
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	e9dd 0100 	ldrd	r0, r1, [sp]
 800774a:	f7f8 fd4b 	bl	80001e4 <__adddf3>
 800774e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007752:	4680      	mov	r8, r0
 8007754:	4689      	mov	r9, r1
 8007756:	f7f8 fd43 	bl	80001e0 <__aeabi_dsub>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4620      	mov	r0, r4
 8007760:	4629      	mov	r1, r5
 8007762:	f7f8 fd3d 	bl	80001e0 <__aeabi_dsub>
 8007766:	4642      	mov	r2, r8
 8007768:	4606      	mov	r6, r0
 800776a:	460f      	mov	r7, r1
 800776c:	464b      	mov	r3, r9
 800776e:	4640      	mov	r0, r8
 8007770:	4649      	mov	r1, r9
 8007772:	f7f8 feed 	bl	8000550 <__aeabi_dmul>
 8007776:	a360      	add	r3, pc, #384	@ (adr r3, 80078f8 <__ieee754_pow+0xa40>)
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	4604      	mov	r4, r0
 800777e:	460d      	mov	r5, r1
 8007780:	f7f8 fee6 	bl	8000550 <__aeabi_dmul>
 8007784:	a35e      	add	r3, pc, #376	@ (adr r3, 8007900 <__ieee754_pow+0xa48>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f8 fd29 	bl	80001e0 <__aeabi_dsub>
 800778e:	4622      	mov	r2, r4
 8007790:	462b      	mov	r3, r5
 8007792:	f7f8 fedd 	bl	8000550 <__aeabi_dmul>
 8007796:	a35c      	add	r3, pc, #368	@ (adr r3, 8007908 <__ieee754_pow+0xa50>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fd22 	bl	80001e4 <__adddf3>
 80077a0:	4622      	mov	r2, r4
 80077a2:	462b      	mov	r3, r5
 80077a4:	f7f8 fed4 	bl	8000550 <__aeabi_dmul>
 80077a8:	a359      	add	r3, pc, #356	@ (adr r3, 8007910 <__ieee754_pow+0xa58>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f8 fd17 	bl	80001e0 <__aeabi_dsub>
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	f7f8 fecb 	bl	8000550 <__aeabi_dmul>
 80077ba:	a357      	add	r3, pc, #348	@ (adr r3, 8007918 <__ieee754_pow+0xa60>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 fd10 	bl	80001e4 <__adddf3>
 80077c4:	4622      	mov	r2, r4
 80077c6:	462b      	mov	r3, r5
 80077c8:	f7f8 fec2 	bl	8000550 <__aeabi_dmul>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4640      	mov	r0, r8
 80077d2:	4649      	mov	r1, r9
 80077d4:	f7f8 fd04 	bl	80001e0 <__aeabi_dsub>
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4640      	mov	r0, r8
 80077e2:	4649      	mov	r1, r9
 80077e4:	f7f8 feb4 	bl	8000550 <__aeabi_dmul>
 80077e8:	2200      	movs	r2, #0
 80077ea:	e9cd 0100 	strd	r0, r1, [sp]
 80077ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f8 fcf3 	bl	80001e0 <__aeabi_dsub>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007802:	f7f8 ffcf 	bl	80007a4 <__aeabi_ddiv>
 8007806:	4632      	mov	r2, r6
 8007808:	4604      	mov	r4, r0
 800780a:	460d      	mov	r5, r1
 800780c:	463b      	mov	r3, r7
 800780e:	4640      	mov	r0, r8
 8007810:	4649      	mov	r1, r9
 8007812:	f7f8 fe9d 	bl	8000550 <__aeabi_dmul>
 8007816:	4632      	mov	r2, r6
 8007818:	463b      	mov	r3, r7
 800781a:	f7f8 fce3 	bl	80001e4 <__adddf3>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4620      	mov	r0, r4
 8007824:	4629      	mov	r1, r5
 8007826:	f7f8 fcdb 	bl	80001e0 <__aeabi_dsub>
 800782a:	4642      	mov	r2, r8
 800782c:	464b      	mov	r3, r9
 800782e:	f7f8 fcd7 	bl	80001e0 <__aeabi_dsub>
 8007832:	460b      	mov	r3, r1
 8007834:	4602      	mov	r2, r0
 8007836:	493b      	ldr	r1, [pc, #236]	@ (8007924 <__ieee754_pow+0xa6c>)
 8007838:	2000      	movs	r0, #0
 800783a:	f7f8 fcd1 	bl	80001e0 <__aeabi_dsub>
 800783e:	ec41 0b10 	vmov	d0, r0, r1
 8007842:	ee10 3a90 	vmov	r3, s1
 8007846:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800784e:	da30      	bge.n	80078b2 <__ieee754_pow+0x9fa>
 8007850:	4650      	mov	r0, sl
 8007852:	f000 fa71 	bl	8007d38 <scalbn>
 8007856:	ec51 0b10 	vmov	r0, r1, d0
 800785a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800785e:	f7ff bbd2 	b.w	8007006 <__ieee754_pow+0x14e>
 8007862:	4c31      	ldr	r4, [pc, #196]	@ (8007928 <__ieee754_pow+0xa70>)
 8007864:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007868:	42a3      	cmp	r3, r4
 800786a:	d91a      	bls.n	80078a2 <__ieee754_pow+0x9ea>
 800786c:	4b2f      	ldr	r3, [pc, #188]	@ (800792c <__ieee754_pow+0xa74>)
 800786e:	440b      	add	r3, r1
 8007870:	4303      	orrs	r3, r0
 8007872:	d009      	beq.n	8007888 <__ieee754_pow+0x9d0>
 8007874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	2300      	movs	r3, #0
 800787c:	f7f9 f8da 	bl	8000a34 <__aeabi_dcmplt>
 8007880:	3800      	subs	r0, #0
 8007882:	bf18      	it	ne
 8007884:	2001      	movne	r0, #1
 8007886:	e42b      	b.n	80070e0 <__ieee754_pow+0x228>
 8007888:	4642      	mov	r2, r8
 800788a:	464b      	mov	r3, r9
 800788c:	f7f8 fca8 	bl	80001e0 <__aeabi_dsub>
 8007890:	4632      	mov	r2, r6
 8007892:	463b      	mov	r3, r7
 8007894:	f7f9 f8e2 	bl	8000a5c <__aeabi_dcmpge>
 8007898:	2800      	cmp	r0, #0
 800789a:	d1eb      	bne.n	8007874 <__ieee754_pow+0x9bc>
 800789c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800793c <__ieee754_pow+0xa84>
 80078a0:	e6f7      	b.n	8007692 <__ieee754_pow+0x7da>
 80078a2:	469a      	mov	sl, r3
 80078a4:	4b22      	ldr	r3, [pc, #136]	@ (8007930 <__ieee754_pow+0xa78>)
 80078a6:	459a      	cmp	sl, r3
 80078a8:	f63f aef3 	bhi.w	8007692 <__ieee754_pow+0x7da>
 80078ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 80078b0:	e715      	b.n	80076de <__ieee754_pow+0x826>
 80078b2:	ec51 0b10 	vmov	r0, r1, d0
 80078b6:	4619      	mov	r1, r3
 80078b8:	e7cf      	b.n	800785a <__ieee754_pow+0x9a2>
 80078ba:	491a      	ldr	r1, [pc, #104]	@ (8007924 <__ieee754_pow+0xa6c>)
 80078bc:	2000      	movs	r0, #0
 80078be:	f7ff bb18 	b.w	8006ef2 <__ieee754_pow+0x3a>
 80078c2:	2000      	movs	r0, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	f7ff bb14 	b.w	8006ef2 <__ieee754_pow+0x3a>
 80078ca:	4630      	mov	r0, r6
 80078cc:	4639      	mov	r1, r7
 80078ce:	f7ff bb10 	b.w	8006ef2 <__ieee754_pow+0x3a>
 80078d2:	460c      	mov	r4, r1
 80078d4:	f7ff bb5e 	b.w	8006f94 <__ieee754_pow+0xdc>
 80078d8:	2400      	movs	r4, #0
 80078da:	f7ff bb49 	b.w	8006f70 <__ieee754_pow+0xb8>
 80078de:	bf00      	nop
 80078e0:	00000000 	.word	0x00000000
 80078e4:	3fe62e43 	.word	0x3fe62e43
 80078e8:	fefa39ef 	.word	0xfefa39ef
 80078ec:	3fe62e42 	.word	0x3fe62e42
 80078f0:	0ca86c39 	.word	0x0ca86c39
 80078f4:	be205c61 	.word	0xbe205c61
 80078f8:	72bea4d0 	.word	0x72bea4d0
 80078fc:	3e663769 	.word	0x3e663769
 8007900:	c5d26bf1 	.word	0xc5d26bf1
 8007904:	3ebbbd41 	.word	0x3ebbbd41
 8007908:	af25de2c 	.word	0xaf25de2c
 800790c:	3f11566a 	.word	0x3f11566a
 8007910:	16bebd93 	.word	0x16bebd93
 8007914:	3f66c16c 	.word	0x3f66c16c
 8007918:	5555553e 	.word	0x5555553e
 800791c:	3fc55555 	.word	0x3fc55555
 8007920:	fff00000 	.word	0xfff00000
 8007924:	3ff00000 	.word	0x3ff00000
 8007928:	4090cbff 	.word	0x4090cbff
 800792c:	3f6f3400 	.word	0x3f6f3400
 8007930:	3fe00000 	.word	0x3fe00000
 8007934:	652b82fe 	.word	0x652b82fe
 8007938:	3c971547 	.word	0x3c971547
 800793c:	4090cc00 	.word	0x4090cc00

08007940 <__ieee754_rem_pio2>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	ec57 6b10 	vmov	r6, r7, d0
 8007948:	4bc5      	ldr	r3, [pc, #788]	@ (8007c60 <__ieee754_rem_pio2+0x320>)
 800794a:	b08d      	sub	sp, #52	@ 0x34
 800794c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007950:	4598      	cmp	r8, r3
 8007952:	4604      	mov	r4, r0
 8007954:	9704      	str	r7, [sp, #16]
 8007956:	d807      	bhi.n	8007968 <__ieee754_rem_pio2+0x28>
 8007958:	2200      	movs	r2, #0
 800795a:	2300      	movs	r3, #0
 800795c:	ed80 0b00 	vstr	d0, [r0]
 8007960:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007964:	2500      	movs	r5, #0
 8007966:	e028      	b.n	80079ba <__ieee754_rem_pio2+0x7a>
 8007968:	4bbe      	ldr	r3, [pc, #760]	@ (8007c64 <__ieee754_rem_pio2+0x324>)
 800796a:	4598      	cmp	r8, r3
 800796c:	d878      	bhi.n	8007a60 <__ieee754_rem_pio2+0x120>
 800796e:	9b04      	ldr	r3, [sp, #16]
 8007970:	4dbd      	ldr	r5, [pc, #756]	@ (8007c68 <__ieee754_rem_pio2+0x328>)
 8007972:	2b00      	cmp	r3, #0
 8007974:	4630      	mov	r0, r6
 8007976:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007c28 <__ieee754_rem_pio2+0x2e8>)
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	4639      	mov	r1, r7
 800797e:	dd38      	ble.n	80079f2 <__ieee754_rem_pio2+0xb2>
 8007980:	f7f8 fc2e 	bl	80001e0 <__aeabi_dsub>
 8007984:	45a8      	cmp	r8, r5
 8007986:	4606      	mov	r6, r0
 8007988:	460f      	mov	r7, r1
 800798a:	d01a      	beq.n	80079c2 <__ieee754_rem_pio2+0x82>
 800798c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007c30 <__ieee754_rem_pio2+0x2f0>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f7f8 fc25 	bl	80001e0 <__aeabi_dsub>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4680      	mov	r8, r0
 800799c:	4689      	mov	r9, r1
 800799e:	4630      	mov	r0, r6
 80079a0:	4639      	mov	r1, r7
 80079a2:	f7f8 fc1d 	bl	80001e0 <__aeabi_dsub>
 80079a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007c30 <__ieee754_rem_pio2+0x2f0>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f7f8 fc18 	bl	80001e0 <__aeabi_dsub>
 80079b0:	e9c4 8900 	strd	r8, r9, [r4]
 80079b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80079b8:	2501      	movs	r5, #1
 80079ba:	4628      	mov	r0, r5
 80079bc:	b00d      	add	sp, #52	@ 0x34
 80079be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c2:	a39d      	add	r3, pc, #628	@ (adr r3, 8007c38 <__ieee754_rem_pio2+0x2f8>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f7f8 fc0a 	bl	80001e0 <__aeabi_dsub>
 80079cc:	a39c      	add	r3, pc, #624	@ (adr r3, 8007c40 <__ieee754_rem_pio2+0x300>)
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	4606      	mov	r6, r0
 80079d4:	460f      	mov	r7, r1
 80079d6:	f7f8 fc03 	bl	80001e0 <__aeabi_dsub>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4680      	mov	r8, r0
 80079e0:	4689      	mov	r9, r1
 80079e2:	4630      	mov	r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	f7f8 fbfb 	bl	80001e0 <__aeabi_dsub>
 80079ea:	a395      	add	r3, pc, #596	@ (adr r3, 8007c40 <__ieee754_rem_pio2+0x300>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	e7dc      	b.n	80079ac <__ieee754_rem_pio2+0x6c>
 80079f2:	f7f8 fbf7 	bl	80001e4 <__adddf3>
 80079f6:	45a8      	cmp	r8, r5
 80079f8:	4606      	mov	r6, r0
 80079fa:	460f      	mov	r7, r1
 80079fc:	d018      	beq.n	8007a30 <__ieee754_rem_pio2+0xf0>
 80079fe:	a38c      	add	r3, pc, #560	@ (adr r3, 8007c30 <__ieee754_rem_pio2+0x2f0>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fbee 	bl	80001e4 <__adddf3>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	4689      	mov	r9, r1
 8007a10:	4630      	mov	r0, r6
 8007a12:	4639      	mov	r1, r7
 8007a14:	f7f8 fbe4 	bl	80001e0 <__aeabi_dsub>
 8007a18:	a385      	add	r3, pc, #532	@ (adr r3, 8007c30 <__ieee754_rem_pio2+0x2f0>)
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f8 fbe1 	bl	80001e4 <__adddf3>
 8007a22:	f04f 35ff 	mov.w	r5, #4294967295
 8007a26:	e9c4 8900 	strd	r8, r9, [r4]
 8007a2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a2e:	e7c4      	b.n	80079ba <__ieee754_rem_pio2+0x7a>
 8007a30:	a381      	add	r3, pc, #516	@ (adr r3, 8007c38 <__ieee754_rem_pio2+0x2f8>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 fbd5 	bl	80001e4 <__adddf3>
 8007a3a:	a381      	add	r3, pc, #516	@ (adr r3, 8007c40 <__ieee754_rem_pio2+0x300>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	4606      	mov	r6, r0
 8007a42:	460f      	mov	r7, r1
 8007a44:	f7f8 fbce 	bl	80001e4 <__adddf3>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4680      	mov	r8, r0
 8007a4e:	4689      	mov	r9, r1
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	f7f8 fbc4 	bl	80001e0 <__aeabi_dsub>
 8007a58:	a379      	add	r3, pc, #484	@ (adr r3, 8007c40 <__ieee754_rem_pio2+0x300>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	e7de      	b.n	8007a1e <__ieee754_rem_pio2+0xde>
 8007a60:	4b82      	ldr	r3, [pc, #520]	@ (8007c6c <__ieee754_rem_pio2+0x32c>)
 8007a62:	4598      	cmp	r8, r3
 8007a64:	f200 80d1 	bhi.w	8007c0a <__ieee754_rem_pio2+0x2ca>
 8007a68:	f7fe ff5e 	bl	8006928 <fabs>
 8007a6c:	ec57 6b10 	vmov	r6, r7, d0
 8007a70:	a375      	add	r3, pc, #468	@ (adr r3, 8007c48 <__ieee754_rem_pio2+0x308>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	4630      	mov	r0, r6
 8007a78:	4639      	mov	r1, r7
 8007a7a:	f7f8 fd69 	bl	8000550 <__aeabi_dmul>
 8007a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8007c70 <__ieee754_rem_pio2+0x330>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	f7f8 fbaf 	bl	80001e4 <__adddf3>
 8007a86:	f7f9 f813 	bl	8000ab0 <__aeabi_d2iz>
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	f7f8 fcf6 	bl	800047c <__aeabi_i2d>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a98:	a363      	add	r3, pc, #396	@ (adr r3, 8007c28 <__ieee754_rem_pio2+0x2e8>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	f7f8 fd57 	bl	8000550 <__aeabi_dmul>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	f7f8 fb99 	bl	80001e0 <__aeabi_dsub>
 8007aae:	a360      	add	r3, pc, #384	@ (adr r3, 8007c30 <__ieee754_rem_pio2+0x2f0>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	468b      	mov	fp, r1
 8007ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007abc:	f7f8 fd48 	bl	8000550 <__aeabi_dmul>
 8007ac0:	2d1f      	cmp	r5, #31
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	dc0c      	bgt.n	8007ae2 <__ieee754_rem_pio2+0x1a2>
 8007ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8007c74 <__ieee754_rem_pio2+0x334>)
 8007aca:	1e6a      	subs	r2, r5, #1
 8007acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad0:	4543      	cmp	r3, r8
 8007ad2:	d006      	beq.n	8007ae2 <__ieee754_rem_pio2+0x1a2>
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	463b      	mov	r3, r7
 8007ad8:	4650      	mov	r0, sl
 8007ada:	4659      	mov	r1, fp
 8007adc:	f7f8 fb80 	bl	80001e0 <__aeabi_dsub>
 8007ae0:	e00e      	b.n	8007b00 <__ieee754_rem_pio2+0x1c0>
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	4650      	mov	r0, sl
 8007ae8:	4659      	mov	r1, fp
 8007aea:	f7f8 fb79 	bl	80001e0 <__aeabi_dsub>
 8007aee:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007af2:	9305      	str	r3, [sp, #20]
 8007af4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007af8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	dc02      	bgt.n	8007b06 <__ieee754_rem_pio2+0x1c6>
 8007b00:	e9c4 0100 	strd	r0, r1, [r4]
 8007b04:	e039      	b.n	8007b7a <__ieee754_rem_pio2+0x23a>
 8007b06:	a34c      	add	r3, pc, #304	@ (adr r3, 8007c38 <__ieee754_rem_pio2+0x2f8>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b10:	f7f8 fd1e 	bl	8000550 <__aeabi_dmul>
 8007b14:	4606      	mov	r6, r0
 8007b16:	460f      	mov	r7, r1
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4650      	mov	r0, sl
 8007b1e:	4659      	mov	r1, fp
 8007b20:	f7f8 fb5e 	bl	80001e0 <__aeabi_dsub>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4680      	mov	r8, r0
 8007b2a:	4689      	mov	r9, r1
 8007b2c:	4650      	mov	r0, sl
 8007b2e:	4659      	mov	r1, fp
 8007b30:	f7f8 fb56 	bl	80001e0 <__aeabi_dsub>
 8007b34:	4632      	mov	r2, r6
 8007b36:	463b      	mov	r3, r7
 8007b38:	f7f8 fb52 	bl	80001e0 <__aeabi_dsub>
 8007b3c:	a340      	add	r3, pc, #256	@ (adr r3, 8007c40 <__ieee754_rem_pio2+0x300>)
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	4606      	mov	r6, r0
 8007b44:	460f      	mov	r7, r1
 8007b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b4a:	f7f8 fd01 	bl	8000550 <__aeabi_dmul>
 8007b4e:	4632      	mov	r2, r6
 8007b50:	463b      	mov	r3, r7
 8007b52:	f7f8 fb45 	bl	80001e0 <__aeabi_dsub>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	4640      	mov	r0, r8
 8007b60:	4649      	mov	r1, r9
 8007b62:	f7f8 fb3d 	bl	80001e0 <__aeabi_dsub>
 8007b66:	9a05      	ldr	r2, [sp, #20]
 8007b68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b31      	cmp	r3, #49	@ 0x31
 8007b70:	dc20      	bgt.n	8007bb4 <__ieee754_rem_pio2+0x274>
 8007b72:	e9c4 0100 	strd	r0, r1, [r4]
 8007b76:	46c2      	mov	sl, r8
 8007b78:	46cb      	mov	fp, r9
 8007b7a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007b7e:	4650      	mov	r0, sl
 8007b80:	4642      	mov	r2, r8
 8007b82:	464b      	mov	r3, r9
 8007b84:	4659      	mov	r1, fp
 8007b86:	f7f8 fb2b 	bl	80001e0 <__aeabi_dsub>
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	4632      	mov	r2, r6
 8007b8e:	f7f8 fb27 	bl	80001e0 <__aeabi_dsub>
 8007b92:	9b04      	ldr	r3, [sp, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b9a:	f6bf af0e 	bge.w	80079ba <__ieee754_rem_pio2+0x7a>
 8007b9e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007ba2:	6063      	str	r3, [r4, #4]
 8007ba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ba8:	f8c4 8000 	str.w	r8, [r4]
 8007bac:	60a0      	str	r0, [r4, #8]
 8007bae:	60e3      	str	r3, [r4, #12]
 8007bb0:	426d      	negs	r5, r5
 8007bb2:	e702      	b.n	80079ba <__ieee754_rem_pio2+0x7a>
 8007bb4:	a326      	add	r3, pc, #152	@ (adr r3, 8007c50 <__ieee754_rem_pio2+0x310>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bbe:	f7f8 fcc7 	bl	8000550 <__aeabi_dmul>
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	f7f8 fb07 	bl	80001e0 <__aeabi_dsub>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4682      	mov	sl, r0
 8007bd8:	468b      	mov	fp, r1
 8007bda:	4640      	mov	r0, r8
 8007bdc:	4649      	mov	r1, r9
 8007bde:	f7f8 faff 	bl	80001e0 <__aeabi_dsub>
 8007be2:	4632      	mov	r2, r6
 8007be4:	463b      	mov	r3, r7
 8007be6:	f7f8 fafb 	bl	80001e0 <__aeabi_dsub>
 8007bea:	a31b      	add	r3, pc, #108	@ (adr r3, 8007c58 <__ieee754_rem_pio2+0x318>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	460f      	mov	r7, r1
 8007bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf8:	f7f8 fcaa 	bl	8000550 <__aeabi_dmul>
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	463b      	mov	r3, r7
 8007c00:	f7f8 faee 	bl	80001e0 <__aeabi_dsub>
 8007c04:	4606      	mov	r6, r0
 8007c06:	460f      	mov	r7, r1
 8007c08:	e764      	b.n	8007ad4 <__ieee754_rem_pio2+0x194>
 8007c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8007c78 <__ieee754_rem_pio2+0x338>)
 8007c0c:	4598      	cmp	r8, r3
 8007c0e:	d935      	bls.n	8007c7c <__ieee754_rem_pio2+0x33c>
 8007c10:	4632      	mov	r2, r6
 8007c12:	463b      	mov	r3, r7
 8007c14:	4630      	mov	r0, r6
 8007c16:	4639      	mov	r1, r7
 8007c18:	f7f8 fae2 	bl	80001e0 <__aeabi_dsub>
 8007c1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c20:	e9c4 0100 	strd	r0, r1, [r4]
 8007c24:	e69e      	b.n	8007964 <__ieee754_rem_pio2+0x24>
 8007c26:	bf00      	nop
 8007c28:	54400000 	.word	0x54400000
 8007c2c:	3ff921fb 	.word	0x3ff921fb
 8007c30:	1a626331 	.word	0x1a626331
 8007c34:	3dd0b461 	.word	0x3dd0b461
 8007c38:	1a600000 	.word	0x1a600000
 8007c3c:	3dd0b461 	.word	0x3dd0b461
 8007c40:	2e037073 	.word	0x2e037073
 8007c44:	3ba3198a 	.word	0x3ba3198a
 8007c48:	6dc9c883 	.word	0x6dc9c883
 8007c4c:	3fe45f30 	.word	0x3fe45f30
 8007c50:	2e000000 	.word	0x2e000000
 8007c54:	3ba3198a 	.word	0x3ba3198a
 8007c58:	252049c1 	.word	0x252049c1
 8007c5c:	397b839a 	.word	0x397b839a
 8007c60:	3fe921fb 	.word	0x3fe921fb
 8007c64:	4002d97b 	.word	0x4002d97b
 8007c68:	3ff921fb 	.word	0x3ff921fb
 8007c6c:	413921fb 	.word	0x413921fb
 8007c70:	3fe00000 	.word	0x3fe00000
 8007c74:	08008700 	.word	0x08008700
 8007c78:	7fefffff 	.word	0x7fefffff
 8007c7c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007c80:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007c84:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007c88:	4630      	mov	r0, r6
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	f7f8 ff10 	bl	8000ab0 <__aeabi_d2iz>
 8007c90:	f7f8 fbf4 	bl	800047c <__aeabi_i2d>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4630      	mov	r0, r6
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ca0:	f7f8 fa9e 	bl	80001e0 <__aeabi_dsub>
 8007ca4:	4b22      	ldr	r3, [pc, #136]	@ (8007d30 <__ieee754_rem_pio2+0x3f0>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f7f8 fc52 	bl	8000550 <__aeabi_dmul>
 8007cac:	460f      	mov	r7, r1
 8007cae:	4606      	mov	r6, r0
 8007cb0:	f7f8 fefe 	bl	8000ab0 <__aeabi_d2iz>
 8007cb4:	f7f8 fbe2 	bl	800047c <__aeabi_i2d>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cc4:	f7f8 fa8c 	bl	80001e0 <__aeabi_dsub>
 8007cc8:	4b19      	ldr	r3, [pc, #100]	@ (8007d30 <__ieee754_rem_pio2+0x3f0>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f7f8 fc40 	bl	8000550 <__aeabi_dmul>
 8007cd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007cd4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007cd8:	f04f 0803 	mov.w	r8, #3
 8007cdc:	2600      	movs	r6, #0
 8007cde:	2700      	movs	r7, #0
 8007ce0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	46c2      	mov	sl, r8
 8007cea:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cee:	f7f8 fe97 	bl	8000a20 <__aeabi_dcmpeq>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d1f4      	bne.n	8007ce0 <__ieee754_rem_pio2+0x3a0>
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d34 <__ieee754_rem_pio2+0x3f4>)
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	462a      	mov	r2, r5
 8007d00:	4653      	mov	r3, sl
 8007d02:	4621      	mov	r1, r4
 8007d04:	a806      	add	r0, sp, #24
 8007d06:	f000 f8d3 	bl	8007eb0 <__kernel_rem_pio2>
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	4605      	mov	r5, r0
 8007d10:	f6bf ae53 	bge.w	80079ba <__ieee754_rem_pio2+0x7a>
 8007d14:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007d18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d1c:	e9c4 2300 	strd	r2, r3, [r4]
 8007d20:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007d24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d28:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007d2c:	e740      	b.n	8007bb0 <__ieee754_rem_pio2+0x270>
 8007d2e:	bf00      	nop
 8007d30:	41700000 	.word	0x41700000
 8007d34:	08008780 	.word	0x08008780

08007d38 <scalbn>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	ec55 4b10 	vmov	r4, r5, d0
 8007d3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007d42:	4606      	mov	r6, r0
 8007d44:	462b      	mov	r3, r5
 8007d46:	b991      	cbnz	r1, 8007d6e <scalbn+0x36>
 8007d48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007d4c:	4323      	orrs	r3, r4
 8007d4e:	d03d      	beq.n	8007dcc <scalbn+0x94>
 8007d50:	4b35      	ldr	r3, [pc, #212]	@ (8007e28 <scalbn+0xf0>)
 8007d52:	4620      	mov	r0, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	2200      	movs	r2, #0
 8007d58:	f7f8 fbfa 	bl	8000550 <__aeabi_dmul>
 8007d5c:	4b33      	ldr	r3, [pc, #204]	@ (8007e2c <scalbn+0xf4>)
 8007d5e:	429e      	cmp	r6, r3
 8007d60:	4604      	mov	r4, r0
 8007d62:	460d      	mov	r5, r1
 8007d64:	da0f      	bge.n	8007d86 <scalbn+0x4e>
 8007d66:	a328      	add	r3, pc, #160	@ (adr r3, 8007e08 <scalbn+0xd0>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	e01e      	b.n	8007dac <scalbn+0x74>
 8007d6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007d72:	4291      	cmp	r1, r2
 8007d74:	d10b      	bne.n	8007d8e <scalbn+0x56>
 8007d76:	4622      	mov	r2, r4
 8007d78:	4620      	mov	r0, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	f7f8 fa32 	bl	80001e4 <__adddf3>
 8007d80:	4604      	mov	r4, r0
 8007d82:	460d      	mov	r5, r1
 8007d84:	e022      	b.n	8007dcc <scalbn+0x94>
 8007d86:	460b      	mov	r3, r1
 8007d88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007d8c:	3936      	subs	r1, #54	@ 0x36
 8007d8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007d92:	4296      	cmp	r6, r2
 8007d94:	dd0d      	ble.n	8007db2 <scalbn+0x7a>
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	a11d      	add	r1, pc, #116	@ (adr r1, 8007e10 <scalbn+0xd8>)
 8007d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d9e:	da02      	bge.n	8007da6 <scalbn+0x6e>
 8007da0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007e18 <scalbn+0xe0>)
 8007da2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007da6:	a31a      	add	r3, pc, #104	@ (adr r3, 8007e10 <scalbn+0xd8>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f7f8 fbd0 	bl	8000550 <__aeabi_dmul>
 8007db0:	e7e6      	b.n	8007d80 <scalbn+0x48>
 8007db2:	1872      	adds	r2, r6, r1
 8007db4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007db8:	428a      	cmp	r2, r1
 8007dba:	dcec      	bgt.n	8007d96 <scalbn+0x5e>
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	dd08      	ble.n	8007dd2 <scalbn+0x9a>
 8007dc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007dc4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007dc8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007dcc:	ec45 4b10 	vmov	d0, r4, r5
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
 8007dd2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007dd6:	da08      	bge.n	8007dea <scalbn+0xb2>
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	a10b      	add	r1, pc, #44	@ (adr r1, 8007e08 <scalbn+0xd0>)
 8007ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007de0:	dac1      	bge.n	8007d66 <scalbn+0x2e>
 8007de2:	a10f      	add	r1, pc, #60	@ (adr r1, 8007e20 <scalbn+0xe8>)
 8007de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007de8:	e7bd      	b.n	8007d66 <scalbn+0x2e>
 8007dea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007dee:	3236      	adds	r2, #54	@ 0x36
 8007df0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007df4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007e30 <scalbn+0xf8>)
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	2200      	movs	r2, #0
 8007e00:	e7d4      	b.n	8007dac <scalbn+0x74>
 8007e02:	bf00      	nop
 8007e04:	f3af 8000 	nop.w
 8007e08:	c2f8f359 	.word	0xc2f8f359
 8007e0c:	01a56e1f 	.word	0x01a56e1f
 8007e10:	8800759c 	.word	0x8800759c
 8007e14:	7e37e43c 	.word	0x7e37e43c
 8007e18:	8800759c 	.word	0x8800759c
 8007e1c:	fe37e43c 	.word	0xfe37e43c
 8007e20:	c2f8f359 	.word	0xc2f8f359
 8007e24:	81a56e1f 	.word	0x81a56e1f
 8007e28:	43500000 	.word	0x43500000
 8007e2c:	ffff3cb0 	.word	0xffff3cb0
 8007e30:	3c900000 	.word	0x3c900000

08007e34 <with_errno>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	ed2d 8b02 	vpush	{d8}
 8007e3a:	eeb0 8a40 	vmov.f32	s16, s0
 8007e3e:	eef0 8a60 	vmov.f32	s17, s1
 8007e42:	4604      	mov	r4, r0
 8007e44:	f7fe fab0 	bl	80063a8 <__errno>
 8007e48:	eeb0 0a48 	vmov.f32	s0, s16
 8007e4c:	eef0 0a68 	vmov.f32	s1, s17
 8007e50:	ecbd 8b02 	vpop	{d8}
 8007e54:	6004      	str	r4, [r0, #0]
 8007e56:	bd10      	pop	{r4, pc}

08007e58 <xflow>:
 8007e58:	4603      	mov	r3, r0
 8007e5a:	b507      	push	{r0, r1, r2, lr}
 8007e5c:	ec51 0b10 	vmov	r0, r1, d0
 8007e60:	b183      	cbz	r3, 8007e84 <xflow+0x2c>
 8007e62:	4602      	mov	r2, r0
 8007e64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e68:	e9cd 2300 	strd	r2, r3, [sp]
 8007e6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e70:	f7f8 fb6e 	bl	8000550 <__aeabi_dmul>
 8007e74:	ec41 0b10 	vmov	d0, r0, r1
 8007e78:	2022      	movs	r0, #34	@ 0x22
 8007e7a:	b003      	add	sp, #12
 8007e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e80:	f7ff bfd8 	b.w	8007e34 <with_errno>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	e7ee      	b.n	8007e68 <xflow+0x10>
 8007e8a:	0000      	movs	r0, r0
 8007e8c:	0000      	movs	r0, r0
	...

08007e90 <__math_uflow>:
 8007e90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007e98 <__math_uflow+0x8>
 8007e94:	f7ff bfe0 	b.w	8007e58 <xflow>
 8007e98:	00000000 	.word	0x00000000
 8007e9c:	10000000 	.word	0x10000000

08007ea0 <__math_oflow>:
 8007ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ea8 <__math_oflow+0x8>
 8007ea4:	f7ff bfd8 	b.w	8007e58 <xflow>
 8007ea8:	00000000 	.word	0x00000000
 8007eac:	70000000 	.word	0x70000000

08007eb0 <__kernel_rem_pio2>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	ed2d 8b02 	vpush	{d8}
 8007eb8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007ebc:	f112 0f14 	cmn.w	r2, #20
 8007ec0:	9306      	str	r3, [sp, #24]
 8007ec2:	9104      	str	r1, [sp, #16]
 8007ec4:	4bbe      	ldr	r3, [pc, #760]	@ (80081c0 <__kernel_rem_pio2+0x310>)
 8007ec6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007ec8:	9008      	str	r0, [sp, #32]
 8007eca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	9b06      	ldr	r3, [sp, #24]
 8007ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ed6:	bfa8      	it	ge
 8007ed8:	1ed4      	subge	r4, r2, #3
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	bfb2      	itee	lt
 8007ede:	2400      	movlt	r4, #0
 8007ee0:	2318      	movge	r3, #24
 8007ee2:	fb94 f4f3 	sdivge	r4, r4, r3
 8007ee6:	f06f 0317 	mvn.w	r3, #23
 8007eea:	fb04 3303 	mla	r3, r4, r3, r3
 8007eee:	eb03 0b02 	add.w	fp, r3, r2
 8007ef2:	9b00      	ldr	r3, [sp, #0]
 8007ef4:	9a05      	ldr	r2, [sp, #20]
 8007ef6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80081b0 <__kernel_rem_pio2+0x300>
 8007efa:	eb03 0802 	add.w	r8, r3, r2
 8007efe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007f00:	1aa7      	subs	r7, r4, r2
 8007f02:	ae20      	add	r6, sp, #128	@ 0x80
 8007f04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007f08:	2500      	movs	r5, #0
 8007f0a:	4545      	cmp	r5, r8
 8007f0c:	dd13      	ble.n	8007f36 <__kernel_rem_pio2+0x86>
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	aa20      	add	r2, sp, #128	@ 0x80
 8007f12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007f16:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007f1a:	f04f 0800 	mov.w	r8, #0
 8007f1e:	9b00      	ldr	r3, [sp, #0]
 8007f20:	4598      	cmp	r8, r3
 8007f22:	dc31      	bgt.n	8007f88 <__kernel_rem_pio2+0xd8>
 8007f24:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80081b0 <__kernel_rem_pio2+0x300>
 8007f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f30:	462f      	mov	r7, r5
 8007f32:	2600      	movs	r6, #0
 8007f34:	e01b      	b.n	8007f6e <__kernel_rem_pio2+0xbe>
 8007f36:	42ef      	cmn	r7, r5
 8007f38:	d407      	bmi.n	8007f4a <__kernel_rem_pio2+0x9a>
 8007f3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007f3e:	f7f8 fa9d 	bl	800047c <__aeabi_i2d>
 8007f42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007f46:	3501      	adds	r5, #1
 8007f48:	e7df      	b.n	8007f0a <__kernel_rem_pio2+0x5a>
 8007f4a:	ec51 0b18 	vmov	r0, r1, d8
 8007f4e:	e7f8      	b.n	8007f42 <__kernel_rem_pio2+0x92>
 8007f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007f58:	f7f8 fafa 	bl	8000550 <__aeabi_dmul>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f64:	f7f8 f93e 	bl	80001e4 <__adddf3>
 8007f68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	429e      	cmp	r6, r3
 8007f72:	f1a7 0708 	sub.w	r7, r7, #8
 8007f76:	ddeb      	ble.n	8007f50 <__kernel_rem_pio2+0xa0>
 8007f78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f7c:	f108 0801 	add.w	r8, r8, #1
 8007f80:	ecaa 7b02 	vstmia	sl!, {d7}
 8007f84:	3508      	adds	r5, #8
 8007f86:	e7ca      	b.n	8007f1e <__kernel_rem_pio2+0x6e>
 8007f88:	9b00      	ldr	r3, [sp, #0]
 8007f8a:	f8dd 8000 	ldr.w	r8, [sp]
 8007f8e:	aa0c      	add	r2, sp, #48	@ 0x30
 8007f90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f94:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007f98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f9e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007fa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fa4:	ab98      	add	r3, sp, #608	@ 0x260
 8007fa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007faa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007fae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fb2:	ac0c      	add	r4, sp, #48	@ 0x30
 8007fb4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007fb6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007fba:	46a1      	mov	r9, r4
 8007fbc:	46c2      	mov	sl, r8
 8007fbe:	f1ba 0f00 	cmp.w	sl, #0
 8007fc2:	f1a5 0508 	sub.w	r5, r5, #8
 8007fc6:	dc77      	bgt.n	80080b8 <__kernel_rem_pio2+0x208>
 8007fc8:	4658      	mov	r0, fp
 8007fca:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007fce:	f7ff feb3 	bl	8007d38 <scalbn>
 8007fd2:	ec57 6b10 	vmov	r6, r7, d0
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 fab6 	bl	8000550 <__aeabi_dmul>
 8007fe4:	ec41 0b10 	vmov	d0, r0, r1
 8007fe8:	f000 faba 	bl	8008560 <floor>
 8007fec:	4b75      	ldr	r3, [pc, #468]	@ (80081c4 <__kernel_rem_pio2+0x314>)
 8007fee:	ec51 0b10 	vmov	r0, r1, d0
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f7f8 faac 	bl	8000550 <__aeabi_dmul>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	4639      	mov	r1, r7
 8008000:	f7f8 f8ee 	bl	80001e0 <__aeabi_dsub>
 8008004:	460f      	mov	r7, r1
 8008006:	4606      	mov	r6, r0
 8008008:	f7f8 fd52 	bl	8000ab0 <__aeabi_d2iz>
 800800c:	9002      	str	r0, [sp, #8]
 800800e:	f7f8 fa35 	bl	800047c <__aeabi_i2d>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4630      	mov	r0, r6
 8008018:	4639      	mov	r1, r7
 800801a:	f7f8 f8e1 	bl	80001e0 <__aeabi_dsub>
 800801e:	f1bb 0f00 	cmp.w	fp, #0
 8008022:	4606      	mov	r6, r0
 8008024:	460f      	mov	r7, r1
 8008026:	dd6c      	ble.n	8008102 <__kernel_rem_pio2+0x252>
 8008028:	f108 31ff 	add.w	r1, r8, #4294967295
 800802c:	ab0c      	add	r3, sp, #48	@ 0x30
 800802e:	9d02      	ldr	r5, [sp, #8]
 8008030:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008034:	f1cb 0018 	rsb	r0, fp, #24
 8008038:	fa43 f200 	asr.w	r2, r3, r0
 800803c:	4415      	add	r5, r2
 800803e:	4082      	lsls	r2, r0
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	aa0c      	add	r2, sp, #48	@ 0x30
 8008044:	9502      	str	r5, [sp, #8]
 8008046:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800804a:	f1cb 0217 	rsb	r2, fp, #23
 800804e:	fa43 f902 	asr.w	r9, r3, r2
 8008052:	f1b9 0f00 	cmp.w	r9, #0
 8008056:	dd64      	ble.n	8008122 <__kernel_rem_pio2+0x272>
 8008058:	9b02      	ldr	r3, [sp, #8]
 800805a:	2200      	movs	r2, #0
 800805c:	3301      	adds	r3, #1
 800805e:	9302      	str	r3, [sp, #8]
 8008060:	4615      	mov	r5, r2
 8008062:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008066:	4590      	cmp	r8, r2
 8008068:	f300 80b8 	bgt.w	80081dc <__kernel_rem_pio2+0x32c>
 800806c:	f1bb 0f00 	cmp.w	fp, #0
 8008070:	dd07      	ble.n	8008082 <__kernel_rem_pio2+0x1d2>
 8008072:	f1bb 0f01 	cmp.w	fp, #1
 8008076:	f000 80bf 	beq.w	80081f8 <__kernel_rem_pio2+0x348>
 800807a:	f1bb 0f02 	cmp.w	fp, #2
 800807e:	f000 80c6 	beq.w	800820e <__kernel_rem_pio2+0x35e>
 8008082:	f1b9 0f02 	cmp.w	r9, #2
 8008086:	d14c      	bne.n	8008122 <__kernel_rem_pio2+0x272>
 8008088:	4632      	mov	r2, r6
 800808a:	463b      	mov	r3, r7
 800808c:	494e      	ldr	r1, [pc, #312]	@ (80081c8 <__kernel_rem_pio2+0x318>)
 800808e:	2000      	movs	r0, #0
 8008090:	f7f8 f8a6 	bl	80001e0 <__aeabi_dsub>
 8008094:	4606      	mov	r6, r0
 8008096:	460f      	mov	r7, r1
 8008098:	2d00      	cmp	r5, #0
 800809a:	d042      	beq.n	8008122 <__kernel_rem_pio2+0x272>
 800809c:	4658      	mov	r0, fp
 800809e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80081b8 <__kernel_rem_pio2+0x308>
 80080a2:	f7ff fe49 	bl	8007d38 <scalbn>
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	ec53 2b10 	vmov	r2, r3, d0
 80080ae:	f7f8 f897 	bl	80001e0 <__aeabi_dsub>
 80080b2:	4606      	mov	r6, r0
 80080b4:	460f      	mov	r7, r1
 80080b6:	e034      	b.n	8008122 <__kernel_rem_pio2+0x272>
 80080b8:	4b44      	ldr	r3, [pc, #272]	@ (80081cc <__kernel_rem_pio2+0x31c>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c0:	f7f8 fa46 	bl	8000550 <__aeabi_dmul>
 80080c4:	f7f8 fcf4 	bl	8000ab0 <__aeabi_d2iz>
 80080c8:	f7f8 f9d8 	bl	800047c <__aeabi_i2d>
 80080cc:	4b40      	ldr	r3, [pc, #256]	@ (80081d0 <__kernel_rem_pio2+0x320>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	4606      	mov	r6, r0
 80080d2:	460f      	mov	r7, r1
 80080d4:	f7f8 fa3c 	bl	8000550 <__aeabi_dmul>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e0:	f7f8 f87e 	bl	80001e0 <__aeabi_dsub>
 80080e4:	f7f8 fce4 	bl	8000ab0 <__aeabi_d2iz>
 80080e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080ec:	f849 0b04 	str.w	r0, [r9], #4
 80080f0:	4639      	mov	r1, r7
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7f8 f876 	bl	80001e4 <__adddf3>
 80080f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008100:	e75d      	b.n	8007fbe <__kernel_rem_pio2+0x10e>
 8008102:	d107      	bne.n	8008114 <__kernel_rem_pio2+0x264>
 8008104:	f108 33ff 	add.w	r3, r8, #4294967295
 8008108:	aa0c      	add	r2, sp, #48	@ 0x30
 800810a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800810e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8008112:	e79e      	b.n	8008052 <__kernel_rem_pio2+0x1a2>
 8008114:	4b2f      	ldr	r3, [pc, #188]	@ (80081d4 <__kernel_rem_pio2+0x324>)
 8008116:	2200      	movs	r2, #0
 8008118:	f7f8 fca0 	bl	8000a5c <__aeabi_dcmpge>
 800811c:	2800      	cmp	r0, #0
 800811e:	d143      	bne.n	80081a8 <__kernel_rem_pio2+0x2f8>
 8008120:	4681      	mov	r9, r0
 8008122:	2200      	movs	r2, #0
 8008124:	2300      	movs	r3, #0
 8008126:	4630      	mov	r0, r6
 8008128:	4639      	mov	r1, r7
 800812a:	f7f8 fc79 	bl	8000a20 <__aeabi_dcmpeq>
 800812e:	2800      	cmp	r0, #0
 8008130:	f000 80bf 	beq.w	80082b2 <__kernel_rem_pio2+0x402>
 8008134:	f108 33ff 	add.w	r3, r8, #4294967295
 8008138:	2200      	movs	r2, #0
 800813a:	9900      	ldr	r1, [sp, #0]
 800813c:	428b      	cmp	r3, r1
 800813e:	da6e      	bge.n	800821e <__kernel_rem_pio2+0x36e>
 8008140:	2a00      	cmp	r2, #0
 8008142:	f000 8089 	beq.w	8008258 <__kernel_rem_pio2+0x3a8>
 8008146:	f108 38ff 	add.w	r8, r8, #4294967295
 800814a:	ab0c      	add	r3, sp, #48	@ 0x30
 800814c:	f1ab 0b18 	sub.w	fp, fp, #24
 8008150:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d0f6      	beq.n	8008146 <__kernel_rem_pio2+0x296>
 8008158:	4658      	mov	r0, fp
 800815a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80081b8 <__kernel_rem_pio2+0x308>
 800815e:	f7ff fdeb 	bl	8007d38 <scalbn>
 8008162:	f108 0301 	add.w	r3, r8, #1
 8008166:	00da      	lsls	r2, r3, #3
 8008168:	9205      	str	r2, [sp, #20]
 800816a:	ec55 4b10 	vmov	r4, r5, d0
 800816e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008170:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80081cc <__kernel_rem_pio2+0x31c>
 8008174:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008178:	4646      	mov	r6, r8
 800817a:	f04f 0a00 	mov.w	sl, #0
 800817e:	2e00      	cmp	r6, #0
 8008180:	f280 80cf 	bge.w	8008322 <__kernel_rem_pio2+0x472>
 8008184:	4644      	mov	r4, r8
 8008186:	2c00      	cmp	r4, #0
 8008188:	f2c0 80fd 	blt.w	8008386 <__kernel_rem_pio2+0x4d6>
 800818c:	4b12      	ldr	r3, [pc, #72]	@ (80081d8 <__kernel_rem_pio2+0x328>)
 800818e:	461f      	mov	r7, r3
 8008190:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008196:	9306      	str	r3, [sp, #24]
 8008198:	f04f 0a00 	mov.w	sl, #0
 800819c:	f04f 0b00 	mov.w	fp, #0
 80081a0:	2600      	movs	r6, #0
 80081a2:	eba8 0504 	sub.w	r5, r8, r4
 80081a6:	e0e2      	b.n	800836e <__kernel_rem_pio2+0x4be>
 80081a8:	f04f 0902 	mov.w	r9, #2
 80081ac:	e754      	b.n	8008058 <__kernel_rem_pio2+0x1a8>
 80081ae:	bf00      	nop
	...
 80081bc:	3ff00000 	.word	0x3ff00000
 80081c0:	080088c8 	.word	0x080088c8
 80081c4:	40200000 	.word	0x40200000
 80081c8:	3ff00000 	.word	0x3ff00000
 80081cc:	3e700000 	.word	0x3e700000
 80081d0:	41700000 	.word	0x41700000
 80081d4:	3fe00000 	.word	0x3fe00000
 80081d8:	08008888 	.word	0x08008888
 80081dc:	f854 3b04 	ldr.w	r3, [r4], #4
 80081e0:	b945      	cbnz	r5, 80081f4 <__kernel_rem_pio2+0x344>
 80081e2:	b123      	cbz	r3, 80081ee <__kernel_rem_pio2+0x33e>
 80081e4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80081e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80081ec:	2301      	movs	r3, #1
 80081ee:	3201      	adds	r2, #1
 80081f0:	461d      	mov	r5, r3
 80081f2:	e738      	b.n	8008066 <__kernel_rem_pio2+0x1b6>
 80081f4:	1acb      	subs	r3, r1, r3
 80081f6:	e7f7      	b.n	80081e8 <__kernel_rem_pio2+0x338>
 80081f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80081fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80081fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008202:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008206:	a90c      	add	r1, sp, #48	@ 0x30
 8008208:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800820c:	e739      	b.n	8008082 <__kernel_rem_pio2+0x1d2>
 800820e:	f108 32ff 	add.w	r2, r8, #4294967295
 8008212:	ab0c      	add	r3, sp, #48	@ 0x30
 8008214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008218:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800821c:	e7f3      	b.n	8008206 <__kernel_rem_pio2+0x356>
 800821e:	a90c      	add	r1, sp, #48	@ 0x30
 8008220:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008224:	3b01      	subs	r3, #1
 8008226:	430a      	orrs	r2, r1
 8008228:	e787      	b.n	800813a <__kernel_rem_pio2+0x28a>
 800822a:	3401      	adds	r4, #1
 800822c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008230:	2a00      	cmp	r2, #0
 8008232:	d0fa      	beq.n	800822a <__kernel_rem_pio2+0x37a>
 8008234:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008236:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800823a:	eb0d 0503 	add.w	r5, sp, r3
 800823e:	9b06      	ldr	r3, [sp, #24]
 8008240:	aa20      	add	r2, sp, #128	@ 0x80
 8008242:	4443      	add	r3, r8
 8008244:	f108 0701 	add.w	r7, r8, #1
 8008248:	3d98      	subs	r5, #152	@ 0x98
 800824a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800824e:	4444      	add	r4, r8
 8008250:	42bc      	cmp	r4, r7
 8008252:	da04      	bge.n	800825e <__kernel_rem_pio2+0x3ae>
 8008254:	46a0      	mov	r8, r4
 8008256:	e6a2      	b.n	8007f9e <__kernel_rem_pio2+0xee>
 8008258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800825a:	2401      	movs	r4, #1
 800825c:	e7e6      	b.n	800822c <__kernel_rem_pio2+0x37c>
 800825e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008260:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008264:	f7f8 f90a 	bl	800047c <__aeabi_i2d>
 8008268:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8008530 <__kernel_rem_pio2+0x680>
 800826c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008270:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008278:	46b2      	mov	sl, r6
 800827a:	f04f 0800 	mov.w	r8, #0
 800827e:	9b05      	ldr	r3, [sp, #20]
 8008280:	4598      	cmp	r8, r3
 8008282:	dd05      	ble.n	8008290 <__kernel_rem_pio2+0x3e0>
 8008284:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008288:	3701      	adds	r7, #1
 800828a:	eca5 7b02 	vstmia	r5!, {d7}
 800828e:	e7df      	b.n	8008250 <__kernel_rem_pio2+0x3a0>
 8008290:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8008294:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008298:	f7f8 f95a 	bl	8000550 <__aeabi_dmul>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a4:	f7f7 ff9e 	bl	80001e4 <__adddf3>
 80082a8:	f108 0801 	add.w	r8, r8, #1
 80082ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b0:	e7e5      	b.n	800827e <__kernel_rem_pio2+0x3ce>
 80082b2:	f1cb 0000 	rsb	r0, fp, #0
 80082b6:	ec47 6b10 	vmov	d0, r6, r7
 80082ba:	f7ff fd3d 	bl	8007d38 <scalbn>
 80082be:	ec55 4b10 	vmov	r4, r5, d0
 80082c2:	4b9d      	ldr	r3, [pc, #628]	@ (8008538 <__kernel_rem_pio2+0x688>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	4620      	mov	r0, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	f7f8 fbc7 	bl	8000a5c <__aeabi_dcmpge>
 80082ce:	b300      	cbz	r0, 8008312 <__kernel_rem_pio2+0x462>
 80082d0:	4b9a      	ldr	r3, [pc, #616]	@ (800853c <__kernel_rem_pio2+0x68c>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	4620      	mov	r0, r4
 80082d6:	4629      	mov	r1, r5
 80082d8:	f7f8 f93a 	bl	8000550 <__aeabi_dmul>
 80082dc:	f7f8 fbe8 	bl	8000ab0 <__aeabi_d2iz>
 80082e0:	4606      	mov	r6, r0
 80082e2:	f7f8 f8cb 	bl	800047c <__aeabi_i2d>
 80082e6:	4b94      	ldr	r3, [pc, #592]	@ (8008538 <__kernel_rem_pio2+0x688>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	f7f8 f931 	bl	8000550 <__aeabi_dmul>
 80082ee:	460b      	mov	r3, r1
 80082f0:	4602      	mov	r2, r0
 80082f2:	4629      	mov	r1, r5
 80082f4:	4620      	mov	r0, r4
 80082f6:	f7f7 ff73 	bl	80001e0 <__aeabi_dsub>
 80082fa:	f7f8 fbd9 	bl	8000ab0 <__aeabi_d2iz>
 80082fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8008300:	f10b 0b18 	add.w	fp, fp, #24
 8008304:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008308:	f108 0801 	add.w	r8, r8, #1
 800830c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008310:	e722      	b.n	8008158 <__kernel_rem_pio2+0x2a8>
 8008312:	4620      	mov	r0, r4
 8008314:	4629      	mov	r1, r5
 8008316:	f7f8 fbcb 	bl	8000ab0 <__aeabi_d2iz>
 800831a:	ab0c      	add	r3, sp, #48	@ 0x30
 800831c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008320:	e71a      	b.n	8008158 <__kernel_rem_pio2+0x2a8>
 8008322:	ab0c      	add	r3, sp, #48	@ 0x30
 8008324:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008328:	f7f8 f8a8 	bl	800047c <__aeabi_i2d>
 800832c:	4622      	mov	r2, r4
 800832e:	462b      	mov	r3, r5
 8008330:	f7f8 f90e 	bl	8000550 <__aeabi_dmul>
 8008334:	4652      	mov	r2, sl
 8008336:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800833a:	465b      	mov	r3, fp
 800833c:	4620      	mov	r0, r4
 800833e:	4629      	mov	r1, r5
 8008340:	f7f8 f906 	bl	8000550 <__aeabi_dmul>
 8008344:	3e01      	subs	r6, #1
 8008346:	4604      	mov	r4, r0
 8008348:	460d      	mov	r5, r1
 800834a:	e718      	b.n	800817e <__kernel_rem_pio2+0x2ce>
 800834c:	9906      	ldr	r1, [sp, #24]
 800834e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008352:	9106      	str	r1, [sp, #24]
 8008354:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008358:	f7f8 f8fa 	bl	8000550 <__aeabi_dmul>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4650      	mov	r0, sl
 8008362:	4659      	mov	r1, fp
 8008364:	f7f7 ff3e 	bl	80001e4 <__adddf3>
 8008368:	3601      	adds	r6, #1
 800836a:	4682      	mov	sl, r0
 800836c:	468b      	mov	fp, r1
 800836e:	9b00      	ldr	r3, [sp, #0]
 8008370:	429e      	cmp	r6, r3
 8008372:	dc01      	bgt.n	8008378 <__kernel_rem_pio2+0x4c8>
 8008374:	42b5      	cmp	r5, r6
 8008376:	dae9      	bge.n	800834c <__kernel_rem_pio2+0x49c>
 8008378:	ab48      	add	r3, sp, #288	@ 0x120
 800837a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800837e:	e9c5 ab00 	strd	sl, fp, [r5]
 8008382:	3c01      	subs	r4, #1
 8008384:	e6ff      	b.n	8008186 <__kernel_rem_pio2+0x2d6>
 8008386:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008388:	2b02      	cmp	r3, #2
 800838a:	dc0b      	bgt.n	80083a4 <__kernel_rem_pio2+0x4f4>
 800838c:	2b00      	cmp	r3, #0
 800838e:	dc39      	bgt.n	8008404 <__kernel_rem_pio2+0x554>
 8008390:	d05d      	beq.n	800844e <__kernel_rem_pio2+0x59e>
 8008392:	9b02      	ldr	r3, [sp, #8]
 8008394:	f003 0007 	and.w	r0, r3, #7
 8008398:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800839c:	ecbd 8b02 	vpop	{d8}
 80083a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d1f3      	bne.n	8008392 <__kernel_rem_pio2+0x4e2>
 80083aa:	9b05      	ldr	r3, [sp, #20]
 80083ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80083b0:	eb0d 0403 	add.w	r4, sp, r3
 80083b4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80083b8:	4625      	mov	r5, r4
 80083ba:	46c2      	mov	sl, r8
 80083bc:	f1ba 0f00 	cmp.w	sl, #0
 80083c0:	f1a5 0508 	sub.w	r5, r5, #8
 80083c4:	dc6b      	bgt.n	800849e <__kernel_rem_pio2+0x5ee>
 80083c6:	4645      	mov	r5, r8
 80083c8:	2d01      	cmp	r5, #1
 80083ca:	f1a4 0408 	sub.w	r4, r4, #8
 80083ce:	f300 8087 	bgt.w	80084e0 <__kernel_rem_pio2+0x630>
 80083d2:	9c05      	ldr	r4, [sp, #20]
 80083d4:	ab48      	add	r3, sp, #288	@ 0x120
 80083d6:	441c      	add	r4, r3
 80083d8:	2000      	movs	r0, #0
 80083da:	2100      	movs	r1, #0
 80083dc:	f1b8 0f01 	cmp.w	r8, #1
 80083e0:	f300 809c 	bgt.w	800851c <__kernel_rem_pio2+0x66c>
 80083e4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80083e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80083ec:	f1b9 0f00 	cmp.w	r9, #0
 80083f0:	f040 80a6 	bne.w	8008540 <__kernel_rem_pio2+0x690>
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	e9c3 7800 	strd	r7, r8, [r3]
 80083fa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80083fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008402:	e7c6      	b.n	8008392 <__kernel_rem_pio2+0x4e2>
 8008404:	9d05      	ldr	r5, [sp, #20]
 8008406:	ab48      	add	r3, sp, #288	@ 0x120
 8008408:	441d      	add	r5, r3
 800840a:	4644      	mov	r4, r8
 800840c:	2000      	movs	r0, #0
 800840e:	2100      	movs	r1, #0
 8008410:	2c00      	cmp	r4, #0
 8008412:	da35      	bge.n	8008480 <__kernel_rem_pio2+0x5d0>
 8008414:	f1b9 0f00 	cmp.w	r9, #0
 8008418:	d038      	beq.n	800848c <__kernel_rem_pio2+0x5dc>
 800841a:	4602      	mov	r2, r0
 800841c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008420:	9c04      	ldr	r4, [sp, #16]
 8008422:	e9c4 2300 	strd	r2, r3, [r4]
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800842e:	f7f7 fed7 	bl	80001e0 <__aeabi_dsub>
 8008432:	ad4a      	add	r5, sp, #296	@ 0x128
 8008434:	2401      	movs	r4, #1
 8008436:	45a0      	cmp	r8, r4
 8008438:	da2b      	bge.n	8008492 <__kernel_rem_pio2+0x5e2>
 800843a:	f1b9 0f00 	cmp.w	r9, #0
 800843e:	d002      	beq.n	8008446 <__kernel_rem_pio2+0x596>
 8008440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008444:	4619      	mov	r1, r3
 8008446:	9b04      	ldr	r3, [sp, #16]
 8008448:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800844c:	e7a1      	b.n	8008392 <__kernel_rem_pio2+0x4e2>
 800844e:	9c05      	ldr	r4, [sp, #20]
 8008450:	ab48      	add	r3, sp, #288	@ 0x120
 8008452:	441c      	add	r4, r3
 8008454:	2000      	movs	r0, #0
 8008456:	2100      	movs	r1, #0
 8008458:	f1b8 0f00 	cmp.w	r8, #0
 800845c:	da09      	bge.n	8008472 <__kernel_rem_pio2+0x5c2>
 800845e:	f1b9 0f00 	cmp.w	r9, #0
 8008462:	d002      	beq.n	800846a <__kernel_rem_pio2+0x5ba>
 8008464:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008468:	4619      	mov	r1, r3
 800846a:	9b04      	ldr	r3, [sp, #16]
 800846c:	e9c3 0100 	strd	r0, r1, [r3]
 8008470:	e78f      	b.n	8008392 <__kernel_rem_pio2+0x4e2>
 8008472:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008476:	f7f7 feb5 	bl	80001e4 <__adddf3>
 800847a:	f108 38ff 	add.w	r8, r8, #4294967295
 800847e:	e7eb      	b.n	8008458 <__kernel_rem_pio2+0x5a8>
 8008480:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008484:	f7f7 feae 	bl	80001e4 <__adddf3>
 8008488:	3c01      	subs	r4, #1
 800848a:	e7c1      	b.n	8008410 <__kernel_rem_pio2+0x560>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	e7c6      	b.n	8008420 <__kernel_rem_pio2+0x570>
 8008492:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008496:	f7f7 fea5 	bl	80001e4 <__adddf3>
 800849a:	3401      	adds	r4, #1
 800849c:	e7cb      	b.n	8008436 <__kernel_rem_pio2+0x586>
 800849e:	ed95 7b00 	vldr	d7, [r5]
 80084a2:	ed8d 7b00 	vstr	d7, [sp]
 80084a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80084aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ae:	ec53 2b17 	vmov	r2, r3, d7
 80084b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084b6:	f7f7 fe95 	bl	80001e4 <__adddf3>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4606      	mov	r6, r0
 80084c0:	460f      	mov	r7, r1
 80084c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084c6:	f7f7 fe8b 	bl	80001e0 <__aeabi_dsub>
 80084ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084ce:	f7f7 fe89 	bl	80001e4 <__adddf3>
 80084d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80084da:	e9c5 6700 	strd	r6, r7, [r5]
 80084de:	e76d      	b.n	80083bc <__kernel_rem_pio2+0x50c>
 80084e0:	ed94 7b00 	vldr	d7, [r4]
 80084e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80084e8:	ec51 0b17 	vmov	r0, r1, d7
 80084ec:	4652      	mov	r2, sl
 80084ee:	465b      	mov	r3, fp
 80084f0:	ed8d 7b00 	vstr	d7, [sp]
 80084f4:	f7f7 fe76 	bl	80001e4 <__adddf3>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4606      	mov	r6, r0
 80084fe:	460f      	mov	r7, r1
 8008500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008504:	f7f7 fe6c 	bl	80001e0 <__aeabi_dsub>
 8008508:	4652      	mov	r2, sl
 800850a:	465b      	mov	r3, fp
 800850c:	f7f7 fe6a 	bl	80001e4 <__adddf3>
 8008510:	3d01      	subs	r5, #1
 8008512:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008516:	e9c4 6700 	strd	r6, r7, [r4]
 800851a:	e755      	b.n	80083c8 <__kernel_rem_pio2+0x518>
 800851c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008520:	f7f7 fe60 	bl	80001e4 <__adddf3>
 8008524:	f108 38ff 	add.w	r8, r8, #4294967295
 8008528:	e758      	b.n	80083dc <__kernel_rem_pio2+0x52c>
 800852a:	bf00      	nop
 800852c:	f3af 8000 	nop.w
	...
 8008538:	41700000 	.word	0x41700000
 800853c:	3e700000 	.word	0x3e700000
 8008540:	9b04      	ldr	r3, [sp, #16]
 8008542:	9a04      	ldr	r2, [sp, #16]
 8008544:	601f      	str	r7, [r3, #0]
 8008546:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800854a:	605c      	str	r4, [r3, #4]
 800854c:	609d      	str	r5, [r3, #8]
 800854e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008552:	60d3      	str	r3, [r2, #12]
 8008554:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008558:	6110      	str	r0, [r2, #16]
 800855a:	6153      	str	r3, [r2, #20]
 800855c:	e719      	b.n	8008392 <__kernel_rem_pio2+0x4e2>
 800855e:	bf00      	nop

08008560 <floor>:
 8008560:	ec51 0b10 	vmov	r0, r1, d0
 8008564:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800856c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008570:	2e13      	cmp	r6, #19
 8008572:	460c      	mov	r4, r1
 8008574:	4605      	mov	r5, r0
 8008576:	4680      	mov	r8, r0
 8008578:	dc34      	bgt.n	80085e4 <floor+0x84>
 800857a:	2e00      	cmp	r6, #0
 800857c:	da17      	bge.n	80085ae <floor+0x4e>
 800857e:	a332      	add	r3, pc, #200	@ (adr r3, 8008648 <floor+0xe8>)
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f7f7 fe2e 	bl	80001e4 <__adddf3>
 8008588:	2200      	movs	r2, #0
 800858a:	2300      	movs	r3, #0
 800858c:	f7f8 fa70 	bl	8000a70 <__aeabi_dcmpgt>
 8008590:	b150      	cbz	r0, 80085a8 <floor+0x48>
 8008592:	2c00      	cmp	r4, #0
 8008594:	da55      	bge.n	8008642 <floor+0xe2>
 8008596:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800859a:	432c      	orrs	r4, r5
 800859c:	2500      	movs	r5, #0
 800859e:	42ac      	cmp	r4, r5
 80085a0:	4c2b      	ldr	r4, [pc, #172]	@ (8008650 <floor+0xf0>)
 80085a2:	bf08      	it	eq
 80085a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80085a8:	4621      	mov	r1, r4
 80085aa:	4628      	mov	r0, r5
 80085ac:	e023      	b.n	80085f6 <floor+0x96>
 80085ae:	4f29      	ldr	r7, [pc, #164]	@ (8008654 <floor+0xf4>)
 80085b0:	4137      	asrs	r7, r6
 80085b2:	ea01 0307 	and.w	r3, r1, r7
 80085b6:	4303      	orrs	r3, r0
 80085b8:	d01d      	beq.n	80085f6 <floor+0x96>
 80085ba:	a323      	add	r3, pc, #140	@ (adr r3, 8008648 <floor+0xe8>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f7 fe10 	bl	80001e4 <__adddf3>
 80085c4:	2200      	movs	r2, #0
 80085c6:	2300      	movs	r3, #0
 80085c8:	f7f8 fa52 	bl	8000a70 <__aeabi_dcmpgt>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d0eb      	beq.n	80085a8 <floor+0x48>
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	bfbe      	ittt	lt
 80085d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80085d8:	4133      	asrlt	r3, r6
 80085da:	18e4      	addlt	r4, r4, r3
 80085dc:	ea24 0407 	bic.w	r4, r4, r7
 80085e0:	2500      	movs	r5, #0
 80085e2:	e7e1      	b.n	80085a8 <floor+0x48>
 80085e4:	2e33      	cmp	r6, #51	@ 0x33
 80085e6:	dd0a      	ble.n	80085fe <floor+0x9e>
 80085e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80085ec:	d103      	bne.n	80085f6 <floor+0x96>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	f7f7 fdf7 	bl	80001e4 <__adddf3>
 80085f6:	ec41 0b10 	vmov	d0, r0, r1
 80085fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008602:	f04f 37ff 	mov.w	r7, #4294967295
 8008606:	40df      	lsrs	r7, r3
 8008608:	4207      	tst	r7, r0
 800860a:	d0f4      	beq.n	80085f6 <floor+0x96>
 800860c:	a30e      	add	r3, pc, #56	@ (adr r3, 8008648 <floor+0xe8>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f7f7 fde7 	bl	80001e4 <__adddf3>
 8008616:	2200      	movs	r2, #0
 8008618:	2300      	movs	r3, #0
 800861a:	f7f8 fa29 	bl	8000a70 <__aeabi_dcmpgt>
 800861e:	2800      	cmp	r0, #0
 8008620:	d0c2      	beq.n	80085a8 <floor+0x48>
 8008622:	2c00      	cmp	r4, #0
 8008624:	da0a      	bge.n	800863c <floor+0xdc>
 8008626:	2e14      	cmp	r6, #20
 8008628:	d101      	bne.n	800862e <floor+0xce>
 800862a:	3401      	adds	r4, #1
 800862c:	e006      	b.n	800863c <floor+0xdc>
 800862e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008632:	2301      	movs	r3, #1
 8008634:	40b3      	lsls	r3, r6
 8008636:	441d      	add	r5, r3
 8008638:	4545      	cmp	r5, r8
 800863a:	d3f6      	bcc.n	800862a <floor+0xca>
 800863c:	ea25 0507 	bic.w	r5, r5, r7
 8008640:	e7b2      	b.n	80085a8 <floor+0x48>
 8008642:	2500      	movs	r5, #0
 8008644:	462c      	mov	r4, r5
 8008646:	e7af      	b.n	80085a8 <floor+0x48>
 8008648:	8800759c 	.word	0x8800759c
 800864c:	7e37e43c 	.word	0x7e37e43c
 8008650:	bff00000 	.word	0xbff00000
 8008654:	000fffff 	.word	0x000fffff

08008658 <_init>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	bf00      	nop
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr

08008664 <_fini>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	bf00      	nop
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr
