from threading import Thread, RLock
from serial import Serial

PACKET_SIZE = 47
CRC_TABLE = b"0x000x4d0x9a0xd70x790x340xe30xae0xf20xbf0x680x250x8b0xc60x110x5c" \
            b"0xa90xe40x330x7e0xd00x9d0x4a0x070x5b0x160xc10x8c0x220x6f0xb80xf5" \
            b"0x1f0x520x850xc80x660x2b0xfc0xb10xed0xa00x770x3a0x940xd90x0e0x43" \
            b"0xb60xfb0x2c0x610xcf0x820x550x180x440x090xde0x930x3d0x700xa70xea" \
            b"0x3e0x730xa40xe90x470x0a0xdd0x900xcc0x810x560x1b0xb50xf80x2f0x62" \
            b"0x970xda0x0d0x400xee0xa30x740x390x650x280xff0xb20x1c0x510x860xcb" \
            b"0x210x6c0xbb0xf60x580x150xc20x8f0xd30x9e0x490x040xaa0xe70x300x7d" \
            b"0x880xc50x120x5f0xf10xbc0x6b0x260x7a0x370xe00xad0x030x4e0x990xd4" \
            b"0x7c0x310xe60xab0x050x480x9f0xd20x8e0xc30x140x590xf70xba0x6d0x20" \
            b"0xd50x980x4f0x020xac0xe10x360x7b0x270x6a0xbd0xf00x5e0x130xc40x89" \
            b"0x630x2e0xf90xb40x1a0x570x800xcd0x910xdc0x0b0x460xe80xa50x720x3f" \
            b"0xca0x870x500x1d0xb30xfe0x290x640x380x750xa20xef0x410x0c0xdb0x96" \
            b"0x420x0f0xd80x950x3b0x760xa10xec0xb00xfd0x2a0x670xc90x840x530x1e" \
            b"0xeb0xa60x710x3c0x920xdf0x080x450x190x540x830xce0x600x2d0xfa0xb7" \
            b"0x5d0x100xc70x8a0x240x690xbe0xf30xaf0xe20x350x780xd60x9b0x4c0x01" \
            b"0xf40xb90x6e0x230x8d0xc00x170x5a0x060x4b0x9c0xd10x7f0x320xe50xa8"

class LidarService(Thread):

    def __init__(self):
        super().__init__()
        self.serial = Serial("/dev/ttyS0", baudrate = 230400)
        self.values = {}
        self.lock = RLock()
        

    def run(self):
        while True:
            i = 0
            while True :
                j = 0
                while self.serial.read() != b"T" and self.serial.read() != b",":
                    j+=1
                packet = bytearray(b"0x540x2C")
                while len(packet) < PACKET_SIZE :
                    packet.extend(self.serial.read())
                start_angle = stick_bytes(packet[4:6])/100
                end_angle = stick_bytes(packet[42:44])/100
                expected_crc = packet[-1]
                # CRC check
                crc = 0
                for b in packet[:-1]:
                   crc = CRC_TABLE[(crc ^ b) & 0xff]
                if crc != expected_crc:
                    print(crc, expected_crc)
                    continue
                with self.lock:
                    print("AAAAAAAAAAAAAAAAAAAAAHHHHHHHHHHHHHHHHHHHHHHHHHHH")
                    angle_step = (end_angle - start_angle) / 12
                    for i in range(12):
                        self.values[start_angle + angle_step * i] = (data[i * 3] << 8) | data[i * 3 + 1]

    def get_values(self):
        with self.lock:
            return {**self.values}
            
def stick_bytes(bytesList):
        output = 0
        for i in range(len(bytesList)) :
            output |= bytesList[i] << (8*i)
        return output
        

if __name__ == "__main__":
    thread = LidarService()
    thread.start()
    thread.join()
